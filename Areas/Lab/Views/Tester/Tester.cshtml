@model LIMS_DEMO.Core.Lab.SampleParameterAnalysis
@{ ViewBag.Title = "Tester";
                Layout = "~/Views/Shared/_Layout.cshtml";
                var recieptDate = Model.DateReceiptOfSampling == null ? "" : @Convert.ToDateTime(Model.DateReceiptOfSampling).ToString("dd/MM/yyyy"); }
@*@Html.Hidden("SampleRecievedDateHidden1", (object)@Model.DateReceiptOfSampling))*@
@Html.Hidden("SampleRecievedDateHidden", (object)@Convert.ToDateTime(Model.DateReceiptOfSampling).ToString("yyyy-MM-dd"))
<div class="main-container">
    <div class="pd-ltr-20 xs-pd-20-10">
        <div class="min-height-200px">
            <div class="page-header">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="title-alt" id="validationClose">
                            <h6>
                                Tester
                            </h6>
                        </div>
                        <nav aria-label="breadcrumb" role="navigation">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="#">Lab</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Tester</li>
                                <li class="breadcrumb-item active" aria-current="page">Tester</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>
            <div class="pd-20 card-box mb-30" style="margin-top:-19px">
                <div class="body-nest" id="validation">
                    @*@if (Model.ReviewerComment != "")
                                {
                         <div class="alert alert-warning">
                             <span class="reviewerComment" id="reviewerComment">
                                 <strong> Reviewer Comment :@Model.ReviewerComment </strong>
                             </span>
                         </div>
                        }*@
                    <br />
                    @if (Model.ApproverComment != "")
                    {
        <div class="alert alert-warning">
            <span class="approverComment" id="approverComment">
                <strong> Approver Comment :@Model.ApproverComment </strong>
            </span>
        </div>}
                <div class="row">
                    <div class="col-md-8">
                        <div class="blog-side-nest">
                            <h4 class="text-left">Sample Details :</h4>
                            <hr />
                            <table class="table table-bordered">
                                <tbody>
                                    <tr>
                                        <td width="5%">Sample ID :</td>
                                        @*<td width="5%"><b>:</b></td>*@
                                        <td width="20%">
                                            @Html.HiddenFor(model => Model.SampleCollectionId)
                                            @Html.HiddenFor(model => Model.ParameterGroupId)
                                            @Html.HiddenFor(model => Model.ParameterMasterId)
                                            @Html.HiddenFor(model => Model.UnitId)
                                            @Html.HiddenFor(model => Model.TestMethodId)
                                            @Html.HiddenFor(model => Model.UnitName)
                                            @Html.Hidden("AnalysisProcessScheduleDetailId")
                                            @Model.SampleName
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Sample Type :</td>
                                        @*<td><b>:</b></td>*@
                                        <td> @Model.SampleTypeProductName</td>
                                    </tr>
                                    <tr>
                                        <td>Product Group :</td>
                                        @*<td><b>:</b></td>*@
                                        <td>@Model.ProductGroupName</td>
                                    </tr>
                                    <tr>
                                        <td>Sub Group :</td>
                                        @*<td><b>:</b></td>*@
                                        <td>@Model.SubGroupName</td>
                                    </tr>
                                    <tr>
                                        <td>Matrix :</td>
                                        @*<td><b>:</b></td>*@
                                        <td>@Model.MatrixName</td>
                                    </tr>
                                    <tr>
                                        <td>Tester :</td>
                                        @*<td><b>:</b></td>*@
                                        <td>@Model.Analyst</td>
                                    </tr>

                                    <tr>
                                        <td>Approver :</td>
                                        @*<td><b>:</b></td>*@
                                        <td>@Model.Approver</td>
                                    </tr>
                                    <tr>
                                        <td>Parameters :</td>
                                        @*<td><b>:</b></td>*@
                                        <td>@Model.ParameterName</td>
                                    </tr>
                                    <tr>
                                        <td>Test Method :</td>
                                        @*<td><b>:</b></td>*@
                                        <td>@Model.TestMethodName</td>
                                    </tr>
                                    <tr>
                                        <td> Sample Received Date :</td>
                                        @*<td><b>:</b></td>*@
                                        <td>@recieptDate</td>
                                        @*<td colspan="3"> Sample Received Date : @Convert.ToDateTime(recieptDate).ToString("dd/MM/yyyy")</td>*@
                                    </tr>
                                </tbody>
                            </table>
                            <hr>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <h4 class="text-left">Upload Documents :</h4>
                        <hr style="margin-bottom:20px;">
                        <form id="uploader">
                            <div class="upload">
                                <input class="col-md-8" id="fileInput" type="file" multiple> <br />
                                <input type="button" id="btnupload" class="btn btn-success btn-sm uploadButton col-md-3" value="Upload" style="margin-left: 30px; margin-top: 20px;" />
                            </div>
                          
                           
                            <table class="table" id="FilesList" style="visibility:hidden">
                                <tr>
                                    <th>
                                        Attachment(s)
                                    </th>
                                    <th>
                                        Action
                                    </th>
                                </tr>
                            </table>
                            <table class="table">
                                <tr>
                                    <th>
                                       
                                            <img src="~/Content/images/@Model.QRCodePath" style="height:150px;width:150px;" />
                                      
                                    </th>
                                </tr>
                            </table>
                        </form>
                    </div>
                    
                </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="blog-side-nest">
                                <h4 class="text-left">Tester Process Scheduler</h4>
                                <hr style="margin:0"><br />
                                <div class="col-md-12">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <label class="control-label " for="inputEmail1" style="font-weight:bold;">Testing Start Date:  <span class="required" style="color:red">*</span></label>
                                        </div>
                                        <div class="col-md-3">
                                            <div>
                                                <input type="date" id="txtAnalysisStartDatetime" name="txtAnalysisStartDatetime" placeholder="dd-MM-yyyy" onchange="ValidateDate();" style="color:black" class="form-control dtSolutionPrep" />
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="control-label " for="inputEmail1" style="font-weight:bold;">Testing End Date : <span class="required" style="color:red">*</span></label>
                                        </div>
                                        <div class="col-md-3">
                                            <div>
                                                <input type="date" id="txtAnalysisEndDatetime" name="txtAnalysisEndDatetime" placeholder="dd/MM/yyyy" onchange="ValidateDate();" style="color:black" class="form-control dtSolutionPrep" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="clearfix"></div><br />
                                <div class="col-md-12">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <label class="label-texts" style="font-weight:bold;">Total Time(Hrs):</label>
                                        </div>
                                        <div class="col-md-3">
                                            <input type="text" style="color:black" class="form-control" id="txtTotalDuration">
                                        </div>
                                        <div class="col-md-3">
                                            <label class="label-texts" style="font-weight:bold;">Quality Control Measures:</label>
                                        </div>
                                        <div class="col-md-3">
                                            <input type="text" style="color:black" class="form-control" id="txtQualityControl">
                                        </div>
                                    </div>
                                </div>

                                @if (Model.MatrixName == "Stack Emission")
                                {
                    <div>
                        @Html.ActionLink("FieldDetermination", "FieldDeterminationTester", "Tester", new { @ParameterMasterId = Model.ParameterMasterId, @SampleId = Model.SampleCollectionId, @Url = Model.MatrixName, @FDStackEmissionId = Model.FDStackEmissionId }, null)
                    </div> }
                                else if (Model.MatrixName == "Ambient Air")
                                {
                    <div>
                        @Html.ActionLink("FieldDetermination", "FieldDeterminationTester", "Tester", new { @ParameterMasterId = Model.ParameterMasterId, @SampleId = Model.SampleCollectionId, @Url = Model.MatrixName, @FieldId = Model.FieldId }, null)
                    </div>}
                                @*<div class="col-sm-4">
                                    <img src="~/Content/images/@Model.QRCodePath" style="height:100px;width:100px;" />
                                </div>*@
                                <hr>
                            </div>
                        </div>

                        <div class="clearfix"></div>
                        <div class="col-md-12">
                            <div class="form-horizontal">
                                <table class="table td-center" id="tblSolPreparation">
                                    <thead>
                                        <tr class="reco-solu thead-dark">

                                            <th class="width-20">
                                                Date of preparation
                                            </th>

                                            <th class="width-20">
                                                Name of solution
                                            </th>
                                            <th class="width-20">
                                                Quantity of solution prepared
                                            </th>
                                            <th>
                                                Add Chemicals
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr id="inputRow">
                                            <td>
                                                <div id="">
                                                    <input type="date" id="txtdtPreparation" name="txtdtPreparation" placeholder="dd/MM/yyyy" style="color:black" class="form-control dtSolutionPrep" />
                                                </div>
                                            </td>
                                            <td>
                                                <input type="text" style="color:black" class="form-control" id="txtNameOfSolution" />
                                            </td>
                                            <td>
                                                <input type="text" style="color:black" class="form-control" id="txtQtyOfSolutionPrepared" />
                                            </td>
                                            <td>
                                                <input type="button" id="ShowPopup" class="btn btn-info btn-sm" value="Add Chemicals">
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                        <div class="row" style="border: solid 2px black; border-radius: 5px; margin-left: 15px; margin-right: 15px; padding-top: 18px;width:98%;">
                            <div class="col-md-3">
                                <span style="margin-left:0px;font-weight:bold;">Select Testing Hours:</span>
                            </div>
                            <div class="col-md-3">
                                <select id="SelectTestingHours" class="form-control" onchange="ButtonsControl();">
                                    <option value="0" disabled selected>Select Testing Methods</option>
                                    <option value="1">1 Hour Testing (Minimum 8 Tests)</option>
                                    <option value="4">4 Hour Testing</option>
                                    <option value="8">8 Hour Testing</option>
                                    <option value="24">24 Hour Testing</option>
                                </select>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <label><input type="checkbox" id="chkTesthr" class="checkbox" value="Select Minimum Testing Hours" /> <b> Select Minimum Testing Hours</b></label>

                            </div>

                        </div>
                        <div class="clearfix"></div>
                        <div class="col-sm-12" style="margin-top:20px">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label class="textLabels"><b>LOD</b>&nbsp;:&nbsp; <span> @Model.LOD</span></label> <span class="dash-line"></span>
                                </div>
                                <div class="col-sm-4">
                                    <label class="textLabels"><b>Regulatory Standards</b>&nbsp;:&nbsp; <span>@Model.RegulatoryMin - @Model.RegulatoryMax</span></label><span class="dash-line"></span>
                                </div>
                                <div class="col-sm-4">
                                    <label class="textLabels"><b>Permissible limits</b>&nbsp;:&nbsp; <span> @Model.PermissibleMin - @Model.PermissibleMax</span></label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 filed-div">
                            <table id="tblFormula" class="demo table table-bordered" style="text-align:center">
                                <colgroup>
                                    <col style="width: 10%;">
                                    <col style="width: 10%;">
                                    <col style="width: 10%;">
                                    <col style="width: 35%;">
                                    <col style="width: 20%;">
                                </colgroup>
                                <tbody>
                                    <tr>
                                        <th>Sr. No.</th>
                                        <th>Notation</th>
                                        <th>Display Name</th>
                                        <th>Formula</th>
                                        <th>Value</th>
                                        <th>Unit</th>
                                    </tr>
                                    <tr style="background: #e8e8e8;">
                                        <td colspan="4" style="text-align: right;font-weight: 600;">Current Test Result:</td>

                                        <td><input type="text" style="color:black " class="form-control forallowNumbersWithDecimalOnly" id="txtFinalResult"></td>
                                        @*<td style="color:black;display:none;">
                                                <select id="UnitConvert" disabled style="color:black">
                                                </select>
                                            </td>*@
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12 " style="margin-top:20px">
                            <input id="btnCalculate" type="submit" value="Calculate" class="btn btn-sm btn-info" style="text-align:center;margin:auto">
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-12">

                            <table style="border-collapse:collapse" border="1" align="center" class="table">
                                <thead>
                                    <tr class="thead-dark">
                                        <th>
                                            Sr. No.
                                        </th>
                                        <th>
                                            Name Of Test
                                        </th>
                                        <th>
                                            Result
                                        </th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                        <div class="col-md-12">
                            <table style="border-collapse:collapse" border="1" align="center" class="table" id="tblAvrgResult">
                                <tbody>
                                    <tr id="inputAvrgResultRow">
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        @*<table class="table table-bordered" style="border-collapse:collapse" border="1" align="center"   id="tblAvrgResult">
                                <thead>
                                    <tr class="thead-dark">
                                        <th>
                                            Sr. No.
                                        </th>
                                        <th>
                                            Name Of Test
                                        </th>
                                        <th>
                                            Result
                                        </th>
                                    </tr>
                                    <tr id="inputAvrgResultRow">
                                    </tr>
                                </thead>
                            </table>*@
                    </div>
                    @*<div class="col-md-12">
                            <table style="border-collapse:collapse" border="1" align="center" class="table">
                                <tbody>

                                </tbody>
                            </table>
                        </div>*@

                    <div class="col-md-12">
                        <table>
                            <tr>
                                <td colspan="4" style="text-align: right;font-weight: 600;">Final Result:</td>&nbsp&nbsp&nbsp&nbsp
                                <td><input type="text" style="color:black " class="form-control allowNumbersWithDecimalOnly" id="txtAverageFinalResult"></td>
                                @*<td style="color:black">
                                        <select id="UnitConvert" disabled style="color:black">
                                        </select>
                                    </td>*@
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-12" style="text-align:right;margin-top:20px;margin-bottom:20px">
                        @*<input type="button" id="btnSave" value="Save" class="btn btn-sm btn-primary" />*@
                        <input type="button" id="btnSubmit" value="Forward to Approver" class="btn btn-sm btn-info" />
                        <input type="button" value="Close" id="btnclose" class="btn btn-Colse btn-sm btn-danger" onclick="location.href='@Url.Action("ParameterList", "Analyse")'">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="ChemicalsPopup" class="modal">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-header" style="background-color: steelblue;height: 42px;">
                @*<p class="Closeup"><span class="close CPopup">&times;</span></p>*@
                <h4 style="text-align:center;color:white;font-weight:bold;">Add Chemical Details</h4>
                <a class="Closeup" href="/Lab/Tester/Tester?ParameterMasterId=@Model.ParameterMasterId&SampleId=@Model.SampleCollectionId"><span class="close CPopup" style="color:white;">&times;</span></a>
            </div>
            <div class="modal-body">
                <input type="hidden" id="dtPre" />
                <input type="hidden" id="soluName" />
                <input type="hidden" id="qtyOfSolu" />
                <input type="hidden" id="ParameterMasterId" />
                <input type="hidden" id="SampleCollectionId" />
                <input type="hidden" id="ParameterGroupId" />
                <div id="divChemicals" style="border:none" class="row">
                    <div class="col-md-12">

                        <div class="row" style="margin-left:17px">
                            <label> Chemical Name: </label>
                            <div class="col-sm-6">
                                <input type="text" id="txtNameofChemicalUse" class="form-control" style="margin-left:16px;" />
                            </div>
                        </div><br />
                        <div class="row" style="margin-left:17px">
                            <label> Chemical  Quantity : </label>
                            <div class="col-sm-6">
                                <input type="text" id="txtQualityofChemicalUse" class="form-control" />
                            </div>
                        </div><br />
                        <div class="col-md-4" style="margin:auto">
                            <input type="button" class="btn btn-info btn-sm" value="Add Chemicals" id="ShowChemicalPopup" style="margin-bottom:10px" />
                        </div>
                        <br />
                        <div class="col-md-12">
                            <table style="border-collapse:collapse" border="1" align="center" class="table table-bordered" id="tblChemicalsUsed">
                                <tr class="thead-dark">
                                    <th class="width-15">
                                        Name of chemical
                                    </th>
                                    <th class="width-15">
                                        Quantity of chemical
                                    </th>
                                </tr>
                                <tbody>
                                    <tr id="inputChemicalsRow">
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border:none">
                </div>
            </div>
        </div>
    </div>
</div>
<div id="ChemicalsPopupView" class="modal">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <!-- Modal content -->
        <div class="modal-content">
            <div style="background-color:steelblue;height: 42px;">
                @*<p class="Closeup"><span class="close CPopup">&times;</span></p>*@
                <h4 style="text-align:left;color:white;font-weight:bold;margin-top:18px;margin-left:3px;">View Chemicals</h4>
                <a class="Closeup" href="/Lab/Tester/Tester?ParameterMasterId=@Model.ParameterMasterId&SampleId=@Model.SampleCollectionId"><span class="close CPopup" style="color:white;margin-top:-13px;">&times;</span></a>
            </div>
            <div class="modal-body">
                <input type="hidden" id="dtPre" />
                <input type="hidden" id="soluName" />
                <input type="hidden" id="qtyOfSolu" />
                <input type="hidden" id="ParameterMasterId" />
                <input type="hidden" id="SampleCollectionId" />
                <input type="hidden" id="ParameterGroupId" />
                <div id="divChemicals" style="border:none" class="row">

                    <div class="col-md-12">
                        <table style="border-collapse:collapse" border="1" align="center" class="table" id="tblChemicalUsedData">
                            <tr class="thead-dark">
                                <th class="width-15">
                                    Name of chemical
                                </th>
                                <th class="width-15">
                                    Quantity of chemical
                                </th>
                            </tr>
                            <tbody>
                                <tr id="inputChemicalRowData">
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="border:none">
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/Application/Validation.js"></script>
<script>
    var formdata = new FormData();
    var TestingRowCount = 0;
    Validation.initialize();
    var unitMasterList = [];
    var formulaList = [];
    var formulaList2 = [];
    var offset = 0;
    $("#fileInput").on("change", function () {
        var fileInput = document.getElementById('fileInput');
        //Iterating through each files selected in fileInput
        for (i = 0; i < fileInput.files.length; i++) {

            var sfilename = fileInput.files[i].name;
            let srandomid = Math.random().toString(36).substring(7);
            let FileID = 0;
            formdata.append(sfilename, fileInput.files[i]);

            var markup = "<tr id='" + srandomid + "'><td>" + sfilename + "</td><td><a href='#' onclick='DeleteFile(\"" + srandomid + "\",\"" + sfilename +
                "\",\"" + FileID + "\")'><span class='glyphicon glyphicon-remove red'></span></a></td></tr>"; // Binding the file name
            $("#FilesList tbody").append(markup);

        }
        chkatchtbl();
        $('#fileInput').val('');
    });
    function chkatchtbl() {
        if ($('#FilesList tr').length > 1) {
            $("#FilesList").css("visibility", "visible");
        } else {
            $("#FilesList").css("visibility", "hidden");
        }
    }
    $("#btnupload").click(function () {
                debugger
        $("#btnupload").attr('value', 'Please Wait');
        $('#btnupload').attr('disabled', true);

        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();

        // formdata = new FormData();

        //formdata.forEach(function(val, key, fD){
        // // here you can add filtering conditions
        // formdata.delete(key)
        // });

        formdata.set('ParameterMasterId', ParameterMasterId);
        formdata.set('SampleCollectionId', SampleCollectionId);
        formdata.set('ParameterGroupId', ParameterGroupId);

        //formdata.append('parametermasterid', parametermasterid);
        //formdata.append('samplecollectionid', samplecollectionid);
        //formdata.append('parametergroupid', parametergroupid);


        $.ajax({
            url: '/Tester/UploadFiles',
            type: "POST",
            contentType: false, // Not to set any content header
            processData: false, // Not to process data
            data: formdata,
            async: false,
            success: function (result) {
                if (result != "") {
                    alert(result);
                }
                $('#btnupload').attr('disabled', false);
                $("#btnupload").attr('value', 'Upload');
            },
            error: function (err) {
                alert(err.statusText);
            }
        });
    });
    function DeleteFile(Fileid, FileName, FileIdToDelete) {
        if (FileIdToDelete != 0) {
            $.ajax({
                url: "/Tester/DeleteFile",
                type: 'POST',
                data: { FileIdToDelete: FileIdToDelete },
                dataType: 'text',
                async: false,
                success: function (data) {

                    console.log("File Deleted.");
                },
                error: function (response) {
                    console.log("error");
                    console.log(response);
                }
            });
        }
        console.log(FileIdToDelete);
        formdata.delete(FileName)
        $("#" + Fileid).remove();
        chkatchtbl();
    }
    $(function () {
        GetUnitMaster();
        BindSolutionPreparationData();
        BindFileTable();
        PopulateFormula();
        PopulateResultRows();
        AnalysisProcessScheduler();
        //PopulateFinalResultUnit();

    });
    function BindFileTable() {
        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();
        var obj = {
            ParameterMasterId: ParameterMasterId,
            SampleCollectionId: SampleCollectionId,
            ParameterGroupId: ParameterGroupId
        };
        $.ajax({
            type: 'GET',
            url: "/Tester/GetParameterFileInfo",
            data: obj,
            async: false,
            dataType: 'json',
            success: function (data) {
                var rowHtml = '';
                $.each(data, function (index, value) {
                    let srandomid = Math.random().toString(36).substring(7);
                    var FileName = value.FileName.split('\\').pop();
                    var markup = "<tr id='" + srandomid + "'><td> " + FileName + "</td><td><a href='#' onclick='DeleteFile(\"" + srandomid + "\",\"" + FileName +
                        "\",\"" + value.FileID + "\")'><span class='icon-copy fa fa-close' style='color:red'></span></a></td></tr>"; // Binding the file name
                    $("#FilesList tbody").append(markup);

                });
                chkatchtbl();
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });

    }
     function GetUnitMaster() {
        $.ajax({
            url: "/FormulaBuilder/GetUnitMaster",
            type: 'GET',
            dataType: 'json',
            async: false,
            success: function (data) {
                unitMasterList = data;
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }
    function PopulateFormula() {
        debugger
        var parameterMasterId = $('#ParameterMasterId').val();
        var testMethodId = $('#TestMethodId').val();
        var parameterGroupId = $('#ParameterGroupId').val();
        var sampleCollectionId = $('#SampleCollectionId').val();
        // alert($('#SampleCollectionId').val());
        // alert($('#SampleCollectionId').val());
        var unitId = $('#UnitId').val();
        var objParam = {
            ParameterMasterId: parameterMasterId,
            TestMethodId: testMethodId,
            ParameterGroupId: parameterGroupId,
            SampleCollectionId: sampleCollectionId,
            UnitId: unitId
        };
        $.ajax({
            url: "/tester/GetFormula",
            type: 'GET',
            data: objParam,
            dataType: 'json',
            async: false,
            success: function (data) {

                formulaList = data.FormulaList;
                var tableHtml = '';
                $.each(formulaList, function (key, value) {
                    console.log(value.IsFDV);
                    //console.log(unitMasterList);
                    var unit = '';
                    var entry = unitMasterList.find(function (e) { return e.UnitId == value.Unit; });
                    if (entry) {
                        unit = entry.UnitName;
                    }
                    var row = '';
                    var strFormula = value.DisplayName;
                    var mys = '';
                    if (strFormula.indexOf('~') > 0 && strFormula.indexOf('!') > 0) {
                        while (strFormula.indexOf('~') > 0 && strFormula.indexOf('!') > 0) {
                            var mys = strFormula.substring(strFormula.indexOf('~') + 1, strFormula.indexOf("!"));
                            strFormula = strFormula.replace('~' + mys + '!', '<sub>' + mys + '</sub>');
                        }
                    }
                    if (strFormula.indexOf('#') > 0 && strFormula.indexOf('$') > 0) {
                        while (strFormula.indexOf('#') > 0 && strFormula.indexOf('$') > 0) {
                            var mys = strFormula.substring(strFormula.indexOf('#') + 1, strFormula.indexOf("$"));
                            strFormula = strFormula.replace('#' + mys + '$', '<sup>' + mys + '</sup>');
                        }
                    }
                    console.log(strFormula);
                    if (value.Formula == "") {
                        row = '<tr class="formulaRow">';

                    }
                    else {
                        row = '<tr class="formulaRow">';
                    }
                    row = row + '<td>' + value.SrNo + '</td>';
                    row = row + '<td>' + value.Notation + '</td>';
                    row = row + '<td>' + strFormula + '</td>';
                    row = row + '<td>' + value.Formula + '</td>';

                    var ValidationClass = "";
                    if (value.DataType == 1) {
                        ValidationClass = "allowNumbersOnly"
                    }
                    else if (value.DataType == 2) {
                        ValidationClass = "allowNumbersWithDecimalOnly"
                    }
                    if (value.Formula == "") {
                        if (value.IsFDV) {
                            row = row + '<td><input type="text" style="color:black" class="formula form-control ' + ValidationClass + '" disabled value="" /></td>';
                        }
                        else {
                            row = row + '<td><input type="text" style="color:black" class="formula form-control ' + ValidationClass + '" value="" /></td>';
                        }
                    }

                    else {
                        row = row + '<td><input type="text" style="color:black" class="formula form-control ' + ValidationClass + '" disabled value="" /></td>';
                    }
                    row = row + '<td>' + unit + '</td>';
                    row = row + '</tr>';
                    tableHtml = tableHtml + row;
                });
                $('#tblFormula tr:first').after(tableHtml);
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }
    function ButtonsControl() {
        var sel = document.getElementById('SelectTestingHours');
        var chk = document.getElementById('chkTesthr');
        if (sel.value != 0) {
            $('#btnCalculate').attr('disabled', false);
            $('#btnSubmit').attr('disabled', false);
        }
        else {
            $('#btnCalculate').attr('disabled', true);
            $('#btnSubmit').attr('disabled', true);
        }
    }
    function AnalysisProcessScheduler() {


        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();

        var jsonObject = { "SampleCollectionId": SampleCollectionId, "ParameterGroupId": ParameterGroupId, "ParameterMasterId": ParameterMasterId };

        $.ajax({
            type: "Get",
            url: "/Tester/GetTestProcessScheduler",
            dataType: 'text',
            cache: false,
            async: false,
            data: "model=" + JSON.stringify(jsonObject),
            success: function (response) {
                debugger
                var x = response;
                $('#txtFinalResult').val(JSON.parse(response).FinalResult);
                $('#txtTotalDuration').val(JSON.parse(response).TotalDuration);
                $('#txtQualityControl').val(JSON.parse(response).QualityControl);


                var newdate = JSON.parse(response).StartOfAnalysis;
                var dateString = newdate.toString().substr(6);
                var currentTime = new Date(parseInt(dateString));
                var month = currentTime.getMonth() + 1;
                var day = currentTime.getDate();
                var year = currentTime.getFullYear();
                if (parseInt(month) < 10) {
                    month = "0" + month;
                }
                if (parseInt(day) < 10) {
                    day = "0" + day;
                }
                var StartDate = year + "-" + month + "-" + day ;
                $('#txtAnalysisStartDatetime').val(StartDate);


                var newdate1 = JSON.parse(response).EndOfAnalysis;
                var dateString1 = newdate1.toString().substr(6);
                var currentTime1 = new Date(parseInt(dateString1));
                var month1 = currentTime1.getMonth() + 1;
                var day1 = currentTime1.getDate();
                var year1 = currentTime1.getFullYear();
                if (parseInt(month1) < 10) {
                    month1 = "0" + month1;
                }
                if (parseInt(day1) < 10) {
                    day1 = "0" + day1;
                }
                var EndDate = year1 + "-" + month1 + "-" + day1;

                $('#txtAnalysisEndDatetime').val(EndDate);
                $('#txtAverageFinalResult').val(JSON.parse(response).FinalResult);

                //$('#txtAnalysisEndDatetime').prop('disabled', true);
                //$('#txtAnalysisDuration').prop('disabled',true);


                //var analysisStartAt = new Date(JSON.parse((parseInt(JSON.parse(response).AnalysisStartAt.substr(6)))));




                //var analysisEndAt = new Date(parseInt(JSON.parse(response).AnalysisEndAt.substr(6)));
                //$('#txtAnalysisEndDatetime').val(GetDateTime(analysisEndAt));

                //var old_date_obj = new Date(analysisStartAt).getTime();
                //var new_date_obj = new Date(analysisEndAt).getTime();


                //// Calculate the difference in milliseconds
                ////var difference_ms = Math.abs(new_date_obj - old_date_obj)
                //var difference_ms = JSON.parse(response).AnalysisDuration.TotalMilliseconds

                //var ONE_DAY = 1000 * 60 * 60 * 24;
                //var ONE_HOUR = 1000 * 60 * 60;
                //var ONE_MINUTE = 1000 * 60;
                //// Convert back to days, hours, and minutes
                //var days = parseInt(difference_ms / ONE_DAY);
                //var hours = parseInt(difference_ms / ONE_HOUR) - (days * 24);
                //var minutes = parseInt(difference_ms / ONE_MINUTE) - (days * 24 * 60) - (hours * 60);
                //var sec = Math.round(parseFloat(difference_ms / 1000)) - (days * 24 * 60) - (hours * 60) - (minutes * 60);

                //var diffTime = days + ' days, ' + pad(hours) + ':' + pad(minutes) + ':' + pad(sec);
                //$('#txtAnalysisDuration').val(diffTime);

            },

            error: function (xhr) {
                console.log('error');
                $('#btnSubmit').attr('disabled', false);
                $("#btnSubmit").attr('value', 'Forward to Reviewer');
            }
        });

    }
    function ValidateTestMethods() {
        var sel = document.getElementById('SelectTestingHours');
        if (sel.value != 0) {
            return true;
        }
        else
            return false;
    }
    function PopulateResultRows() {
        debugger;
        var parameterMasterId = $('#ParameterMasterId').val();
        var testMethodId = $('#TestMethodId').val();
        var parameterGroupId = $('#ParameterGroupId').val();
        var sampleCollectionId = $('#SampleCollectionId').val();
        var unitId = $('#UnitId').val();
        var objParam = {
            ParameterMasterId: parameterMasterId,
            TestMethodId: testMethodId,
            ParameterGroupId: parameterGroupId,
            SampleCollectionId: sampleCollectionId,
            UnitId: unitId
        };
        $.ajax({
            url: "/Tester/GetFinalResRow",
            type: 'GET',
            data: objParam,
            dataType: 'json',
            async: false,
            success: function (data) {
                formulaList2 = data.FormulaList;
                var tableHtml = '';
                var rowHtml = '';
                $("#tblAvrgResult tbody").find(".solutionRow").remove();
                var sr = 0;
                //rowHtml += '<tr class="solutionRow"><td>' + 'SrNo' + '</td><td>' + 'Name Of Test' + '</td><td>' + 'Result' + '</td></tr>'
                $.each(formulaList2, function (key, value) {
                    sr = sr + 1;
                    var NameOfTest = "Test_" + sr;
                    rowHtml += '<tr class="solutionRow"><td style="text-align:center;">' + sr + '</td><td style="text-align:center;">' + NameOfTest + '</td><td style="text-align:center;">' + value.NotationValue + '</td></tr>'
                });
                $('#tblAvrgResult tr#inputAvrgResultRow').before(rowHtml);
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }
    $("#btnSubmit").click(function () {
        debugger
            var TblrowCount = $("#tblAvrgResult tr").length;
            var srNo = TblrowCount - 1;
            var sel = document.getElementById('SelectTestingHours');
            var TestingHr = sel.value;
            var chk = document.getElementById('chkTesthr');


            if (ValidateDate() == false) {
                return false;
            }
            if (chk.checked == true) {
                if (TestingHr == "1" && srNo < 8) {
                    alert("Insufficient data!");
                    $('#btnSubmit').attr('disabled', true);
                }
                else if (TestingHr == "4" && srNo < 2) {
                    alert("Insufficient data!");
                    $('#btnSubmit').attr('disabled', true);
                }
                else if (TestingHr == "8" && srNo < 1) {
                    alert("Insufficient data!");
                    $('#btnSubmit').attr('disabled', true);
                }
            }
            else if (chk.checked == true) {
                if (TestingHr == "1" && srNo < 24) {
                    alert("Insufficient data!");
                    $('#btnSubmit').attr('disabled', true);
                }
                else if (TestingHr == "4" && srNo < 6) {
                    alert("Insufficient data!");
                    $('#btnSubmit').attr('disabled', true);
                }
                else if (TestingHr == "8" && srNo < 3) {
                    alert("Insufficient data!");
                    $('#btnSubmit').attr('disabled', true);
                }
                else if (TestingHr == "24" && srNo < 1) {
                    alert("Insufficient data!");
                    $('#btnSubmit').attr('disabled', true);
                }
            }

             $("#btnSubmit").attr('value','Please Wait');
             $('#btnSubmit').attr('disabled', true);
            var finalResult = $('#txtFinalResult').val();
            var totalDuration = $('#txtTotalDuration').val();
            var QualityControl = $('#txtQualityControl').val();
            var analysisStartAt = $('#txtAnalysisStartDatetime').val();
            var analysisEndAt = $('#txtAnalysisEndDatetime').val();
            //var endTime = $('#txtAnalysisDuration').val();
            if (finalResult != '' ) {
                updateFinalResult(finalResult, true, totalDuration, analysisStartAt, QualityControl, analysisEndAt);
                window.location.href = "@Url.Action("SampleList", "Tester", new { Area="Lab"})";

                $('#btnSubmit').attr('disabled', false);
                $("#btnSubmit").attr('value','Forward to Approver');
            }
            else {
                alert('Please Enter Mandatory Data');
                $('#btnSubmit').attr('disabled', false);
                $("#btnSubmit").attr('value','Forward to Approver');
            }
        });

    $('#btnCalculate').click(function () {
        if (ValidateDate() == false) {
            return false;
        }
        if (ValidateTestMethods() == false) {
            return false;
        }
        else {
            var formulacalculation = formulaList;
            var calculatedData = [];
            var i = 0;
            $.each(formulacalculation, function (key, value) {
                if (value.Formula == "") {
                    var inputVal = $($('.formulaRow')[i]).find('.formula').val();
                    var row = { Notation: value.Notation, calValue: inputVal };
                    calculatedData.push(row);
                    formulaList[i].NotationValue = inputVal;
                }
                else {
                    var inputVal = formulacalculation[i].Formula;
                    for (let x = calculatedData.length - 1; x >= 0; x--) {
                        var notation = calculatedData[x].Notation;
                        var calValue = calculatedData[x].calValue;
                        inputVal = inputVal.replace(notation, calValue);
                    }
                    inputVal = eval(inputVal);
                    var row = { Notation: value.Notation, calValue: inputVal };
                    var Precision = 2;
                    if (value.Precision > 0) {
                        Precision = value.Precision;
                    }

                    $($('.formulaRow')[i]).find('.formula').val(parseFloat(inputVal).toFixed(Precision));
                    calculatedData.push(row);
                    formulaList[i].NotationValue = inputVal;

                }
                i = i + 1;
            });

            var finalResult = formulaList[i - 1].NotationValue;
            var totalDuration = $('#txtTotalDuration').val();
            var analysisStartAt = $('#txtAnalysisStartDatetime').val();
            var analysisEndAt = $('#txtAnalysisEndDatetime').val();
            var QualityControl = $('#txtQualityControl').val();
            $('#txtFinalResult').val(finalResult.toFixed(2));

            //by nitin
            var sel = document.getElementById('SelectTestingHours');
            var chk = document.getElementById('chkTesthr');
            var TestingHours = sel.value;

            if (chk.checked == true) {
                PopulateResultRows();
                var rowHtml = '';
                var TblrowCount = $("#tblAvrgResult tr").length;
                var srNo = TblrowCount - 1;

                var numberofcells = document.getElementById("tblAvrgResult").rows[0].cells.length;
                var NameOfTest = "Test_" + TblrowCount;
                var FResult = $('#txtFinalResult').val();
                var avrValue = 0;

                for (var a = 0; a < srNo; a++) {
                    avrValue = avrValue + parseFloat(document.getElementById("tblAvrgResult").rows[a].cells.item(2).innerHTML);
                }
                var avrValue2 = parseFloat(avrValue) + parseFloat(FResult);
                document.getElementById("txtAverageFinalResult").value = parseFloat(avrValue2 / (srNo + 1));
                var finalresult2 = document.getElementById("txtAverageFinalResult").value;
                $('#txtTotalDuration').val(totalDuration);
                $('#txtAnalysisStartDatetime').val(analysisStartAt);
                $('#txtAnalysisEndDatetime').val(analysisEndAt);
                var temp = srNo + 1;
                if (TestingHours == "1") {
                    if (srNo < 7) {
                        $('#btnSave').attr('disabled', true);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        alert("" + TestingHours + " of " + temp + " Result stored!");
                        PopulateResultRows();
                    }
                    else if (srNo == 7) {
                        $('#btnSave').attr('disabled', false);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        updateFinalResult(finalresult2, false, totalDuration, analysisStartAt, QualityControl, analysisEndAt, (TestingHours + " of " + temp));
                        PopulateResultRows();
                    }
                    else {
                        alert("You can't store more than 8 results!");
                    }
                }
                else if (TestingHours == "4") {
                    if (srNo < 1) {
                        $('#btnSave').attr('disabled', true);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        alert("" + TestingHours + " of " + temp + " Result stored!");
                        PopulateResultRows();
                    }
                    else if (srNo == 1) {
                        $('#btnSave').attr('disabled', false);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        updateFinalResult(finalresult2, false, totalDuration, analysisStartAt, QualityControl, analysisEndAt, (TestingHours + " of " + temp));
                        PopulateResultRows();
                    }
                    else {
                        alert("You can't store more than 2 results!");
                    }
                }
                else if (TestingHours == "8") {
                    if (srNo < 1) {
                        //alert("Hello");
                        $('#btnSave').attr('disabled', false);
                        updateCalculatedValue((TestingHours + " of " + TblrowCount));
                        updateFinalResult(finalresult2, false, totalDuration, analysisStartAt, QualityControl, analysisEndAt, (TestingHours + " of " + temp));
                        PopulateResultRows();
                    }

                    else {
                        alert("You can't store more than 1 results!");
                    }
                }
                else if (TestingHours == "24") {
                    if (srNo < 1) {
                        $('#btnSave').attr('disabled', false);
                        updateCalculatedValue(TestingHours + "_of" + TblrowCount);
                        updateFinalResult(finalresult2, false, totalDuration, analysisStartAt, QualityControl, analysisEndAt, (TestingHours + " of " + temp));
                        PopulateResultRows();
                    }
                    else {
                        alert("You can't store more than 1 results!");
                    }
                }
            }
            else {
                PopulateResultRows();
                var rowHtml = '';
                var TblrowCount = $("#tblAvrgResult tr").length;
                var srNo = TblrowCount - 1;
                //alert(TblrowCount);
                var numberofcells = document.getElementById("tblAvrgResult").rows[0].cells.length;
                var NameOfTest = "Test_" + TblrowCount;
                var FResult = $('#txtFinalResult').val();
                var avrValue = 0;

                for (var a = 0; a < srNo; a++) {
                    avrValue = avrValue + parseFloat(document.getElementById("tblAvrgResult").rows[a].cells.item(2).innerHTML);
                }
                var avrValue2 = parseFloat(avrValue) + parseFloat(FResult);
                document.getElementById("txtAverageFinalResult").value = parseFloat(avrValue2 / (srNo + 1));
                var finalresult2 = document.getElementById("txtAverageFinalResult").value;
                $('#txtTotalDuration').val(totalDuration);
                $('#txtAnalysisStartDatetime').val(analysisStartAt);
                $('#txtAnalysisEndDatetime').val(analysisEndAt);

                var temp = srNo + 1;
                //alert((TestingHours + " of " + TblrowCount));
                if (TestingHours == "1") {
                    if (srNo < 23) {
                        $('#btnSave').attr('disabled', true);
                        updateCalculatedValue((TestingHours + " of " + TblrowCount));
                        alert("" + TestingHours + " of " + temp + " Result stored!");
                        PopulateResultRows();
                    }
                    else if (srNo == 23) {
                        $('#btnSave').attr('disabled', false);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        updateFinalResult(finalresult2, false, totalDuration, analysisStartAt, QualityControl, analysisEndAt, (TestingHours + " of " + temp));
                        PopulateResultRows();
                        GetAvgResultfor_24();
                    }
                    else {
                        alert("You can't store more than 24 results!");
                    }
                }
                else if (TestingHours == "4") {
                    debugger;
                    if (srNo < 5) {
                        $('#btnSave').attr('disabled', true);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        alert("" + TestingHours + " of " + temp + " Result stored!");
                        PopulateResultRows();
                    }
                    else if (srNo == 5) {
                        $('#btnSave').attr('disabled', false);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        updateFinalResult(finalresult2, false, totalDuration, analysisStartAt, QualityControl, analysisEndAt, (TestingHours + " of " + temp));
                        PopulateResultRows();
                        GetAvgResultfor_4();

                    }
                    else {
                        alert("You can't store more than 6 results!");
                    }
                }
                else if (TestingHours == "8") {
                    if (srNo < 2) {
                        $('#btnSave').attr('disabled', true);
                        updateCalculatedValue((TestingHours + " of " + TblrowCount));
                        alert("" + TestingHours + " of " + temp + " Result stored!");
                        PopulateResultRows();
                    }
                    else if (srNo == 2) {
                        //alert("Hii/////////");
                        $('#btnSave').attr('disabled', false);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        updateFinalResult(finalresult2, false, totalDuration, analysisStartAt, QualityControl, analysisEndAt, (TestingHours + " of " + temp));
                        PopulateResultRows();
                        GetAvgResultfor_8();
                    }
                    else {
                        alert("You can't store more than 3 results!");
                    }
                }
                else if (TestingHours == "24") {
                    if (srNo < 1) {
                        $('#btnSave').attr('disabled', false);
                        updateCalculatedValue(TestingHours + " of " + TblrowCount);
                        updateFinalResult(finalresult2, false, totalDuration, analysisStartAt, QualityControl, analysisEndAt, (TestingHours + " of " + temp));
                        PopulateResultRows();
                        GetAvgResultfor_1();
                    }
                    else {
                        alert("You can't store more than 1 results!");
                    }

                }

            }
        }
    });

    function GetAvgResultfor_4() {
        debugger
        var arr1 = [];
        var arr2 = [];
        for (var i = 0; i <= 5; i++) {
            arr2[i] = parseFloat(document.getElementById("tblAvrgResult").rows[i].cells.item(2).innerHTML);
        }
        arr1[0] = (arr2[0] + arr2[1]) / 2;
        arr1[1] = (arr2[2] + arr2[3]) / 2;
        arr1[2] = (arr2[4] + arr2[5]) / 2;



        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();

        //var obj = {
        //    ParameterMasterId: ParameterMasterId,
        //    SampleCollectionId: SampleCollectionId,
        //    ParameterGroupId: ParameterGroupId,
        //    avgResult: arr1

        //};
        //var parameter = JSON.stringify(obj);
        //var solutionData = { "ParameterMasterId": ParameterMasterId, "SampleCollectionId": SampleCollectionId, "ParameterGroupId": ParameterGroupId,"avgResult": arr1};
        $.ajax({
            type: "POST",
            url: "/Tester/InsertAvgValue",
            dataType: 'text',
            cache: false,
            data: { "ParameterMasterId": ParameterMasterId, "SampleCollectionId": SampleCollectionId, "ParameterGroupId": ParameterGroupId, "avgResult": arr1 },
            success: function (response) {
                alert("Average Result Stored Successfully")
            },
            error: function (xhr) {
                console.log('error');
            }
        });

    }
    function GetAvgResultfor_1() {
        debugger
        var arr1 = [];
        var arr2 = [];
        for (var i = 0; i <= 0; i++) {
            arr2[i] = parseFloat(document.getElementById("tblAvrgResult").rows[i].cells.item(2).innerHTML);
        }
        arr1[0] = arr2[0];




        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();

        //var obj = {
        //    ParameterMasterId: ParameterMasterId,
        //    SampleCollectionId: SampleCollectionId,
        //    ParameterGroupId: ParameterGroupId,
        //    avgResult: arr1

        //};
        //var parameter = JSON.stringify(obj);
        //var solutionData = { "ParameterMasterId": ParameterMasterId, "SampleCollectionId": SampleCollectionId, "ParameterGroupId": ParameterGroupId,"avgResult": arr1};
        $.ajax({
            type: "POST",
            url: "/Tester/InsertAvgValue",
            dataType: 'text',
            cache: false,
            data: { "ParameterMasterId": ParameterMasterId, "SampleCollectionId": SampleCollectionId, "ParameterGroupId": ParameterGroupId, "avgResult": arr1 },
            success: function (response) {
                alert("Average Result Stored Successfully")
            },
            error: function (xhr) {
                console.log('error');
            }
        });

    }
    function GetAvgResultfor_8() {
        debugger
        var arr1 = [];
        var arr2 = [];
        for (var i = 0; i <= 2; i++) {
            arr2[i] = parseFloat(document.getElementById("tblAvrgResult").rows[i].cells.item(2).innerHTML);
        }
        arr1[0] = arr2[0];
        arr1[1] = arr2[1];
        arr1[2] = arr2[2];




        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();

        //var obj = {
        //    ParameterMasterId: ParameterMasterId,
        //    SampleCollectionId: SampleCollectionId,
        //    ParameterGroupId: ParameterGroupId,
        //    avgResult: arr1

        //};
        //var parameter = JSON.stringify(obj);
        //var solutionData = { "ParameterMasterId": ParameterMasterId, "SampleCollectionId": SampleCollectionId, "ParameterGroupId": ParameterGroupId,"avgResult": arr1};
        $.ajax({
            type: "POST",
            url: "/Tester/InsertAvgValue",
            dataType: 'text',
            cache: false,
            data: { "ParameterMasterId": ParameterMasterId, "SampleCollectionId": SampleCollectionId, "ParameterGroupId": ParameterGroupId, "avgResult": arr1 },
            success: function (response) {
                alert("Average Result Stored Successfully")
            },
            error: function (xhr) {
                console.log('error');
            }
        });

    }
    function GetAvgResultfor_24() {
        debugger
        var arr1 = [];
        var arr2 = [];
        for (var i = 0; i <= 23; i++) {
            arr2[i] = parseFloat(document.getElementById("tblAvrgResult").rows[i].cells.item(2).innerHTML);
        }
        arr1[0] = (arr2[0] + arr2[1] + arr2[2] + arr2[3] + arr2[4] + arr2[5] + arr2[6] + arr2[7]) / 8;
        arr1[1] = (arr2[8] + arr2[9] + arr2[10] + arr2[11] + arr2[12] + arr2[13] + arr2[14] + arr2[15]) / 8;
        arr1[2] = (arr2[16] + arr2[17] + arr2[18] + arr2[19] + arr2[20] + arr2[21] + arr2[22] + arr2[23]) / 8;

        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();

        $.ajax({
            type: "POST",
            url: "/Tester/InsertAvgValue",
            dataType: 'text',
            cache: false,
            data: { "ParameterMasterId": ParameterMasterId, "SampleCollectionId": SampleCollectionId, "ParameterGroupId": ParameterGroupId, "avgResult": arr1 },
            success: function (response) {
                alert("Average Result Stored Successfully")
            },
            error: function (xhr) {
                console.log('error');
            }
        });

    }
    function pad(s) { return (s < 10) ? '0' + s : s; }
    function GetDateTime(date) {
        debugger
        var d1 = date
        var d = new Date(d1)
        var datepart = [pad(d.getMonth() + 1), pad(d.getDate()), d.getFullYear()].join('/');
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var secs = pad(date.getSeconds());
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var timePart = hours + ':' + minutes + ':' + secs + ' ' + ampm;
        return datepart + " " + timePart;
    }
    function ViewChemicalData(nameOfSolution) {
        //$('#ChemicalsPopupView').modal('show');  tblChemicalUsedData

        ViewChemicalUsedData(nameOfSolution);

    }
    function ViewChemicalUsedData(nameOfSolution) {
        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();
        var obj = {
            ParameterMasterId: ParameterMasterId,
            SampleCollectionId: SampleCollectionId,
            ParameterGroupId: ParameterGroupId,
            nameOfSolution: nameOfSolution
        };
        $.ajax({
            url: "/Tester/GetChemicalUsedData",
            type: 'GET',
            data: obj,
            async: false,
            dataType: 'json',
            success: function (data) {
                //$("#tblChemicalUsedData tbody").find("#inputChemicalRowData").remove();
                var rowHtml2 = '';

                $.each(data, function (index, value) {
                    rowHtml2 += '<tr class="solutionRow"><td>' + value.NameofChemicalUsed + '</td><td>' + value.QualityofChemicalUsed + '</td></tr>'
                });
                $('#tblChemicalUsedData tr#inputChemicalRowData').after(rowHtml2);

                //$("#tblChemicalUsed tbody").find("#inputChemicalRow").remove();

                $('#ChemicalsPopupView').modal('show');
                //$('#ChemicalsPopup').modal('show');
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }
    function BindChemicalUsedData(nameOfSolution) {
        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();
        var obj = {
            ParameterMasterId: ParameterMasterId,
            SampleCollectionId: SampleCollectionId,
            ParameterGroupId: ParameterGroupId,
            nameOfSolution: nameOfSolution
        };
        $.ajax({
            url: "/tester/GetChemicalUsedData",
            type: 'GET',
            data: obj,
            async: false,
            dataType: 'json',
            success: function (data) {
                var rowHtml4 = '';
                //$("#tblChemicalsUsed tbody").find("#inputChemicalsRow").remove();
                $.each(data, function (index, value) {
                    rowHtml4 += '<tr class="solutionRow"><td>' + value.NameofChemicalUsed + '</td><td>' + value.QualityofChemicalUsed + '</td></tr>'
                });
                $("#tblChemicalsUsed tbody").find(".solutionRow").remove();
                $('#tblChemicalsUsed tr#inputChemicalsRow').after(rowHtml4);
                //$('#ChemicalsPopup').modal('show');
            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }
    function BindSolutionPreparationData(nameOfSolution) {
        debugger
        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();
        var obj = {
            ParameterMasterId: ParameterMasterId,
            SampleCollectionId: SampleCollectionId,
            ParameterGroupId: ParameterGroupId
        };
        $.ajax({
            url: "/tester/GetSolutionPreparationData",
            type: 'GET',
            data: obj,
            async: false,
            dataType: 'json',
            success: function (data) {
                debugger
                var rowHtml = '';
                var rowHtml2 = '';
                $.each(data, function (index, value) {
                    var button = document.createElement('input');
                    button.type = 'button';
                    button.id = 'btnViewChemical';
                    button.value = 'View Chemicals';
                    button.className = 'btn btn-primary btn-sm';
                    button.onclick = "ViewChemicalData('" + nameOfSolution + "')";

                    var dtprep = new Date(parseInt(value.DateOfPreparation.substr(6)));
                    var prepDate = [pad(dtprep.getDate()), pad(dtprep.getMonth() + 1), dtprep.getFullYear()].join('/');
                    rowHtml += '<tr class="solutionRow"><td>' + prepDate + '</td><td>' + value.NameOfSolution + '</td><td>' + value.QtyOfSolutionPrepared + '</td><td id="column1"><input type="button" id="chemicalpopupview"  value="View" class="btn btn-sm btn-success Sample Details" onclick="ViewChemicalData(\'' + value.NameOfSolution + '\')" /></td></tr>'

                });
                $('#tblSolPreparation tr#inputRow').before(rowHtml);

            },
            error: function (response) {
                console.log("error");
                console.log(response);
            }
        });
    }
    function updateCalculatedValue(TestingHours) {
        debugger;
        var sampleCollectionId = $('#SampleCollectionId').val();
        $.ajax({
            type: "POST",
            url: "/Tester/UpdateCalculatedValue",
            data: {
                FormulaList: JSON.stringify(formulaList),
                SampleCollectionId: sampleCollectionId,
                TestingHours: TestingHours
            },
            dataType: "json",
            cache: false,
            async: false,
            success: function (response) {
                //alert(response);
            },

            error: function (xhr) {
                console.log('error');
            }
        });
    }
    function ValidateDate() {
        debugger
        var analysisStartAt = $('#txtAnalysisStartDatetime').val();

        var analysisEndAt = $('#txtAnalysisEndDatetime').val();
        if (analysisStartAt == '' && analysisEndAt == '') {
            alert('Please Enter AnalysisStartDate And AnalysisEndDate');
            $('#btnCalculate').attr('disabled', false);
            $("#btnCalculate").attr('value', 'Calculate');
            return false
        }
        if (Date.parse($('#SampleRecievedDateHidden').val()) > Date.parse($('#txtAnalysisStartDatetime').val())) {
            alert('Analysis Start Date Should be greater than Sample Recieved Date');
            $('#txtAnalysisStartDatetime').val('');
            return false;
        }
        else if (Date.parse($('#txtAnalysisEndDatetime').val()) < Date.parse($('#txtAnalysisStartDatetime').val())) {
            alert('Analysis End Date Should be greater than Analysis Start Date');
            $('#txtAnalysisEndDatetime').val('');
            return false;
        }
        else if (Date.parse($('#SampleRecievedDateHidden').val()) > Date.parse($('#txtAnalysisEndDatetime').val())) {
            alert('Analysis End Date Should be greater than Sample Recieved Date');
            $('#txtAnalysisEndDatetime').val('');
            return false;
        }
        return true;
    }
    function updateFinalResult(FinalResult, isSubmitted, TotalDuration, analysisStartAt, QualityControl, analysisEndAt, TestingHours) {
        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();
        var SampleNameOriginal = $('#SampleNameOriginal').val();

        var obj = {
            ParameterMasterId: ParameterMasterId,
            SampleCollectionId: SampleCollectionId,
            ParameterGroupId: ParameterGroupId,
            SampleNameOriginal: SampleNameOriginal,
            FinalResult: FinalResult,
            TotalDuration: TotalDuration,
            QualityControl: QualityControl,
            analysisStartAt: analysisStartAt,
            analysisEndAt: analysisEndAt,
            TestingHours: TestingHours
        };
        var parameter = JSON.stringify(obj);
        $.ajax({
            type: "POST",
            url: "/Tester/UpdateFinalResult",
            dataType: 'JSON',
            cache: false,
            data: { "model": parameter, "isSubmitted": isSubmitted },
            success: function (response) {
                var x = response;
                alert("Result Calculated");
                $('#btnCalculate').attr('disabled', false);
                $("#btnCalculate").attr('value', 'Calculate');
            },
            error: function (xhr) {
                console.log('error');
            }
        });
    }
    $("#ShowPopup").click(function () {
        debugger
        document.getElementById("dtPre").value = $('#txtdtPreparation').val();
        document.getElementById("soluName").value = $('#txtNameOfSolution').val();
        document.getElementById("qtyOfSolu").value = ($('#txtQtyOfSolutionPrepared').val());
        document.getElementById("ParameterMasterId").value = $('#ParameterMasterId').val();
        document.getElementById("SampleCollectionId").value = $('#SampleCollectionId').val();
        document.getElementById("ParameterGroupId").value = $('#ParameterGroupId').val();
        //alert(document.getElementById("dtPre").value);

        if ($('#dtPre').val().trim() == "" || $('#soluName').val().trim() == "" || $('#qtyOfSolu').val().trim() == "") {
            alert("All Fields are required!");
            return;
        }
        //$("#tblChemicalUsed tbody").find(".solutionRow").remove();
        $('#ChemicalsPopup').modal('show');
    });

    function CloseChemicaldata() {
        debugger;
        $('#ChemicalsPopupView').modal('hide');

    }
    $("#ShowChemicalPopup").click(function () {
        debugger
        var dtPreparation = $('#dtPre').val();
        var nameOfSolution = $('#soluName').val();

        var nameofChemicalUsed = $('#txtNameofChemicalUse').val();
        var qualityofChemicalUsed = $('#txtQualityofChemicalUse').val();

        var qtyOfSolutionPrepared = ($('#qtyOfSolu').val());

        var ParameterMasterId = $('#ParameterMasterId').val();
        var SampleCollectionId = $('#SampleCollectionId').val();
        var ParameterGroupId = $('#ParameterGroupId').val();

        if (dtPreparation.trim() == "" || nameOfSolution.trim() == "" || nameofChemicalUsed.trim() == "" || qualityofChemicalUsed.trim() == "" || qtyOfSolutionPrepared.trim() == "") {
            alert("All Fields are required!");
            return;
        }
        var solutionData = {
            "ParameterMasterId": ParameterMasterId,
            "SampleCollectionId": SampleCollectionId,
            "ParameterGroupId": ParameterGroupId,
            "DateOfPreparation": dtPreparation,
            "nameOfSolution": nameOfSolution,
            "nameofChemicalUsed": nameofChemicalUsed,
            "qualityofChemicalUsed": qualityofChemicalUsed,
            "qtyOfSolutionPrepared": qtyOfSolutionPrepared,
            "nameOfSolution": nameOfSolution
        };
        $.ajax({
            type: "POST",
            url: "/Tester/SaveSolutionPreparationData",
            dataType: 'text',
            cache: false,
            data: "model=" + JSON.stringify(solutionData),
            success: function (response) {
                $("#tblSolPreparation tbody").find(".solutionRow").remove();
                //$("#tblChemicalsUsed tbody").find("#inputChemicalsRow").remove();

                BindSolutionPreparationData();
                BindChemicalUsedData(nameOfSolution);

                $('#txtdtPreparation').val('');

                $('#txtNameOfSolution').val('');

                $('#txtNameofChemicalUse').val('');

                $('#txtQualityofChemicalUse').val('');

                $('#txtQtyOfSolutionPrepared').val('');
            },
            error: function (xhr) {
                console.log('error');
            }
        });
    });
</script>


