@model LIMS_DEMO.Areas.WorkOrderCustomer.Models.WorkOrderCustomerModel
@using LIMS_DEMO.Core.DropDowns;

@{
    ViewBag.Title = "_AddCustomerDetails";
}

 <br/> 
    <div>
        @using (Ajax.BeginForm("_AddCustomerDetails", "WorkOrderCustomer", FormMethod.Post, new AjaxOptions() { HttpMethod = "Post", OnSuccess = "WorkOrderCustomerSuccess" }, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.WorkOrderId)


            <div class="form-group row">
                <label class="col-sm-12 col-md-3 col-form-label" for="inputEmail1">Mode Of Communication: <span class="required" style="color:red">*</span></label>
                @Html.HiddenFor(model => model.ModeOfCommunicationId)
                <div class="col-sm-9">
                    @foreach (var item in (List<CommunicationEntity>)ViewBag.CommunicationMode)
                    {
                        if (Model.ModeOfCommunicationId == item.ModeOfCommunicationId)
                        {
                            <label for="square-radio-1" class="radio-btn-pd"> @Html.RadioButtonFor(model => item.ModeOfCommunicationId, item.ModeOfCommunicationId, new { @checked = "checked", @class = "modeofcomm" }) @item.CommunicationMode </label>
                        }
                        else
                        {
                            <label for="square-radio-2" class="radio-btn-pd"> @Html.RadioButtonFor(model => item.ModeOfCommunicationId, item.ModeOfCommunicationId, new { @class = "modeofcomm" }) @item.CommunicationMode </label>
                        }
                    }
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">Customer Name: <span class="required" style="color:red">*</span></label>
                <div class="col-sm-4">
                    @Html.DropDownListFor(model => model.CustomerMasterId, new SelectList(ViewBag.Customers, "CustomerMasterId", "RegistrationName"), "Please Select", new { @class = "form-control btn-sm dropdown-toggle border" })
                    @Html.ValidationMessageFor(model => model.CustomerMasterId, "", new { @class = "text-danger" })
                </div>
                <label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">Duration(in months):  <span class="required" style="color:red">*</span></label>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.Duration, new { @class = "form-control", @autocomplete = "false" })
                    @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger col-md-10" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">Work Order Received On:  <span class="required" style="color:red">*</span></label>
                <div class="col-sm-4">
                    <input type="date" id="WorkOrderReceivedDate" class="form-control" name="WorkOrderReceivedDate" placeholder="dd/MM/yyyy" onblur="ValidateDate100();" />
                
                    @Html.ValidationMessageFor(model => model.WorkOrderReceivedDate, "", new { @class = "text-danger col-md-10" })

                </div>
                <label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">WorkOrder End Date:  <span class="required" style="color:red">*</span></label>
                <div class="col-sm-4">

                    @Html.TextBoxFor(model => model.WOEDate, new { @class = "form-control", @placeholder = "dd/MM/yyyy", @readonly = "readonly" })
                    @Html.HiddenFor(model => model.WorkOrderEndDate)
                  

                    @Html.ValidationMessageFor(model => model.WorkOrderEndDate, "", new { @class = "text-danger col-md-10" })
                </div>
            </div>

            <div class="form-group row">
                <label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">Expected Sample Collection Date: <span class="required" style="color:red">*</span></label>
                <div class="col-sm-4">

                    <input type="date" class="form-control" id="SampleCollectionDate" name="SampleCollectionDate" placeholder="dd/MM/yyyy" onblur="ValidateDate();" required />
                    @*@Html.TextBoxFor(model => model.SampleCollectionDate, new { @class = "form-control", @autocomplete = "false", data_format = "MM/dd/yyyy", @placeholder = "MM/dd/yyyy" })*@
                    @*<span class="input-group-addon add-on">
                    <i style="font-style:normal;" data-time-icon="entypo-clock" data-date-icon="entypo-calendar"></i>
                     </span>*@
                    @Html.ValidationMessageFor(model => model.SampleCollectionDate, "", new { @class = "text-danger col-md-10" })

                </div>
                <label class="col-sm-12 col-md-2 col-form-label">WorkOrder No: <span class="required" style="color:red">*</span></label>
                <div class="col-sm-4">
                    @Html.TextBoxFor(model => model.WorkOrderNo, new { @class = "form-control", @autocomplete = "false" })
                    @Html.ValidationMessageFor(model => model.WorkOrderNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <label class="col-sm-12 col-md-3 col-form-label">Upload Work Order:</label>
                <div class="col-sm-3">
                    <input id="fileInput" name="file" type="file" style="margin-left:5px;" />
                </div>
            </div>
            <div class="form-group row">
                <a class="btn btn-danger btn-sm" href="/WorkOrderCustomer/WorkOrderCustomer/Index" style="margin-left: 22px;">Back</a>
                <div class="col-sm-12 col-md-12" style="margin-top:-27px">
                    <button type="submit" class="btn btn-info btn-sm" style="float:right">Save</button>
                </div>
            </div>

        }
    </div>
<script>

    $(function () {
        $('.modeofcomm').click(function () {
            $('#ModeOfCommunicationId').val($(this).val());
        });
        if ($('#ModeOfCommunicationId').val() == '0') {
            $('.modeofcomm')[0].checked = "checked";
            $('#ModeOfCommunicationId').val($('.modeofcomm')[0].value);
        }
    });

    function ValidateDate100() {
     
        if ($('#WorkOrderReceivedDate').val() != "" && $('#Duration').val() != "") {
            var recieveDate = new Date($('#WorkOrderReceivedDate').val());
            var date = add_months(recieveDate, parseInt($('#Duration').val()))
            var x = ConvertDateFormat(date.toString());
            //var y = ConvertDateFormatMonthWise(date.toString());
            $("#WorkOrderEndDate").val(x);
            $("#WOEDate").val(x);
        }
        return true
    }

    function add_months(dt, n) {
        return new Date(dt.setMonth(dt.getMonth() + n));
    }

    function ConvertDateFormat(dt) {
        debugger
        var today = new Date(dt);
        var dd = today.getDate();

        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }

        if (mm < 10) {
            mm = '0' + mm;
        }
        var date = dd + '/' + mm + '/' + yyyy;
        return date;
    }

    function ConvertDateFormatMonthWise(dt) {
        debugger
        var today = new Date(dt);
        var dd = today.getDate();

        var mm = today.getMonth() + 1;
        var yyyy = today.getFullYear();
        if (dd < 10) {
            dd = '0' + dd;
        }

        if (mm < 10) {
            mm = '0' + mm;
        }
        var date = mm + '/' + dd + '/' + yyyy;
        return date;
    }

</script>

<script>

 function WorkOrderCustomerSuccess(result) {

     if (result.status == "success"){
            debugger
            alert('Work order generated successfully.');
            $('.nav-tabs > .active').next('li').find('a').trigger('click');
            $('#second').load('/WorkOrderCustomer/WorkOrderCustomer/_AddSampleDetails?WorkOrderId=' + result.WorkOrderId);
        }
     else {
            if (result.status == "Fail") {
                alert('Expected Sample Collection Date should be Between WorkOrderReceivedDate & WorkOrderEndDate !!!');
            }
            else {
               alert('Please insert values in all Mandatory fields !!!');
            }
         }
    }
</script>

