@model LIMS_DEMO.Areas.Inventory.Models.PurchaseModel

<div class="page-header">
    <div class="row">
        <div class="col-md-6 col-sm-12">
            <div class="title">
                <h4>Inventory</h4>
            </div>
            <nav aria-label="breadcrumb" role="navigation">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="index.html">Purchase</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Purchase Request Form</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<!-- Default Basic Forms Start -->
<div class="pd-20 card-box mb-30">
    <div class="clearfix">
        <div class="pull-left">
            <h4 class="text-blue h4">Purchase Request Form</h4>
        </div>

    </div>
    @using (Ajax.BeginForm("_PurchaseRequestFormList1", "Purchase", new AjaxOptions() { HttpMethod = "Post", OnSuccess = "OnSuccessAdd" }, new { id = "frmAddPurchase", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @*@Html.HiddenFor(model => model.CatagoryMasterId)*@
        @Html.HiddenFor(model => model.PurchaseRequestID)
        @*@Html.HiddenFor(model => model.GSTPercent)
            @Html.HiddenFor(model => model.DiscPercent)*@
        @*@Html.HiddenFor(model => model.PurchaseRequestID)*@
        @*@Html.HiddenFor(model => model.Count)*@
        @Html.HiddenFor(model => model.SrNo)
        @*<input id="GSTPercent" type="hidden" value="@ViewBag.GSTRate" />*@

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

<fieldset>
    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                <label class="col-form-label col-md-6 col-sm-2 label-align mr-btm-15">Inventory Type  <span style="color:red">*</span></label>
                <div class="col-md-12 mr-btm-15">
                    @Html.DropDownListFor(model => model.InventoryTypeID, new SelectList(ViewBag.InventoryName, "InventoryTypeID", "InventoryType"), "Please Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.InventoryTypeID, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.InventoryName)
                </div>
            </div>
            <div class="col-sm-6">
                <label class="col-form-label col-md-2 col-sm-2 label-align mr-btm-15">Item  <span style="color:red">*</span></label>
                <div class="col-md-12 mr-btm-15">
                    @Html.DropDownListFor(model => model.ItemMasterId, new SelectList(ViewBag.Item, "ItemMasterId", "Item"), "Please Select", new { @class = "form-control ", @href = "" })
                    @Html.ValidationMessageFor(model => model.ItemMasterId, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Item)
                    @Html.HiddenFor(model => model.CatagoryName)
                </div>
            </div>
        </div>
    </div>


    <div class="clearfix"></div>
    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                <label class="col-form-label col-md-6 label-align mr-btm-15">Brand  <span style="color:red">*</span></label>
                <div class="col-md-12  mr-btm-15 ">
                    @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                <label class="col-form-label col-md-6 col-sm-2 label-align mr-btm-15">Grade  <span style="color:red">*</span></label>
                <div class="col-md-12  mr-btm-15 ">
                    @Html.EditorFor(model => model.Grade, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                <label class="col-form-label col-md-6 label-align mr-btm-15">Pack Size / Capacity  <span style="color:red">*</span></label>
                <div class="col-md-12  mr-btm-15 ">
                    @Html.EditorFor(model => model.PackSize, new { htmlAttributes = new { @class = "form-control  " } })
                    @Html.ValidationMessageFor(model => model.PackSize, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                <label class="col-form-label col-md-6 col-sm-2 label-align mr-btm-15">Quantity  <span style="color:red">*</span></label>
                <div class="col-md-12 mr-btm-15 ">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control  " } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.Priority, htmlAttributes: new { @class = "col-form-label col-md-2 col-sm-2 label-align mr-btm-15" })
                <div class="col-md-12 mr-btm-15 ">
                    @Html.EditorFor(model => model.Priority, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                @Html.LabelFor(model => model.Purpose, htmlAttributes: new { @class = "col-form-label col-md-2 col-sm-2 label-align mr-btm-15" })
                <div class="col-md-12 mr-btm-15 ">
                    @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "col-form-label col-md-2 col-sm-2 label-align mr-btm-15" })
                <div class="col-md-12 mr-btm-15 ">
                    @Html.EditorFor(model => model.Specification, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-sm-6">
                @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "col-form-label col-md-2 col-sm-2 label-align mr-btm-15" })
                <div class="col-md-12 mr-btm-15 ">
                    @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="form-group ">
        <label class=" col-lg-2 col-sm-2 mr-btm-15">Upload Ducument</label>
        <div class="col-md-6 mr-btm-15">
            @*@Html.EditorFor(model => model.FileName, new { htmlAttributes = new { @class = "form-control", type = "file",id = "fileInput" } })*@
            <input id="fileInput" name="file" type="file" />
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="clearfix"></div>
    <div class="form-group">
        @Html.LabelFor(model => model.COA, htmlAttributes: new { @class = "col-form-label col-md-2 col-sm-2 label-align mr-btm-15" })

        <div class="col-md-6  mr-btm-15 ">
            <label> @Html.RadioButtonFor(model => model.COA, true, new { id = "COA-COA", @checked = "checked" }) COA </label><br />
            <label> @Html.RadioButtonFor(model => model.COA, false, new { id = "COA-COC" }) COC </label>
        </div>

    </div>
</fieldset>
<fieldset>
    <!--<div class="form-group">
        @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "col-form-label col-md-2 col-sm-2 label-align mr-btm-15" })
        <div class="col-md-3  mr-btm-15 ">
            @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control", @onkeyup = "funCalNetAmount(false,false);" } })
            @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2 mr-btm-15" })
        <div class="col-md-3 mr-btm-15">
            @Html.TextBoxFor(model => model.Amount, new { @class = "form-control", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="form-group">
        @Html.LabelFor(model => model.DiscAmount, htmlAttributes: new { @class = "control-label col-md-2 mr-btm-15" })
        <div class="col-sm-1 mr-btm-15">
            @Html.TextBoxFor(model => model.DiscPercent, new { @class = "form-control", onkeyup = "funCalNetAmount(true,false);" })-->
    @*<input type="text" onkeyup="funCalNetAmount(true);" id="DiscPercent" class="form-control" />*@
    <!--</div>
        <div class="col-md-2 mr-btm-15">
            @Html.TextBoxFor(model => model.DiscAmount, new { @class = "form-control", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.DiscAmount, "", new { @class = "text-danger" })
        </div>
        @Html.LabelFor(model => model.AmountAfterDisc, htmlAttributes: new { @class = "control-label col-md-2 mr-btm-15" })
        <div class="col-md-3 mr-btm-15">
        <div class="col-md-3 mr-btm-15">
            @Html.TextBoxFor(model => model.AmountAfterDisc, new { @class = "form-control", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.AmountAfterDisc, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="form-group">

    </div>
    <div class="clearfix"></div>
    <div class="form-group">
        @Html.LabelFor(model => model.GSTAmount, htmlAttributes: new { @class = "control-label col-md-2 mr-btm-15" })
        <div class="col-sm-1 mr-btm-15">
            @Html.TextBoxFor(model => model.GSTPercent, new { @class = "form-control", onkeyup = "funCalNetAmount(false,true);" })-->
    @*<input type="text" onkeyup="funCalNetAmount(true);" id="DiscPercent" class="form-control" />*@
    <!--</div>

        <div class="col-md-2 mr-btm-15">
            @Html.TextBoxFor(model => model.GSTAmount, new { @class = "form-control", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.GSTAmount, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="clearfix"></div>
    <div class="form-group">
        @Html.LabelFor(model => model.NetAmount, htmlAttributes: new { @class = "control-label col-md-2 mr-btm-15" })
        <div class="col-md-3 mr-btm-15">
            @Html.TextBoxFor(model => model.NetAmount, new { @class = "form-control", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
        </div>
    </div>-->
    <div class="clearfix"></div>
    @if (Model.PurchaseRequestID == 0)
    {
        <div class="form-group">
            
        </div>
    }

    <div class="clearfix"></div>
    <div id="TermsDiv" class="form-group col-md-12" style="border-top-color:blue">

        @*@{ Html.RenderAction("TermsMaster", "Purchase", new { InventoryTypeID = Model.InventoryTypeID });}*@


    </div>
</fieldset>
            <div class="row">
                <div class="form-group col-md-12">
                    <div class="col-md-12 d-flex justify-content-center">
                        @{ string btnText = "Add"; if (Model.SrNo != 0) { btnText = "Update"; }}
                        <input class="btn btn-success btn-sm alignright" type="submit" onclick="SetNameValues();" value="@btnText" />
                    </div>
                </div>
            </div>
      }
    </div>

<script src="~/Scripts/jquery.validate-vsdoc.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
<script>
    $(document).ready(function () {
        $('#TermsDiv').load('/Inventory/Purchase/TermsMaster?InventoryTypeID=' + $('#InventoryTypeID').val() + '&PurchaseRequestID=' + $('#PurchaseRequestID').val());
        debugger
    });
    function SaveRequest() {
        debugger
        var InventoryTypeID = $('#InventoryTypeID option:selected').text();
        var ItemMasterId = $('#InventoryTypeID option:selected').text();
        var Brand = $('#Brand').val();
        var Grade = $('#Grade').val();
        var PackSize = $('#PackSize').val();
        var Quantity = $('#Quantity').val();
        var Priority = $('#Priority').val();
        var Purpose = $('#Purpose').val();
        var Specification = $('#Specification').val();
        var Remark = $('#Remark').val();
        var COA = $('#COA').val();


        var dataPost = { InventoryTypeID: InventoryTypeID};
        var InventoryTypeID = $('#InventoryTypeID').val();
        $('#ItemMasterId').html('');
        $('#ItemMasterId').append('<option value="">---Select---</option>');
        $.ajax({
            url: '/Purchase/ItemMaster',
            type: 'Get',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: 'json',
            data: dataPost,
            success: function (result) {
                $.each(result.result, function (i, item) {
                    debugger
                    $('#ItemMasterId').append('<option value="' + item.ItemMasterId + '" href="' + item.CategoryName + '">' + item.Item + '</option>');

                })
            },
            error: function (data) {
            }
        });
    }
    function SetNameValues() {
        debugger
        $('#InventoryName').val($('#InventoryTypeID option:selected').text());
        $('#Item').val($('#ItemMasterId option:selected').text());
        $('#SupplierName').val($('#PurchaseSupplierID option:selected').text());
        var a = $('#CatagoryName').val();
    }
    $(function () {
        $("#frmAddPurchase").removeData("validator");
        $("#frmAddPurchase").removeData("unobtrusiveValidation");
        //$.validator.unobtrusive.parse("#frmAddPurchase");
    })

    function OnSuccessAdd(result) {
        debugger
        //$('#Count').val((parseInt($('#Count').val()) + 1))
        $('#divList').load('/Inventory/Purchase/_PurchaseList');
        $('#divAddPurchase').load('/Inventory/Purchase/_PurchaseRequestFormList');

    }
    $('#InventoryTypeID').change(function () {
        debugger
        if ($('#InventoryTypeID').val() == '') {
            $('#ItemMasterId').html('');
            $('#ItemMasterId').append('<option value="">---Select---</option>');

        }
        else {

            ItemMaster();
            TermsMaster();
        }
    });

    function ItemMaster() {
        debugger
        var InventoryTypeID = $('#InventoryTypeID').val();
        $('#ItemMasterId').html('');
        $('#ItemMasterId').append('<option value="">---Select---</option>');
        $.ajax({
            url: '/Purchase/ItemMaster',
            type: 'Get',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: 'json',
            data: { InventoryTypeID: InventoryTypeID },
            success: function (result) {
                $.each(result.result, function (i, item) {
                    debugger
                    $('#ItemMasterId').append('<option value="' + item.ItemMasterId + '" href="' + item.CategoryName + '">' + item.Item + '</option>');

                })

            },
            error: function (data) {
            }
        });
    }
    $('#ItemMasterId').change(function () {
        debugger
        var r = $('#ItemMasterId option:selected').attr("href")
        $('#CatagoryName').val(r);
    });

    function TermsMaster() {
        debugger
        $('#TermsDiv').html('');

        $('#TermsDiv').load('/Inventory/Purchase/TermsMaster?InventoryTypeID=' + $('#InventoryTypeID').val());

    }

    $(function () {

        $('#TickIfId').click(function () {
            //If the checkbox is checked.
            if ($(this).is(':checked')) {
                $("#TickIf").val(true);
            } else {
                //If it is not checked, disable .
                $("#TickIf").val(false);
                $(this).attr("value", "false");
            }
        });

    });

    function funCalNetAmount(IsDisc, IsGST) {
        var Rate = $('#Rate').val() == '' ? parseFloat(0.0).toFixed(2) : $('#Rate').val();
        var Qty = $('#Quantity').val() == '' ? 0 : $('#Quantity').val();
        debugger

        var Amount = Number(Rate) * Number(Qty);
        $('#Amount').val((Amount).toFixed(1));

        $('#NetAmount').val((Amount).toFixed(1))
        $('#AmountAfterDisc').val((Amount).toFixed(1))

        if (IsDisc) {
            var DiscPer = $('#DiscPercent').val() == '' ? 0 : $('#DiscPercent').val();
            var DiscAmount = (Number(Amount) * Number(DiscPer) / 100);
            $('#DiscAmount').val((DiscAmount).toFixed(1));
            var AmountAfterDisc = Number(Amount) - Number(DiscAmount);
            $('#AmountAfterDisc').val((AmountAfterDisc).toFixed(1));
            $('#NetAmount').val((AmountAfterDisc).toFixed(1));



        }

        if (IsGST) {
            var GSTPercent = $('#GSTPercent').val() == '' ? 0 : $('#GSTPercent').val();


            var GSTAmount = (Number(AmountAfterDisc) * Number(GSTPercent) / 100);
            $('#GSTAmount').val((GSTAmount).toFixed(1));
            var NetAmount = Number(GSTAmount) + Number(AmountAfterDisc);
            $('#NetAmount').val((NetAmount).toFixed(1));
        }

        if (IsDisc, IsGST) {
            var DiscPer = $('#DiscPercent').val() == '' ? 0 : $('#DiscPercent').val();
            var DiscAmount = (Number(Amount) * Number(DiscPer) / 100);
            $('#DiscAmount').val((DiscAmount).toFixed(1));
            var AmountAfterDisc = Number(Amount) - Number(DiscAmount);
            $('#AmountAfterDisc').val((AmountAfterDisc).toFixed(1));
            $('#NetAmount').val((AmountAfterDisc).toFixed(1));
            var GSTPercent = $('#GSTPercent').val() == '' ? 0 : $('#GSTPercent').val();


            var GSTAmount = (Number(AmountAfterDisc) * Number(GSTPercent) / 100);
            $('#GSTAmount').val((GSTAmount).toFixed(1));
            var NetAmount = Number(GSTAmount) + Number(AmountAfterDisc);
            $('#NetAmount').val((NetAmount).toFixed(1));
        }

    }
</script>

