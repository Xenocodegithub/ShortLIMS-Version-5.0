@model LIMS_DEMO.Areas.Collection.Models.CollectionListModel
@using LIMS_DEMO.Core.DropDowns;
@using (Ajax.BeginForm("AddSampleArrival", "Sample", new AjaxOptions() { HttpMethod = "Post", OnSuccess = "SampleCollectionSuccess" }))
{
    @*@Html.DisplayFor(model => model.Collection.SampleCollectionId)ViewBag.SampleLocation
        @Html.DisplayFor(model => model.Collection.EnquirySampleID)*@
    @Html.HiddenFor(model => model.Collection.EnquirySampleID, new { @class = "form-control", @autocomplete = "false" })
    @Html.HiddenFor(model => model.Collection.SampleCollectionId, new { @class = "form-control", @autocomplete = "false" })
    @Html.HiddenFor(model => model.Collection.SampleLocation, new { @class = "form-control", @autocomplete = "false" })
    @Html.HiddenFor(model => model.Collection.WorkOrderID, new { @class = "form-control", @autocomplete = "false" })
    <div class="form-group row">
        <label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">Sample Media: <span class="required" style="color:red">*</span></label>
        <div class="col-sm-4">
            @Html.DropDownListFor(model => model.Collection.SampleDeviceId, new MultiSelectList(ViewBag.SampleDeviceList, "SampleDeviceId", "SampleDevice"), new { multiple = "multiple", @class = "form-control ", @id = "example-getting-started", @style = "font-size:13px;" })
            @Html.ValidationMessageFor(model => model.Collection.SampleDeviceId, "", new { @class = "text-danger" })
        </div>
        <label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">Sample Procedure: <span class="required" style="color:red">*</span></label>
        <div class="col-sm-4">
            @Html.DropDownListFor(model => model.Collection.ProcedureId, new MultiSelectList(ViewBag.ProcedureList, "ProcedureId", "ProcedureName"), new { multiple = "multiple", @class = "form-control", @id = "example-getting-started1", @style = "font-size:13px;" })
            @Html.ValidationMessageFor(model => model.Collection.ProcedureId, "", new { @class = "text-danger col-md-10" })
        </div>
    </div>

    <div class="form-group row">
        @*<label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">Quantity: <span class="required" style="color:red">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(model => model.Collection.Quantity, new { @class = "form-control", @autocomplete = "false" })
                @Html.ValidationMessageFor(model => model.Collection.Quantity, "", new { @class = "text-danger col-md-10" })
            </div>*@
        <label class="col-sm-12 col-md-2 col-form-label" for="inputEmail1">Environmental Condition: <span class="required" style="color:red">*</span></label>
        <div class="col-sm-4">
            @Html.DropDownListFor(model => model.Collection.EnvCondtId, new SelectList(ViewBag.EnvCondtsList, "EnvCondtId", "EnvCondts"), "Please Select", new { @class = "form-control btn-sm dropdown-toggle border" })
            @Html.ValidationMessageFor(model => model.Collection.EnvCondtId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4 form-group">
            <label>
                Sub contracted parameters:
            </label>
            <div class="col-sm-12">
                @Html.TextBoxFor(model => model.Collection.SubContractedParameters, new { @class = "form-control", @autocomplete = "false" })
                @Html.ValidationMessageFor(model => model.Collection.SubContractedParameters, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-sm-4 form-group">
            <label>
                Whether statutory limits to be inserted in report?:
                <span class="required" style="color:red">*</span>
            </label><br />
            <label> @Html.RadioButtonFor(model => model.Collection.StatutoryLimits, true, new { id = "ISStatutoryLimits-true", @checked = "checked" })Yes </label>
            <label> @Html.RadioButtonFor(model => model.Collection.StatutoryLimits, false, new { id = "ISStatutoryLimits-false" }) No</label>
        </div>
        <div class="col-sm-4 form-group">
            <label>
                Order Acknowledgement Remarks: <span class="required" style="color:red">*</span>
            </label>
            <div class="col-sm-12">
                @Html.TextBoxFor(model => model.Collection.AckRemarks, new { @class = "form-control", @autocomplete = "false" })
                @Html.ValidationMessageFor(model => model.Collection.AckRemarks, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-sm-4 form-group">
            <label> Condition: <span class="required" style="color:red">*</span></label>&nbsp;&nbsp;
            <label> @Html.RadioButtonFor(model => model.Collection.IsSampleIntact, true, new { id = "IsSampleIntact-true", @checked = "checked" }) Intact </label> &nbsp;&nbsp;
            <label> @Html.RadioButtonFor(model => model.Collection.IsSampleIntact, false, new { id = "IsSampleIntact-false" }) No Intact</label>
        </div>

        <div class="col-sm-4 form-group">
            <label>
                Samples to be:
            </label>
            <span class="required" style="color:red">*</span>
            @*@if (Model.IsReturnedOrIsRetained == null || Model.IsReturnedOrIsRetained == "")*@

            <select id="IsReturnedOrIsRetained" name="IsReturnedOrIsRetained" class="form-control" required>
                <option value="Retained">Retained</option>
                <option value="Returned">Returned</option>
            </select>
        </div>
        <span>Remarks: </span>
        <div>
            @Html.TextAreaFor(model => model.Collection.ReturnedRemarks, new { htmlAttributes = new { @class = "form-control", Type = "Text-", @cols = 40, @rows = 2, @style = "width:100%;" } })
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-12 col-md-2 col-form-label">Quantity:<span class="required" style="color:red">*</span></label>
    </div>
    <div class="col-sm-12" style="height: 200px; overflow: auto">
        <!-- Simple Datatable start -->
        <table id="dtHorizontalExample" class="table table-borderd stripe hover nowrap">
            <thead>
                <tr class="thead-dark">
                    <th class="width-5">
                        <input type="checkbox" id="chkAllParameter" />
                    </th>
                    <th>
                        SrNo.
                    </th>
                    <th>
                        Sample Quantity
                    </th>
                    <th>
                        No.
                    </th>
                    <th>
                        Preservation
                    </th>
                    <th>
                        Choose  Preservation
                    </th>
                </tr>
            </thead>
            <tbody style="text-align:center; " id="tblQuantityBody">
                @for (int i = 0; i < Model.CollectionList.Count; i++)
                {
                    <tr id="@Model.CollectionList[i].SampleQtyId" rowCount="@i" SampleQty="@Model.CollectionList[i].SampleQtyId">
                        <td>
                            @Html.CheckBoxFor(model => model.CollectionList[i].IsSelected)
                            @Html.HiddenFor(model => model.CollectionList[i].QtyPreservativeId)
                            @Html.ValidationMessageFor(model => model.CollectionList[i].IsSelected)
                        </td>
                        <td>
                            @Html.HiddenFor(item => Model.CollectionList[i].SampleCollectionId)
                            @Html.DisplayFor(item => Model.CollectionList[i].SerialNo)
                        </td>
                        <td>
                            @Html.HiddenFor(item => Model.CollectionList[i].SampleQtyId)
                            @Html.DisplayFor(item => Model.CollectionList[i].SampleQty)
                        </td>
                        <td>
                            @Html.TextBoxFor(item => Model.CollectionList[i].No)
                        </td>
                        <td>
                            @Html.DisplayFor(item => Model.CollectionList[i].Preservation)
                        </td>
                        <td>
                            <label> @Html.RadioButtonFor(item => Model.CollectionList[i].ISGivenPreservative, true, new { id = "ISGivenPreservative-true", @checked = "checked" })Yes </label>
                            <label> @Html.RadioButtonFor(item => Model.CollectionList[i].ISGivenPreservative, false, new { id = "ISGivenPreservative-false" }) No</label>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Close</button>
    <button type="submit" class="btn btn-outline-primary" aria-label="" style="float:right;">Save</button>
}
<script>
    $(document).ready(function () {
        debugger;
        $("#Collection_EnquirySampleID").val(@ViewBag.EnquirySampleID)
        $("#Collection_SampleCollectionId").val(@ViewBag.SampleCollectionId)
        $("#Collection_SampleLocation").val('@ViewBag.SampleLocation')
          $("#Collection_WorkOrderID").val(@ViewBag.WorkOrderId)
    });
    function SampleCollectionSuccess(e) {
        debugger;
        alert(e.message);
        //$('#modelclose').hide();
        $('#btnsubmit').prop('disabled', false);
            $('#btnsubmit').html('Please Wait..')

        $('.bd-example-modal-lg').dialog('close');
    }
    //else {
    //        alert(result.message);
    //        $('#btnsubmit').prop('disabled', false);
    //        $('#btnsubmit').html('Submit')
    //        location.href = '/Enquiry/Sample/AddSampleArrival';
    //}

    $('#chkAllParameter').change(function () {
        $('#tblQuantity tbody input[type=checkbox]').prop('checked', $(this).prop('checked'));
    })

    var model = @Html.Raw(Json.Encode(Model.ProcedureList));
        if (model != null) {
            for (var i = 0; i < model.length; i++) {
                $("#Collection_ProcedureId").find("option[value=" + model[i].ProcedureId2 + "]").prop("selected", "selected");
                //$("#Collection_SampleDeviceId").find("option[value=" + model[i].SampleDeviceId2 + "]").css("background-color", "blue");
            }
        }

        if ($('#ListResult').val() != null && $('#ListResult').val()!="") {
            var data = JSON.parse($('#ListResult').val());
            console.log(JSON.parse($('#ListResult').val()))
            $('#tblQuantityBody tr').each(function(){
                id = $(this).attr('SampleQty');

                rowCount = $(this).attr('rowcount')
                for (var i = 0; i < data.length; i++) {
                    if (id == data[i].SampleQtyId) {
                        $('#CollectionList_' + rowCount + '__IsSelected').prop('checked', true);
                        $('#CollectionList_' + rowCount + '__No').val(data[i].No);
                        debugger
                        if (data[i].ISGivenPreservative == false) {

                            $('input:radio[name="CollectionList[' + rowCount + '].ISGivenPreservative"][value="True"]').prop('checked', false);
                        }
                        else {
                            $('input:radio[name="CollectionList[' + rowCount + '].ISGivenPreservative"][value="True"]').prop('checked', true);
                        }
                    }
                }
            })
        }

</script>

