@model LIMS_DEMO.Areas.Inventory.Models.InventoryBasicDetailModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="mobile-menu-overlay"></div>
<div class="main-container">
    <div class="pd-ltr-20 xs-pd-20-10">
        <div class="min-height-200px">
            <div class="page-header">
                <div class="row">
                    <div class="col-md-12 col-sm-12">
                        <div class="title">
                            <h4>Inventory</h4>
                        </div>
                        <nav aria-label="breadcrumb" role="navigation">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="">Item</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Register Item</li>
                            </ol>
                        </nav>
                    </div>
                </div>
            </div>
            @Html.Hidden("ItemIdHidden", (object)ViewBag.ItemIdViewBag)
            @Html.Hidden("TypeIdHidden", (object)ViewBag.InventoryTypeMasterIDViewBag)
            @Html.Hidden("RequestHidden", (object)ViewBag.InventoryRequestViewBag)
            @Html.Hidden("PurchaseRequestID", (object)ViewBag.PurchaseRequestId)
            @Html.Hidden("InventoryBasicDetailsID", (object)ViewBag.InventoryBasicDetailsID)
            @Html.Hidden("BasicDetailsID", (object)ViewBag.BasicDetailsIdViewBag)

            <div class="pd-20 card-box mb-30">
                <div class="clearfix">
                    <div class="pull-left">
                        <h4 class="text-blue h4">Register Item</h4>
                    </div>
                </div>
                <div class="tab">
                    <ul class="nav nav-tabs" role="tablist" style="background-color:#c0c0c0eb;color:black;">
                        <li class="nav-item">
                            <a class="nav-link active text-blue" data-toggle="tab" href="#tab_1" role="tab" aria-expanded="false" id="tabHead_BasicDetails" style="color:black">Basic Details</a>
                        </li>
                        <li class="nav-item" id="tabLi2">
                            <a class="nav-link text-blue" data-toggle="tab" href="#tab_2" role="tab" aria-selected="true" id="tabHead_CommercialDetails" style="color:black">Commercial Details</a>
                        </li>
                        <li class="nav-item" id="tabLi3">
                            <a class="nav-link text-blue" data-toggle="tab" href="#tab_3" role="tab" aria-selected="false" id="tabHead_Maintainance" style="color:black">Maintainance</a>
                        </li>
                        <li class="nav-item" id="tabLi4">
                            <a class="nav-link text-blue" data-toggle="tab" href="#tab_4" role="tab" aria-selected="false" id="tabHead_Calibration" style="color:black">Calibration </a>
                        </li>
                    </ul>
                    <div class="tab-content" style="margin-top:25px">
                        <div class="tab-pane fade show active" id="tab_1" role="tabpanel">
                            @Html.Partial("_BasicDetails", Model)
                        </div>
                        <div class="tab-pane fade" id="tab_2" role="tabpanel">
                            <div class="pd-20">
                                @Html.Partial("_CommercialDetails")
                            </div>
                        </div>
                        <div class="tab-pane fade" id="tab_3" role="tabpanel">
                            <div class="pd-20">
                                @Html.Partial("_MaintainanceDetails")
                            </div>
                        </div>
                        <div class="tab-pane fade" id="tab_4" role="tabpanel">
                            <div class="pd-20">
                                @Html.Partial("_CalibrationDetails")
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
@* @section Scripts {*@
@Scripts.Render("~/bundles/InventoryCommercialDetails")
@*@Scripts.Render("~/bundles/InventoryBasicDetail1")*@
@Scripts.Render("~/bundles/MaintainanceDetails")
@Scripts.Render("~/bundles/CalibrationDetails")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/unobtrusive")
<script type="text/javascript">

    //function InventoryBasicDetailsSuccess(result) {
    //    if (result.ID != "0") {
    //        location.href = '/Inventory/Index?ID=' + result.ID;
    //    } else {
    //        alert('Error!!!');
    //    }
    //}
    $(document).ready(function () {

        InventoryCommercialDetails.initialize();
        // InventoryBasicDetail1.initialize();
        MaintainanceDetails.initialize();
        CalibrationDetails.initialize();

        debugger
        if ($("#TypeIdHidden").val() == "1") {
            debugger;
            $("#tabLi3").css("display", "none");
            $("#tabLi4").css("display", "none");
            // $("#getURL").attr("href", baseUrl + "/Inventory/Inventory/ConsumableList");
        }
        else {
            //location.href = '/Inventory/Inventory/NonConsumableList';
        }

        if ($('#ItemIdHidden').val() != null) {
            debugger;
            // alert($('#ItemIdHidden').val());
            $('#ItemID').val($('#ItemIdHidden').val()).change()
        }
        if ($('#RequestHidden').val() != null && $('#RequestHidden').val() != "") {
            //alert('asd')
            var data = JSON.parse($('#RequestHidden').val());
            $('#PurchaseOrderNumber').val(data.PurchaseOrderNo);
            $('#QuantityType').val(data.QuantityType);
            $('#Grade').val(data.Grade);
            $('#PackSize').val(data.PackSize);
            $('#Brand').val(data.Brand);
            $('#Manufacturer').val(data.Manufacturer);
            $('#VendorName').val(data.SupplierName);
            $('#AMCVendorName').val(data.SupplierName);
            $('#CalibrationAMCVendorName').val(data.SupplierName);
            $('#PurchaseOrderDate').val(data.EnteredDate);
            $('#PurchaseRequestID').val(data.PurchaseRequestID);
            if (data.PurchaseOrderDate != null) {
                var newdate = data.PurchaseOrderDate;
                var dateString = newdate.toString().substr(6);
                var currentTime = new Date(parseInt(dateString));
                var month = currentTime.getMonth() + 1;
                var day = currentTime.getDate();
                var year = currentTime.getFullYear();
                if (parseInt(month) < 10) {
                    month = "0" + month;
                }
                if (parseInt(day) < 10) {
                    day = "0" + day;
                }
                var ReceivedDate = day + "/" + month + "/" + year;
                $("#PurchaseOrderDate").val(ReceivedDate);
            }
            // new code add
            $('#ItemID').val(data.ItemID);
            $('#TypeID').val(data.TypeID);
            $('#InventoryTypeID').val(data.InventoryTypeID);
            $('#CategoryID').val(data.CategoryID);
            $('#CatagoryMasterID').val(data.CatagoryMasterID);
            $('#UnitID').val(data.UnitID);
        }

        if (parseInt($("#BasicDetailsID").val()) > 0) {
            InventoryCommercialDetails.fatchInventoryCommercialDetails();
        }
        else {
            $("#tabHead_CommercialDetails").removeAttr("data-toggle", "tab");
            $("#tabHead_Maintainance").removeAttr("data-toggle", "tab");
            $("#tabHead_Calibration").removeAttr("data-toggle", "tab");
        }
        // code added by ashwini

        $("#buttonSaveInventoryBasicDetails1").on('click', function () {
            debugger;
            addInventoryBasicDetail();
            return false;
        });
        $("#TypeID").on("change", function () {
            //InventoryBasicDetail.fatchCategoryList();
        });

        $("#CategoryID").on("change", function () {

            //InventoryBasicDetail.fatchItemList();
        });

        $("#ItemID").change(function () {
            if ($("#ItemID").val() > 0) {
                fatchItemDetails();
            }
        });

        $("#QuantityType").on('change', function () {
            if ($("#QuantityType").val() == "Quantity") {
                if ($("#myItemTableBody tr").length > 0) {
                    $("#myItemTableBody").html("");
                    $("#Quantity").val("");
                }
                $("#Quantity").removeAttr("disabled");
            }
            else if ($("#QuantityType").val() == "Batch Quantity") {
                if ($("#myItemTableBody tr").length > 0) {
                    $("#myItemTableBody").html("");
                    $("#Quantity").val("");
                }
                $("#Quantity").removeAttr("disabled");
            }
            else {
                $("#Quantity").attr("disabled", "disabled");
            }
        });
        $("#Quantity").change(function () {
            debugger
            var totalRows = $("#Quantity").val();
            var Pre1 = $("#QuantityLeft").val();
            var _tableLastRowId = $('#myItemTableBody tr:last').attr('id');
            if (typeof _tableLastRowId === "undefined") {
                $('#myItemTableBody').html("");
                _tableLastRowId = 0;
            }
            if (totalRows >= Pre1) {
                if (parseInt(totalRows) > parseInt(_tableLastRowId)) {
                    createRowsInventoryBasicIntemDetails();
                }
                else {

                    var _countRow = parseInt(_tableLastRowId) - parseInt(totalRows);
                    for (var counter = 0; counter <= parseInt(_countRow); ++counter) {
                        $('#myItemTableBody tr:last').remove();
                    }
                }
            }
            else {

                alert('Received Quantity Must be greater than Pre-Received Quantity');
                $("#Quantity").val(Pre1);
            }
            if ($("#QuantityType").val() == "Quantity") {
                $("#TotalQuantity").val($("#Quantity").val());
            }
        });
        $('#myItemTable tbody').on('click', 'a', function () {
            var listItemId = $(this).closest('tr').attr('id');
            var datatableid = $(this).closest('tr').attr('datatableid');
            var operation = $(this).attr('operation');
            var controlId = $(this).attr('id');
            splitedRowID = controlId.split("_");

            if (operation == "Delete Item") {
                if (parseInt(datatableid) > 0) {
                    $(this).closest('tr').attr('isdeleted', '1');
                    $(this).closest('tr').remove();
                    //var siblings = $(this).closest('tr').siblings();
                    //row.remove();
                    //siblings.each(function (index) {
                    //    $(this).children('td').first().text(index + 1);
                    //});
                }
                else {
                    $(this).closest('tr').remove();
                    var inventoryItemsNoOfRows = $('#myItemTableBody tr').length;
                    if (parseInt(inventoryItemsNoOfRows) == 0) {
                        var string = "<tr class='odd'><td valign='top' colspan='6' class='dataTables_empty'>No data available in table</td></tr>";
                        $('#myItemTableBody').html(string);
                    }

                }
                var _totalQuantity = 0;
                var _counter = 0;
                $("#myItemTableBody tr").each(function () {

                    var _rowID = $(this).attr("id");
                    var _Quantity = ($('#Quantity_' + _rowID).val() == "") ? 0 : parseInt($('#Quantity_' + _rowID).val());
                    if ((parseInt(_Quantity) == 0) || (parseInt(_Quantity) == NaN) || _Quantity == "null") {

                    }
                    else {
                        if (!isNaN(_Quantity)) {
                            _totalQuantity = _totalQuantity + _Quantity;
                        }
                    }

                    $(this).children('td').first().text(_counter + 1);
                    _counter = _counter + 1;

                });
                $("#Quantity").val(_counter);
                if (_totalQuantity == 0) {
                    $("#TotalQuantity").val(_counter);
                }
                else {
                    $("#TotalQuantity").val(_totalQuantity);
                }

            }

        });
        $('#myItemTable tbody').on('blur', 'input', function () {

            var listItemId = $(this).closest('tr').attr('id');
            var datatableid = $(this).closest('tr').attr('datatableid');
            var operation = $(this).attr('operation');
            var controlId = $(this).attr('id');
            splitedRowID = controlId.split("_");
            if (splitedRowID[0] == "Quantity") {
                var _totalQuantity = 0;
                $("#myItemTableBody tr").each(function () {

                    var _rowID = $(this).attr("id");
                    var _Quantity = ($('#Quantity_' + _rowID).val() == "") ? 0 : parseInt($('#Quantity_' + _rowID).val());
                    if ((parseInt(_Quantity) == 0) || (parseInt(_Quantity) == NaN)) {

                    }
                    else {
                        _totalQuantity = _totalQuantity + _Quantity;
                    }

                });
                $("#TotalQuantity").val(_totalQuantity);

            }
            //_rowID = splitedRowID[1];
        });
        function addInventoryBasicDetail() {
            debugger;
            var data = getInventoryBasicDetail();
            $.ajax({
                type: 'Post',
                url: "/Inventory/Inventory/InventoryBasicDetails",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    onSuccess(data)

                },
                failure: function (data) {
                    onError()
                },
            });
        }
        function fatchInventoryBasicItemDetailByCommercialID() {
            debugger
            var data = {
                "ID": "0"
            };
            data.ID = $("#BasicDetailsID").val();
            $.ajax({
                type: 'Post',
                url: "/Inventory/Inventory/FatchBasicItemsDetails",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    onSuccessFatchInventoryBasicItemDetailByCommercialID(data)
                },
                failure: function (data) {
                    onError()
                },
            });
        }
        function fatchCategoryList() {

            var data = {
                "InventoryTypeId": ""
            };
            data.InventoryTypeId = $("#TypeID").val();
            $.ajax({
                type: 'Post',
                url: "/Inventory/CategoryMaster/FatchCategoryByInventoryTypeId",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    onSuccessInventoryType(data)
                },
                failure: function (data) {
                    onError()
                },
            });
        }
        function fatchItemList() {

            var data = {
                "TypeID": ""
            };
            data.TypeID = $("#TypeID").val();
            data.CategoryID = $("#CategoryID").val();
            $.ajax({
                type: 'Post',
                url: "/Inventory/InventoryItemMaster/fathcItemListByTypeAndCategory",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    onSuccessInventoryCategory(data)
                },
                failure: function (data) {
                    onError()
                },
            });
        }
        function fatchItemDetails() {
            debugger;
            var data = {
                "ItemID": ""
            };
            data.ItemID = $("#ItemID").val();
            //    alert('asd')
            // ajaxRequest.makeRequest('/Inventory/InventoryItemMaster/fathcItemDetails', "POST", data, InventoryBasicDetail.onSuccessFatchItemDetails, InventoryBasicDetail.onError);
            $.ajax({
                type: 'Post',
                url: "/Inventory/InventoryItemMaster/fathcItemDetails",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    onSuccessFatchItemDetails(data)
                },
                failure: function (data) {
                    onError()
                },
            });
        }
        function bindCategoryOptionList(data) {

            if (data != null) {
                var categoryList = [];
                categoryList = data;
                var count = categoryList.length;
                var $cloneRow = "";
                $cloneRow = $cloneRow + "<option value=''>Category Type...</option>";
                for (i = 0; i < categoryList.length; ++i) {
                    $cloneRow = $cloneRow + "<option value='" + categoryList[i].ID + "' title = '" + categoryList[i].Name + "'>" + categoryList[i].Name + "</option>";
                }
                $("#CategoryID").html($cloneRow);
            }
        }
        function bindItemsOptionList(data) {

            if (data != null) {
                var itemList = [];
                itemList = data;
                var count = itemList.length;
                var $cloneRow = "";
                $cloneRow = $cloneRow + "<option value=''>Select Item...</option>";
                for (i = 0; i < itemList.length; ++i) {
                    $cloneRow = $cloneRow + "<option value='" + itemList[i].ID + "' title = '" + itemList[i].Name + "'>" + itemList[i].Name + "</option>";
                }
                $("#ItemID").html($cloneRow);
            }
        }
        function createRowsInventoryBasicIntemDetails() {
            debugger
            var totalRows = $("#Quantity").val();//Quantity Received
            var Type = $("#QuantityType").val(); // Purchase Received
            var Pre = $("#QuantityLeft").val(); // PreReceived Quantity
            if (totalRows <= Type) {
                var _tableLastRowId = $('#myItemTableBody tr:last').attr('id');
                if (typeof _tableLastRowId === "undefined") {
                    $('#myItemTableBody').html("");
                    loopStartValue = 0;
                    _tableLastRowId = 0;
                }
                else {
                    ++_tableLastRowId;
                }

                if ($("#QuantityType").val() == "Quantity") {
                    $("#Quantity").removeAttr("disabled");
                }


                for (var counter = _tableLastRowId; counter < parseInt(totalRows); ++counter) {
                    var $cloneRow = "";
                    $cloneRow = $cloneRow + '<tr id="' + counter + '" datatableID = "0" style="width:100%;" isdeleted="0" >';
                    $cloneRow = $cloneRow + '<td>' + (parseInt(counter) + 1) + '</td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="BatchNumber_' + counter + '"   class="form-control" name="BatchNumber_' + counter + '" style="width: 100%;" /></td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="LOTNo_' + counter + '"   class="form-control" name="LOTNo_' + counter + '" style="width: 100%;" /></td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="ModelNumber_' + counter + '"   class="form-control" name="ModelNumber_' + counter + '" style="width: 100%;" /></td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="SRNO_' + counter + '"   class="form-control" name="SRNO_' + counter + '" style="width: 100%;" /></td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="BarcodeNumber_' + counter + '"   class="form-control" name="BarcodeNumber_' + counter + '" style="width: 100%;" /></td>';
                    if (Type == "Quantity") {
                        $cloneRow = $cloneRow + '<td></td>';
                    }
                    else if (Type == "Batch Quantity") {
                        $cloneRow = $cloneRow + '<td><input type="text"id="Quantity_' + counter + '"   class="form-control allowNumbersWithDecimalOnly" name="Quantity_' + counter + '" style="width: 100%;" /></td>';
                    }

                    $cloneRow = $cloneRow + '<td><input type="text"id="Description_' + counter + '"   class="form-control"  name="Description_' + counter + '" style="width: 100%;" /></td>';
                    //$cloneRow = $cloneRow + '<td><a href="#" title="Delete" class="glyphicon glyphicon-trash" data-toggle="modal" data-target="#myModal" id="rowDelete_' + counter + '" name="rowDelete_' + counter + '" operation="Delete Item"> </a>';
                    //$cloneRow = $cloneRow + '<td></td>';
                    $cloneRow = $cloneRow + '</tr>';
                    $('#myItemTableBody').append($cloneRow);

                    $('.allowNumbersWithDecimalOnly').keydown(function (e) {
                        var keyCode = (e.keyCode ? e.keyCode : e.which);
                        if (keyCode > 64 && keyCode < 91 || keyCode > 218 && keyCode < 223 || keyCode > 185 && keyCode < 190 || keyCode == 191 || keyCode == 192 || keyCode > 105 && keyCode < 110 || keyCode == 111 || keyCode == 16 || keyCode == 17 || keyCode == 18 || (((e.shiftKey && e.which) > 47) && ((e.shiftKey && e.which) < 58)) || (((e.shiftKey && e.which) > 218) && ((e.shiftKey && e.which) < 223)) || (((e.shiftKey && e.which) > 185) && ((e.shiftKey && e.which) < 193)) || (((e.shiftKey && e.which) > 105) && ((e.shiftKey && e.which) < 112))) {
                            e.preventDefault();
                        }
                        else {
                            if (keyCode == 190 || keyCode == 110) {
                                var id = $(this).attr("id");
                                if ($('#' + id).val().indexOf(".") >= 0) {
                                    e.preventDefault();
                                }
                            }
                        }
                    });
                }

            }
            else {
                alert('Received Quantity must be less than or equal to quantity');
                $("#Quantity").val(Pre);
            }
        }
        function getInventoryBasicDetail() {
            debugger;
            var data = {
                "ID": ""
            };
            data.ID = ($("#BasicDetailsID").val() == "") ? 0 : $("#BasicDetailsID").val();
            data.ItemName = $("#ItemName").val();
            data.ItemID = $("#ItemID").val();
            data.TypeID = $("#TypeID").val();
            data.UnitID = $("#UnitID").val();
            data.CategoryID = $("#CategoryID").val();
            data.QuantityType = $("#QuantityType").val();
            data.QuantityLeft = $("#QuantityLeft").val();
            data.Quantity = $("#Quantity").val();
            data.TQuantity = $("#TQuantity").val();
            data.Warranty = $("#Warranty").val();
            data.TotalQuantity = $("#TotalQuantity").val();
            data.InventoryBasicDetailsNumber = $("#InventoryBasicDetailsNumber").val();
            data.Manufacturer = $('#Manufacturer').val();
            data.GradeReceived = $('#GradeReceived').val();
            data.ConditionOfPackaging = $('#ConditionOfPackaging').val();
            data.IntegrityOfPackaging = $('#IntegrityOfPackaging').val();
            data.CertifiedConcentration = $('#CertifiedConcentration').val();
            data.Praceability = $('#Praceability').val();
            //data.Manufacturer = $('#Manufacturer').val();
            data.Remark = $('#Remark').val();
            data.PurchaseRequestID = $('#PurchaseRequestID').val();
            data.BrandReceived = $('#BrandReceived').val();
            data.StorageLocation = $('#StorageLocation').val();

            if ($('#DOM').val() != "") {

                data.DOM = new Date($('#DOM').val());
            }
            else {

                var from = $("#DOMval").val().split("/")
                var f = new Date(from[2], from[1] - 1, from[0])
                data.DOM = f;
            }

            //if (data.DOM != null) {
            //    var newdate = data.DOM;
            //    var dateString = newdate.toString().substr(6);
            //    var currentTime = new Date(parseInt(dateString));
            //    var month = currentTime.getMonth() + 1;
            //    var day = currentTime.getDate();
            //    var year = currentTime.getFullYear();
            //    if (parseInt(month) < 10) {
            //        month = "0" + month;
            //    }
            //    if (parseInt(day) < 10) {
            //        day = "0" + day;
            //    }
            //    var ReceivedDate = day + "/" + month + "/" + year;
            //    $("#DOM").val(ReceivedDate);
            //    $("#DOMval").val(ReceivedDate);
            //}

            //data.DOM = new Date(
            //                             applicationSystem.convertionOfDateFormat(
            //                             $("#DOM").val(),
            //                             applicationSystem.aspectedFormat,
            //                             applicationSystem.currentServerFormat,
            //                             applicationSystem.aspectedServerSeparator,
            //                             applicationSystem.currentServerSeparator
            //                         ));

            if ($('#DOE').val() != "") {

                data.DOE = new Date($('#DOE').val());
            }
            else {

                var from = $("#DOEval").val().split("/")
                var f = new Date(from[2], from[1] - 1, from[0])
                data.DOE = f;
            }

            //if (data.DOE != null) {
            //    var newdate = data.DOE;
            //    var dateString = newdate.toString().substr(6);
            //    var currentTime = new Date(parseInt(dateString));
            //    var month = currentTime.getMonth() + 1;
            //    var day = currentTime.getDate();
            //    var year = currentTime.getFullYear();
            //    if (parseInt(month) < 10) {
            //        month = "0" + month;
            //    }
            //    if (parseInt(day) < 10) {
            //        day = "0" + day;
            //    }
            //    var ReceivedDate = day + "/" + month + "/" + year;
            //    $("#DOE").val(ReceivedDate);
            //    $("#DOEval").val(ReceivedDate);
            //}

            //data.DOE = new Date(
            //                             applicationSystem.convertionOfDateFormat(
            //                             $("#DOE").val(),
            //                             applicationSystem.aspectedFormat,
            //                             applicationSystem.currentServerFormat,
            //                             applicationSystem.aspectedServerSeparator,
            //                             applicationSystem.currentServerSeparator
            //                         ));
            data.ListInventoryBasicItemDetail = getInventoryBasicItemDetail();
            return data;
        }
        function getInventoryBasicItemDetail() {
            debugger;
            var ItemsArray = [];
            $("#myItemTableBody tr").each(function () {
                var _rowID = $(this).attr("id");
                debugger
                //splitedRowID = _rowID.split("_");
                //_rowID = splitedRowID[1];
                var Item = {
                    "ID": "",
                    "InventoryBasicDetailsID": "",
                    "BatchNumber": "",
                    "LOTNo": "",
                    "ModelNumber": "",
                    "SRNO": "",
                    "BarcodeNumber": "",
                    "Quantity": "",
                    "Description": "",
                    "IsActive": "",
                    "IsDeleted": ""
                };
                var valueOfRowID = $('#' + _rowID).attr("datatableid");
                if ((valueOfRowID == "undefined") || (valueOfRowID == "") || (valueOfRowID == null)) {
                    Item.ID = 0;
                }
                else {
                    Item.ID = valueOfRowID;
                }

                Item.InventoryBasicDetailsID = $("#BasicDetailsID").val();
                Item.BatchNumber = $('#BatchNumber_' + _rowID).val();
                Item.LOTNo = $('#LOTNo_' + _rowID).val();
                Item.ModelNumber = $('#ModelNumber_' + _rowID).val();
                Item.SRNO = $('#SRNO_' + _rowID).val();
                Item.BarcodeNumber = $('#BarcodeNumber_' + _rowID).val();
                Item.Quantity = $("#Quantity").val();
                Item.Description = $('#Description_' + _rowID).val();

                var isDeletedValue = $('#' + _rowID).attr("isdeleted");
                if (isDeletedValue == 1) {
                    Item.IsDeleted = true;
                }
                else {
                    Item.IsDeleted = false;
                }
                ItemsArray.push(Item);
            });
            return ItemsArray;
        }
        function setInventoryBasicDetails(data) {
            debugger;
            if (data != null) {

                $("#ItemID").val(data.ItemID).change();
                $("#ID").val(data.ID);
                $("#TypeID").val(data.TypeID);
                $("#CategoryID").val(data.CategoryID);
                $("#UnitID").val(data.UnitID);
                $("#QuantityType").val(data.QuantityType);
                if ($("#QuantityType").val() == "Quantity" || $("#QuantityType").val() == "Batch Quantity") {
                    // $("#QuantityLeft").removeAttr("disabled");
                }
                else {
                    // $("#QuantityLeft").attr("disabled", "disabled");
                }

                $("#QuantityLeft").val(data.Quantity);
                $("#TQuantity").val(data.TQuantity);
                $("#Warranty").val(data.Warranty);
                $("#BasicDetailsID").val(data.ID);
                $("#TotalQuantity").val(data.TotalQuantity);
                $("#InventoryBasicDetailsNumber").val(data.InventoryBasicDetailsNumber);
                $('#Manufacturer').val(data.Manufacturer);
                $('#GradeReceived').val(data.GradeReceived);
                $('#ConditionOfPackaging').val(data.ConditionOfPackaging);
                $('#IntegrityOfPackaging').val(data.IntegrityOfPackaging);
                $('#CertifiedConcentration').val(data.CertifiedConcentration);
                $('#Praceability').val(data.Praceability);
                $('#PurchaseRequestID').val(data.PurchaseRequestID);
                $('#Remark').val(data.Remark);
                $('#BrandReceived').val(data.BrandReceived);
                $('#StorageLocation').val(data.StorageLocation);


                //$('#DOM').val(applicationSystem.convertJsonDateFormat(data.DOM, "dd/MM/yyyy"));
                //$('#DOM').val(applicationSystem.convertionFromJsonDateFormat(data.DOM, applicationSystem.currentServerFormat, applicationSystem.currentServerSeparator));
                //var x1 = applicationSystem.convertionFromJsonDateFormat(data.DOM, applicationSystem.currentServerFormat, applicationSystem.currentServerSeparator);
                //var y1 = x1.split("/");
                //var z1 = y1[1] + "/" + y1[0] + "/" + y1[2];
                ////$('#DOMval').val(z1);
                //if (z1 == "undefined//undefined") {
                //    $("#DOMval").val('');
                //}
                //else {
                //    $('#DOMval').val(z1);
                //}

                if (data.DOM != null) {
                    var newdate = data.DOM;
                    var dateString = newdate.toString().substr(6);
                    var currentTime = new Date(parseInt(dateString));
                    var month = currentTime.getMonth() + 1;
                    var day = currentTime.getDate();
                    var year = currentTime.getFullYear();
                    if (parseInt(month) < 10) {
                        month = "0" + month;
                    }
                    if (parseInt(day) < 10) {
                        day = "0" + day;
                    }
                    var ReceivedDate = day + "/" + month + "/" + year;
                    $("#DOM").val(ReceivedDate);
                    $("#DOMval").val(ReceivedDate);
                }

                //$('#DOE').val(applicationSystem.convertionFromJsonDateFormat(data.DOE, applicationSystem.currentServerFormat, applicationSystem.currentServerSeparator));
                //var x2 = applicationSystem.convertionFromJsonDateFormat(data.DOE, applicationSystem.currentServerFormat, applicationSystem.currentServerSeparator);
                //var y2 = x2.split("/");
                //var z2 = y2[1] + "/" + y2[0] + "/" + y2[2];
                ////$('#DOEval').val(z2);
                //if (z2 == "undefined//undefined") {
                //    $("#DOEval").val('');
                //}
                //else {
                //    $("#DOEval").val(z2);
                //}

                if (data.DOE != null) {
                    var newdate = data.DOE;
                    var dateString = newdate.toString().substr(6);
                    var currentTime = new Date(parseInt(dateString));
                    var month = currentTime.getMonth() + 1;
                    var day = currentTime.getDate();
                    var year = currentTime.getFullYear();
                    if (parseInt(month) < 10) {
                        month = "0" + month;
                    }
                    if (parseInt(day) < 10) {
                        day = "0" + day;
                    }
                    var ReceivedDate = day + "/" + month + "/" + year;
                    $("#DOE").val(ReceivedDate);
                    $("#DOEval").val(ReceivedDate);
                }
                //$('#DOE').val(data.DOE);
            }
        }
        function setInventoryBasicItemsDetails(data) {
            debugger;
            if (data != null) {
                var BasicItems = [];
                BasicItems = data;
                var count = BasicItems.length;
                $('#myItemTableBody').html("");

                var Type = $("#QuantityType").val();
                for (i = 0; i < BasicItems.length; ++i) {
                    var $cloneRow = "";
                    $cloneRow = $cloneRow + '<tr id="' + i + '" datatableID = "' + BasicItems[i].ID + '" style="width:100%;"  isdeleted="0">';
                    $cloneRow = $cloneRow + '<td>' + (parseInt(i) + 1) + '</td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="BatchNumber_' + i + '"   class="form-control" name="BatchNumber_' + i + '" style="width: 100%;" value="' + BasicItems[i].BatchNumber + '" /></td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="LOTNo_' + i + '"   class="form-control" name="LOTNumber_' + i + '" style="width: 100%;" value="' + BasicItems[i].LOTNo + '" /></td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="ModelNumber_' + i + '"   class="form-control" name="ModelNumber_' + i + '" style="width: 100%;" value="' + BasicItems[i].ModelNumber + '" /></td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="SRNO_' + i + '"   class="form-control" name="SRNumber_' + i + '" style="width: 100%;" value="' + BasicItems[i].SRNO + '" /></td>';
                    $cloneRow = $cloneRow + '<td><input type="text"id="BarcodeNumber_' + i + '"   class="form-control" name="BarcodeNumber_' + i + '" style="width: 100%;" value="' + BasicItems[i].BarcodeNumber + '" /></td>';

                    if (Type == "Quantity") {
                        $cloneRow = $cloneRow + '<td></td>';
                    }
                    else if (Type == "Batch Quantity") {
                        $cloneRow = $cloneRow + '<td><input type="text"id="Quantity_' + i + '"   class="form-control allowNumbersWithDecimalOnly" name="Quantity_' + i + '" style="width: 100%;" value="' + BasicItems[i].Quantity + '" /></td>';
                    }

                    $cloneRow = $cloneRow + '<td><input type="text"id="Description_' + i + '"   class="form-control"  name="Description_' + i + '" style="width: 100%;" value="' + BasicItems[i].Description + '" /></td>';
                    //$cloneRow = $cloneRow + '<td><a href="#" title="Delete" class="glyphicon glyphicon-trash" data-toggle="modal" data-target="#myModal" id="rowDelete_' + i + '" name="rowDelete_' + i + '" operation="Delete Item"> </a>';
                    //$cloneRow = $cloneRow + '<td></td>';
                    $cloneRow = $cloneRow + '</tr>';
                    $('#myItemTableBody').append($cloneRow);


                    $('.allowNumbersWithDecimalOnly').keydown(function (e) {
                        var keyCode = (e.keyCode ? e.keyCode : e.which);
                        if (keyCode > 64 && keyCode < 91 || keyCode > 218 && keyCode < 223 || keyCode > 185 && keyCode < 190 || keyCode == 191 || keyCode == 192 || keyCode > 105 && keyCode < 110 || keyCode == 111 || keyCode == 16 || keyCode == 17 || keyCode == 18 || (((e.shiftKey && e.which) > 47) && ((e.shiftKey && e.which) < 58)) || (((e.shiftKey && e.which) > 218) && ((e.shiftKey && e.which) < 223)) || (((e.shiftKey && e.which) > 185) && ((e.shiftKey && e.which) < 193)) || (((e.shiftKey && e.which) > 105) && ((e.shiftKey && e.which) < 112))) {
                            e.preventDefault();
                        }
                        else {
                            if (keyCode == 190 || keyCode == 110) {
                                var id = $(this).attr("id");
                                if ($('#' + id).val().indexOf(".") >= 0) {
                                    e.preventDefault();
                                }
                            }
                        }
                    });
                }
                $("#Quantity").val(BasicItems.length);
                if ($("#QuantityType").val() == "Quantity") {
                    $("#TotalQuantity").val($("#Quantity").val());
                }
            }
        }

        function setInventoryBasicItemsDetailsOptionList(data) {
            debugger;
            if (data != null) {
                var BasicItems = [];
                BasicItems = data;
                var count = BasicItems.length;
                var $cloneRow = "";
                $cloneRow = $cloneRow + "<option value=''>Select Item...</option>";
                for (i = 0; i < BasicItems.length; ++i) {
                    $cloneRow = $cloneRow + "<option value='" + BasicItems[i].ID + "' title = '" + BasicItems[i].ID + "'>" + BasicItems[i].InventoryBasicItemDetailsNumber + "</option>";
                }
                $("#InventoryBasicItemDetailsID").html($cloneRow);
                $("#CalibrationInventoryBasicItemDetailsID").html($cloneRow);
            }
        }

        function bindBasicItemsOptionList(data) {
            if (data != null) {
                var ItemsList = [];
                ItemsList = data;
                var count = ItemsList.length;
                var $cloneRow = "";
                $cloneRow = $cloneRow + "<option value=''>Field Type...</option>";
                for (i = 0; i < ItemsList.length; ++i) {
                    $cloneRow = $cloneRow + "<option value='" + ItemsList[i].ID + "' title = '" + ItemsList[i].ID + "'>" + ItemsList[i].InventoryBasicItemDetailsNumber + "</option>";
                }
                $("#InventoryBasicItemDetailsID").html($cloneRow);
                $("#CalibrationInventoryBasicItemDetailsID").html($cloneRow);


                $("#tabHead_Maintainance").attr("data-toggle", "tab");
                $("#tabHead_Maintainance").trigger("click");

                //InventoryBasicDetail.BasicItemsOptionList = $cloneRow;
            }
        }
        function setInventoryBasicDetail() {
        }
        function onSuccess(data) {
            debugger;
            if (data.status == "success") {
                //  applicationSystem.onsuccess(data);
                //  InventoryBasicDetail.onbasicDetailSuccess(data);
                if (parseInt($("#BasicDetailsID").val()) > 0) {
                    fatchInventoryCommercialDetails();
                    $("#tabHead_CommercialDetails").trigger("click");
                }
                else {
                    $("#BasicDetailsID").val(data.ID);
                    $("#tabHead_CommercialDetails").attr("data-toggle", "tab");
                    $("#tabHead_CommercialDetails").trigger("click");
                    //$("#CommercialDetailsID").val(data.ID);
                    $("#add_new_item_li").css("display", "none");
                }
            }
            if (data.status == "fail") {
                Swal.fire('Error!!!!')
            }
        }
        function fatchInventoryCommercialDetails() {
            debugger;
            var data = {
                "ID": ""
            };
            data.ID = $("#BasicDetailsID").val();
            //  ajaxRequest.makeRequest('/Inventory/Inventory/FatchCommercialDetailsByID', "POST", data, InventoryCommercialDetails.onSuccessFatchCommercialDetailsByID, InventoryCommercialDetails.onError);
            $.ajax({
                type: 'Post',
                url: "/Inventory/Inventory/FatchCommercialDetailsByID",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    onSuccessFatchCommercialDetailsByID(data)
                },
                failure: function (data) {
                    alert("Failed");
                },
            });

        }
        function onSuccessFatchCommercialDetailsByID() {

            debugger;
            if (data.status == "success") {
                if (data.CommercialDetails.length > 0) {
                    $("#VendorName").val(data.CommercialDetails[0].VendorName);
                    $("#PurchaseOrderNumber").val(data.CommercialDetails[0].PurchaseOrderNumber);
                    $("#CommercialDetailsID").val(data.CommercialDetails[0].ID);
                    if (data.CommercialDetails[0].PurchaseOrderDate != null) {
                        var newdate = data.CommercialDetails[0].PurchaseOrderDate;
                        var dateString = newdate.toString().substr(6);
                        var currentTime = new Date(parseInt(dateString));
                        var month = currentTime.getMonth() + 1;
                        var day = currentTime.getDate();
                        var year = currentTime.getFullYear();
                        if (parseInt(month) < 10) {
                            month = "0" + month;
                        }
                        if (parseInt(day) < 10) {
                            day = "0" + day;
                        }
                        var ReceivedDate = day + "/" + month + "/" + year;
                        $("#PurchaseOrderDate").val(ReceivedDate);
                        $("#PurchaseOrderDateval").val(ReceivedDate);
                    }

                    $("#PurchaseOrderValue").val(data.CommercialDetails[0].PurchaseOrderValue);

                    $("#DeliveryChallanNo").val(data.CommercialDetails[0].DeliveryChallanNo);
                    $("#DeliveryTime").val(data.CommercialDetails[0].DeliveryTime);

                    if (data.CommercialDetails[0].PurchaseDate != null) {
                        var tempdate = data.CommercialDetails[0].PurchaseDate;
                        var tempString = tempdate.toString().substr(6);
                        var tempcurrentTime1 = new Date(parseInt(tempString));
                        var tempmonth1 = tempcurrentTime1.getMonth() + 1;
                        var tempday1 = tempcurrentTime1.getDate();
                        var tempyear1 = tempcurrentTime1.getFullYear();
                        if (parseInt(tempmonth1) < 10) {
                            tempmonth1 = "0" + tempmonth1;
                        }
                        if (parseInt(tempday1) < 10) {
                            tempday1 = "0" + tempday1;
                        }
                        var RtempeceivedDate1 = tempday1 + "/" + tempmonth1 + "/" + tempyear1;
                        $("#PurchaseDate").val(RtempeceivedDate1);
                        $("#PurchaseDateval").val(RtempeceivedDate1);
                    }
                    if (data.CommercialDetails[0].DeliveryChallanDate != null) {
                        var tempdate = data.CommercialDetails[0].DeliveryChallanDate;
                        var tempString = tempdate.toString().substr(6);
                        var tempcurrentTime1 = new Date(parseInt(tempString));
                        var tempmonth1 = tempcurrentTime1.getMonth() + 1;
                        var tempday1 = tempcurrentTime1.getDate();
                        var tempyear1 = tempcurrentTime1.getFullYear();
                        if (parseInt(tempmonth1) < 10) {
                            tempmonth1 = "0" + tempmonth1;
                        }
                        if (parseInt(tempday1) < 10) {
                            tempday1 = "0" + tempday1;
                        }
                        var RtempeceivedDate1 = tempday1 + "/" + tempmonth1 + "/" + tempyear1;
                        $("#DeliveryChallanDate").val(RtempeceivedDate1);
                        $("#DeliveryChallanDateval").val(RtempeceivedDate1);
                    }
                    if (data.CommercialDetails[0].BillDate != null) {
                        var tempdate = data.CommercialDetails[0].BillDate;
                        var tempString = tempdate.toString().substr(6);
                        var tempcurrentTime1 = new Date(parseInt(tempString));
                        var tempmonth1 = tempcurrentTime1.getMonth() + 1;
                        var tempday1 = tempcurrentTime1.getDate();
                        var tempyear1 = tempcurrentTime1.getFullYear();
                        if (parseInt(tempmonth1) < 10) {
                            tempmonth1 = "0" + tempmonth1;
                        }
                        if (parseInt(tempday1) < 10) {
                            tempday1 = "0" + tempday1;
                        }
                        var RtempeceivedDate1 = tempday1 + "/" + tempmonth1 + "/" + tempyear1;
                        $("#BillDate").val(RtempeceivedDate1);
                        $("#BillDateval").val(RtempeceivedDate1);
                    }
                    $("#InvoiceNumber").val(data.CommercialDetails[0].InvoiceNumber);
                    //InventoryBasicDetail.setInventoryBasicDetails(data.InventoryBasicDetail[0]);
                    //InventoryBasicDetail.setInventoryBasicItemsDetails(data.InventoryBasicItemDetail);
                    //InventoryBasicDetail.setInventoryBasicItemsDetailsOptionList(data.InventoryBasicItemDetail);

                }
                if (data.InventoryCommercialFileDetail.length > 0) {
                    if (data.InventoryCommercialFileDetail[0].FileName != null) {
                        var path = data.ImagePath;
                        var url = window.location.href;
                        var serverName = applicationSystem.get_hostname();
                        var full_Url = serverName + path;
                        //  setCommercialImages(data.InventoryCommercialFileDetail, full_Url);
                    }
                }

                if (data.InventoryBasicDetail.length > 0) {
                    setInventoryBasicDetails(data.InventoryBasicDetail[0]);
                }
                if (data.InventoryBasicItemDetail.length > 0) {
                    setInventoryBasicItemsDetails(data.InventoryBasicItemDetail);
                    setInventoryBasicItemsDetailsOptionList(data.InventoryBasicItemDetail);
                }

            }
            else if (data.status == "info") {
                applicationSystem.onError(data);
            }
            else if (data.status == "fail") {
                applicationSystem.onError(data);
            }
        }
        function onbasicDetailSuccess(data) {
            Swal.fire({
                title: 'Do you want to save the changes?',
                showDenyButton: true,
                showCancelButton: true,
                confirmButtonText: `Save`,
                denyButtonText: `Don't save`,
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    Swal.fire('Saved!', '', 'success')
                } else if (result.isDenied) {
                    Swal.fire('Changes are not saved', '', 'info')
                }
            })
        }
        function onSuccessFatchInventoryBasicItemDetailByCommercialID(data) {

            debugger
            if (data.status == "success") {
                bindBasicItemsOptionList(data.BasicItemsDetails);
            }
            if (data.status == "fail") {
            }
        }
        function onSuccessInventoryType(data) {
            if (data.status == "success") {
                if (data.listCategoryMaster != null) {
                    bindCategoryOptionList(data.listCategoryMaster);
                }
            }
            if (data.status == "fail") {
                applicationSystem.onError(data);
            }
        }
        function onSuccessInventoryCategory(data) {

            if (data.status == "success") {
                if (data.ListOfItems != null) {
                    bindItemsOptionList(data.ListOfItems);
                }
            }
            else if (data.status == "info") {
                //applicationSystem.onError(data);
            }
            else if (data.status == "fail") {
                //applicationSystem.onError(data);
            }
        }
        function onSuccessFatchItemDetails(data) {
            debugger
            if (data.status == "success") {
                if (data.ItemDetails != null) {
                    //Set inventory type and category select values
                    $("#ItemID").val(data.ItemDetails.ItemID);
                    $("#TypeID").val(data.ItemDetails.TypeID);
                    $("#TypeID").val(data.ItemDetails.InventoryTypeID);
                    $("#CategoryID").val(data.ItemDetails.CategoryID);
                    $("#CategoryID").val(data.ItemDetails.CatagoryMasterID);
                    $("#UnitID").val(data.ItemDetails.UnitID);

                    //$("#InventoryCapacityMasterId").val(data.ItemDetails.InventoryCapacityMasterId);
                    //InventoryBasicDetail.bindItemsDetailsToControls(data.ItemDetails);
                }
            }
            else if (data.status == "info") {
                //applicationSystem.onError(data);
            }
            else if (data.status == "fail") {
                //applicationSystem.onError(data);
            }
        }
        function onError(data) {
            applicationSystem.onError(data);
        }
    });
</script>




