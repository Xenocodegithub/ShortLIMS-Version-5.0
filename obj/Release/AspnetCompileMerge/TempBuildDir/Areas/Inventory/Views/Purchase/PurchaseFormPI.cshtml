@model LIMS_DEMO.Areas.Inventory.Models.PurchaseModel
@{
    ViewBag.Title = "PurchaseForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using (Ajax.BeginForm("PurchaseRequestForm", "Purchase", new AjaxOptions() { HttpMethod = "Post", OnSuccess = "PurchaseRequestSuccess" }))
{
    @Html.AntiForgeryToken()
    @*@Html.HiddenFor(model => model.CatagoryMasterId)*@
    @Html.HiddenFor(model => model.PurchaseRequestID)
    @Html.HiddenFor(model => model.PurchaseMasterID)
    @Html.HiddenFor(model => model.InventoryTypeID)
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="main-container">
        <div class="pd-ltr-20 xs-pd-20-10">
            <div class="min-height-200px">
                <div class="page-header">
                    <div class="row">
                        <div class="col-md-6 col-sm-12">
                            <div class="title">
                                <h4>Inventory</h4>
                            </div>
                            <nav aria-label="breadcrumb" role="navigation">
                                <ol class="breadcrumb">
                                    <li class="breadcrumb-item"><a href="#">Purchase</a></li>
                                    <li class="breadcrumb-item active" aria-current="page">Purchase Request Form</li>
                                </ol>
                            </nav>
                        </div>
                    </div>
                </div>
                <!-- Default Basic Forms Start -->
                <div class="pd-20 card-box mb-30">
                    <div class="clearfix">
                        <div class="pull-left">
                            <h4 class="text-blue h4">Purchase Request Form</h4>
                        </div>
                        <div class="pull-right">
                            <a href="@Url.Action("PurchasSupplierForm","Purchase")" class="btn btn-info btn-sm scroll-click" role="button"> Add Supplier</a>
                        </div>
                    </div>
                    <fieldset>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Item: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(model => model.ItemMasterId, new SelectList(ViewBag.Item, "ItemMasterId", "Item"), "Please Select", new { @class = "form-control", @style = "font-size:13px;" })
                                @Html.ValidationMessageFor(model => model.ItemMasterId, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">Brand: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Grade: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Grade, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">Pack Size: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.PackSize, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.PackSize, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Quantity: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">Priority: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Priority, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Purpose: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">Specification: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Specification, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Remark: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">COA/COA: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                <label> @Html.RadioButtonFor(model => model.COA, true, new { id = "COA-COA" }) COA </label>&emsp;
                                <label> @Html.RadioButtonFor(model => model.COA, false, new { id = "COA-COC" }) COC </label>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Tick If: <span style="color:red">*</span></label>
                            <div class="col-sm-4">

                                @*@Html.CheckBoxFor(model => model.TickIf.Value)*@

                                @if (Model.TickIf == true)
                                {
                                    <input id="TickIfId" name="TickIfname" type="checkbox" value="true" checked="checked" />
                                    @Html.HiddenFor(model => model.TickIf)
                                }
                                else
                                {
                                    <input id="TickIfId" name="TickIfname" type="checkbox" value="false" />
                                    @Html.HiddenFor(model => model.TickIf)
                                }

                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">Supplier Name: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.DropDownListFor(model => model.PurchaseSupplierID, new SelectList(ViewBag.Supplier, "PurchaseSupplierID", "SupplierName"), "Please Select", new { @class = "form-control",@style="font-size:13px;" })
                                @Html.ValidationMessageFor(model => model.PurchaseSupplierID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Estimated Lag Time: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.EstimatedLagTime, new { htmlAttributes = new { @class = "form-control", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.EstimatedLagTime, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">Rate: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control", @onkeyup = "funCalNetAmount(false,false);", @style = "font-size:13px;" } })
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Amount: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control", @readonly = "readonly", @style = "font-size:13px;" })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">Discount Amount: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(model => model.DiscPercent, new { @class = "form-control", onkeyup = "funCalNetAmount(true,false);", @style = "font-size:13px;" })

                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Amount After Discount: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(model => model.AmountAfterDisc, new { @class = "form-control", @readonly = "readonly", @style = "font-size:13px;" })
                                @Html.ValidationMessageFor(model => model.AmountAfterDisc, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">GST Type: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                <select id="GSTType" class="form-control" name="GSTType" style="font-size:13px;">
                                    <option id="0">Select GST Type</option>
                                    <option id="1">IGST</option>
                                    <option id="2">CGST+SGST</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">GST Percent: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(model => model.GSTPercent, new { @class = "form-control", onkeyup = "funCalNetAmount(false,true);", @style = "font-size:13px;" })
                            </div>
                            <label class="col-sm-12 col-md-2 col-form-label">GST amount: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(model => model.GSTAmount, new { @class = "form-control", @readonly = "readonly", @style = "font-size:13px;" })

                                @Html.ValidationMessageFor(model => model.GSTAmount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-12 col-md-2 col-form-label">Net Amount: <span style="color:red">*</span></label>
                            <div class="col-sm-4">
                                @Html.TextBoxFor(model => model.NetAmount, new { @class = "form-control", @readonly = "readonly", @style = "font-size:13px;" })
                                @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
                            </div>
                            </div>
                        <div class="form-group row">
                            <div class="col-sm-12 col-md-12">
                                <button type="button" class="btn btn-info btn-sm" id="SubmitBtnPI" style="float:right">Submit</button>

                            </div>
                         </div>
                    </fieldset>
                </div>
            </div>
        </div>
    </div>
}

<script src="~/Scripts/jquery.validate-vsdoc.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
<script>
    function PurchaseRequestSuccess(result) {
        if (result.Status == "success") {
                swal(
                    {
                        position: 'top-end',
                        type: 'success',
                        title: 'Your work has been saved',
                        showConfirmButton: false,
                        timer: 15000
                    }
                )
            alert(result.message);
            location.href = '/Inventory/PurchaseRequestList';
        }
    }

    function SubmitPI() {
        debugger
        if ($('#GSTType').val() == "Select GST Type" || $('#PurchaseSupplierID').val()=="") {

            alert("Please Select Mandatory Fields")

        }
        else {
               debugger
             var PurchaseRequestID = $('#PurchaseRequestID').val();
             var PurchaseMasterID = $('#PurchaseMasterID').val();
        var InventoryTypeID = $('#InventoryTypeID').val();
        var PurchaseSupplierID = $('#PurchaseSupplierID').find(":selected").val();
             var TickIf = $("#TickIf").val();
        var Rate = $("#Rate").val();
        var Amount = $("#Amount").val();
        var DiscPercent = $("#DiscPercent").val();
        var GSTPercent = $("#GSTPercent").val();
            var DiscAmount = $("#AmountAfterDisc").val();
        var GSTAmount = $("#GSTAmount").val();
            var NetAmount = $("#NetAmount").val();
            if ($('#GSTType').find(":selected").val() == "IGST") {
                var IsIGST = 1;
            }
            else {
                var IsIGST = 0;
            }

           var EstimatedLagTime = $("#EstimatedLagTime").val();
            var obj = {
                PurchaseRequestID: PurchaseRequestID,
                PurchaseMasterID: PurchaseMasterID,
                InventoryTypeID: InventoryTypeID,
                Rate: Rate,
                TickIf: TickIf,
                Amount: Amount,
                DiscPercent: DiscPercent,
                GSTPercent: GSTPercent,
                DiscAmount: DiscAmount,
                GSTAmount: GSTAmount,
                NetAmount: NetAmount,
                IsIGST: IsIGST,
                EstimatedLagTime: EstimatedLagTime,
                PurchaseSupplierID: PurchaseSupplierID

        };
            var parameter = JSON.stringify(obj);
        $.ajax({
                    type: "POST",
            url: "/Purchase/UpdatePRD",
                    dataType: 'text',
                    cache: false,
                    data: "model=" + parameter,
                    success: function (response) {
                        var x = response;
                      
                        window.location.href = "@Url.Action("PurchaseInchargeFillList", "Purchase", new { Area="Inventory"})";
                    },
                    error: function (xhr) {
                        console.log('error');
                    }
         });
        }




    }
  
    $(function () {

        $('#SubmitBtnPI').click(function () {
            SubmitPI();
        });

    });
    $(function () {

        $('#TickIfId').click(function () {
            //If the checkbox is checked.
            if ($(this).is(':checked')) {
                $("#TickIf").val(true);
            } else {
                //If it is not checked, disable .
                $("#TickIf").val(false);
                $(this).attr("value", "false");
            }
        });

    });

    function funCalNetAmount(IsDisc, IsGST) {
        var Rate = $('#Rate').val() == '' ? parseFloat(0.0).toFixed(2) : $('#Rate').val();
        var Qty = $('#Quantity').val() == '' ? 0 : $('#Quantity').val();
        debugger

        var Amount = Number(Rate) * Number(Qty);
        $('#Amount').val((Amount).toFixed(1));

        $('#NetAmount').val((Amount).toFixed(1))
        $('#AmountAfterDisc').val((Amount).toFixed(1))

        if (IsDisc) {
            var DiscPer = $('#DiscPercent').val() == '' ? 0 : $('#DiscPercent').val();
            var DiscAmount = (Number(Amount) * Number(DiscPer) / 100);
            $('#DiscAmount').val((DiscAmount).toFixed(1));
            var AmountAfterDisc = Number(Amount) - Number(DiscAmount);
            $('#AmountAfterDisc').val((AmountAfterDisc).toFixed(1));
            $('#NetAmount').val((AmountAfterDisc).toFixed(1));



        }

        if (IsGST) {
            var GSTPercent = $('#GSTPercent').val() == '' ? 0 : $('#GSTPercent').val();


            var GSTAmount = (Number(AmountAfterDisc) * Number(GSTPercent) / 100);
            $('#GSTAmount').val((GSTAmount).toFixed(1));
            var NetAmount = Number(GSTAmount) + Number(AmountAfterDisc);
            $('#NetAmount').val((NetAmount).toFixed(1));
        }

        if (IsDisc, IsGST) {
            var DiscPer = $('#DiscPercent').val() == '' ? 0 : $('#DiscPercent').val();
            var DiscAmount = (Number(Amount) * Number(DiscPer) / 100);
            $('#DiscAmount').val((DiscAmount).toFixed(1));
            var AmountAfterDisc = Number(Amount) - Number(DiscAmount);
            $('#AmountAfterDisc').val((AmountAfterDisc).toFixed(1));
            $('#NetAmount').val((AmountAfterDisc).toFixed(1));
            var GSTPercent = $('#GSTPercent').val() == '' ? 0 : $('#GSTPercent').val();


            var GSTAmount = (Number(AmountAfterDisc) * Number(GSTPercent) / 100);
            $('#GSTAmount').val((GSTAmount).toFixed(1));
            var NetAmount = Number(GSTAmount) + Number(AmountAfterDisc);
            $('#NetAmount').val((NetAmount).toFixed(1));
        }


    }

</script>