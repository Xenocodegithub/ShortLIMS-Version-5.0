//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LIMS_DEMO.DAL
{
    using System;
    using System.Collections.Generic;
    
    public partial class SampleCollection
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public SampleCollection()
        {
            this.ARCs = new HashSet<ARC>();
            this.FDStackEmissions = new HashSet<FDStackEmission>();
            this.FieldAmbientAirMonitorings = new HashSet<FieldAmbientAirMonitoring>();
            this.FieldBuildingMaterials = new HashSet<FieldBuildingMaterial>();
            this.FieldCoalCokeSolidFuels = new HashSet<FieldCoalCokeSolidFuel>();
            this.FieldFoodAndAgriCultures = new HashSet<FieldFoodAndAgriCulture>();
            this.FieldMicrobiologicalMonitoringOfAirs = new HashSet<FieldMicrobiologicalMonitoringOfAir>();
            this.FieldNoiseLevelMonitorings = new HashSet<FieldNoiseLevelMonitoring>();
            this.FieldSolidHazardousWasteSoilOils = new HashSet<FieldSolidHazardousWasteSoilOil>();
            this.FieldWasteWaters = new HashSet<FieldWasteWater>();
            this.FieldWorkplaceEnvironmentAndFugitiveEmissions = new HashSet<FieldWorkplaceEnvironmentAndFugitiveEmission>();
            this.PlannerByDisciplines = new HashSet<PlannerByDiscipline>();
            this.QuantityPreservatives = new HashSet<QuantityPreservative>();
            this.SampleCollectionDevices = new HashSet<SampleCollectionDevice>();
            this.SampleCollectionProcedures = new HashSet<SampleCollectionProcedure>();
            this.SampleParameterFiles = new HashSet<SampleParameterFile>();
            this.SampleParameterPlannings = new HashSet<SampleParameterPlanning>();
            this.SolutionPreparationDatas = new HashSet<SolutionPreparationData>();
        }
    
        public long SampleCollectionId { get; set; }
        public int WorkOrderID { get; set; }
        public Nullable<long> EnquirySampleID { get; set; }
        public Nullable<byte> StatusId { get; set; }
        public Nullable<int> SampleDescriptionId { get; set; }
        public Nullable<int> SampleTypeId { get; set; }
        public Nullable<int> SampleDeviceId { get; set; }
        public Nullable<int> SampleQtyId { get; set; }
        public Nullable<int> ProcedureId { get; set; }
        public Nullable<int> EnvCondtId { get; set; }
        public string EmployeeId { get; set; }
        public Nullable<System.DateTime> CollectionDate { get; set; }
        public Nullable<System.TimeSpan> SampleCollectionTime { get; set; }
        public string SampleLocation { get; set; }
        public string Remark { get; set; }
        public Nullable<int> FieldDeterminationId { get; set; }
        public Nullable<int> Iteration { get; set; }
        public Nullable<bool> IsWitness { get; set; }
        public string WitnessName { get; set; }
        public string SampleNo { get; set; }
        public string SampleName { get; set; }
        public bool IsSampleIntact { get; set; }
        public string IndustryType { get; set; }
        public string Source { get; set; }
        public Nullable<System.DateTime> ProbableDateOfReport { get; set; }
        public string RequestNo { get; set; }
        public string ULRNo { get; set; }
        public bool IsActive { get; set; }
        public int EnteredBy { get; set; }
        public System.DateTime EnteredDate { get; set; }
        public Nullable<int> ModifiedBy { get; set; }
        public byte[] ModifiedDate { get; set; }
        public string FieldStatusCode { get; set; }
        public Nullable<int> PlannerId { get; set; }
        public string Duration { get; set; }
        public string SampleDescription { get; set; }
        public Nullable<long> LocationSampleCollectionID { get; set; }
        public Nullable<int> WorkOrderSampleCollectionDateId { get; set; }
        public string IsReturnedOrIsRetained { get; set; }
        public Nullable<bool> StatutoryLimits { get; set; }
        public string SubContractedParameters { get; set; }
        public string AckRemarks { get; set; }
        public Nullable<System.TimeSpan> StartTime { get; set; }
        public Nullable<System.TimeSpan> EndTime { get; set; }
        public Nullable<bool> IsDisposed { get; set; }
        public Nullable<System.DateTime> SampleApprovedDate { get; set; }
        public Nullable<System.DateTime> ReturnedDate { get; set; }
        public string ReturnedRemark { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ARC> ARCs { get; set; }
        public virtual EnquirySampleDetail EnquirySampleDetail { get; set; }
        public virtual EnquirySampleDetail EnquirySampleDetail1 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FDStackEmission> FDStackEmissions { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldAmbientAirMonitoring> FieldAmbientAirMonitorings { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldBuildingMaterial> FieldBuildingMaterials { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldCoalCokeSolidFuel> FieldCoalCokeSolidFuels { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldFoodAndAgriCulture> FieldFoodAndAgriCultures { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldMicrobiologicalMonitoringOfAir> FieldMicrobiologicalMonitoringOfAirs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldNoiseLevelMonitoring> FieldNoiseLevelMonitorings { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldSolidHazardousWasteSoilOil> FieldSolidHazardousWasteSoilOils { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldWasteWater> FieldWasteWaters { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FieldWorkplaceEnvironmentAndFugitiveEmission> FieldWorkplaceEnvironmentAndFugitiveEmissions { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PlannerByDiscipline> PlannerByDisciplines { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<QuantityPreservative> QuantityPreservatives { get; set; }
        public virtual EnvironmentalCondition EnvironmentalCondition { get; set; }
        public virtual ProcedureMaster ProcedureMaster { get; set; }
        public virtual SampleDescriptionMaster SampleDescriptionMaster { get; set; }
        public virtual SampleDeviceMaster SampleDeviceMaster { get; set; }
        public virtual SampleQtyMaster SampleQtyMaster { get; set; }
        public virtual SampleTypeMaster SampleTypeMaster { get; set; }
        public virtual StatusMaster StatusMaster { get; set; }
        public virtual WorkOrder WorkOrder { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SampleCollectionDevice> SampleCollectionDevices { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SampleCollectionProcedure> SampleCollectionProcedures { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SampleParameterFile> SampleParameterFiles { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SampleParameterPlanning> SampleParameterPlannings { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SolutionPreparationData> SolutionPreparationDatas { get; set; }
        public virtual StatusMaster StatusMaster1 { get; set; }
    }
}
