//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LIMS_DEMO.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LIMSEntities : DbContext
    {
        public LIMSEntities()
            : base("name=LIMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<InventoryAssignedSerialNumberDetail> InventoryAssignedSerialNumberDetails { get; set; }
        public virtual DbSet<InventoryAssignmentDetail> InventoryAssignmentDetails { get; set; }
        public virtual DbSet<InventoryAssignmentMaster> InventoryAssignmentMasters { get; set; }
        public virtual DbSet<InventoryBasicDetail> InventoryBasicDetails { get; set; }
        public virtual DbSet<InventoryBasicItemDetail> InventoryBasicItemDetails { get; set; }
        public virtual DbSet<InventoryCapacityMaster> InventoryCapacityMasters { get; set; }
        public virtual DbSet<InventoryCategoryMaster> InventoryCategoryMasters { get; set; }
        public virtual DbSet<InventoryCommercialDetail> InventoryCommercialDetails { get; set; }
        public virtual DbSet<InventoryCommercialFileDetail> InventoryCommercialFileDetails { get; set; }
        public virtual DbSet<InventoryCurrentStock> InventoryCurrentStocks { get; set; }
        public virtual DbSet<InventoryItemIssueRequest> InventoryItemIssueRequests { get; set; }
        public virtual DbSet<InventoryItemIssueRequestDetail> InventoryItemIssueRequestDetails { get; set; }
        public virtual DbSet<InventoryItemMaster> InventoryItemMasters { get; set; }
        public virtual DbSet<InventoryItemOutward> InventoryItemOutwards { get; set; }
        public virtual DbSet<InventoryMaintainanceAndCalibration> InventoryMaintainanceAndCalibrations { get; set; }
        public virtual DbSet<InventoryMaintainanceAndCalibrationSchedule> InventoryMaintainanceAndCalibrationSchedules { get; set; }
        public virtual DbSet<InventoryMaintainanceAndCalibrationScheduleDate> InventoryMaintainanceAndCalibrationScheduleDates { get; set; }
        public virtual DbSet<InventoryMaintainanceAndCalibrationScheduleFile> InventoryMaintainanceAndCalibrationScheduleFiles { get; set; }
        public virtual DbSet<InventoryMaintAndCalibBreakDown> InventoryMaintAndCalibBreakDowns { get; set; }
        public virtual DbSet<InventoryPurchase> InventoryPurchases { get; set; }
        public virtual DbSet<InventoryPurchaseItem> InventoryPurchaseItems { get; set; }
        public virtual DbSet<InventoryPurchaseItemDetail> InventoryPurchaseItemDetails { get; set; }
        public virtual DbSet<InventoryStockDatewise> InventoryStockDatewises { get; set; }
        public virtual DbSet<InventoryTypeMaster> InventoryTypeMasters { get; set; }
        public virtual DbSet<InventoryVendorMaster> InventoryVendorMasters { get; set; }
        public virtual DbSet<Lims_DisposalCollection> Lims_DisposalCollection { get; set; }
        public virtual DbSet<Lims_IsFieldCombineResult> Lims_IsFieldCombineResult { get; set; }
        public virtual DbSet<Master_PurchaseUnitMaster> Master_PurchaseUnitMaster { get; set; }
        public virtual DbSet<PurchaseMasterDetail> PurchaseMasterDetails { get; set; }
        public virtual DbSet<PurchaseRecord> PurchaseRecords { get; set; }
        public virtual DbSet<PurchaseRequestDetail> PurchaseRequestDetails { get; set; }
        public virtual DbSet<PurchaseSupplierDetail> PurchaseSupplierDetails { get; set; }
        public virtual DbSet<SerialNumberMaster> SerialNumberMasters { get; set; }
        public virtual DbSet<SpareStock> SpareStocks { get; set; }
        public virtual DbSet<StockLogData> StockLogDatas { get; set; }
        public virtual DbSet<UnitMasterInventory> UnitMasterInventories { get; set; }
        public virtual DbSet<AnalysisProcessScheduleDetail> AnalysisProcessScheduleDetails { get; set; }
        public virtual DbSet<ARC> ARCs { get; set; }
        public virtual DbSet<Costing> Costings { get; set; }
        public virtual DbSet<EnquiryDetail> EnquiryDetails { get; set; }
        public virtual DbSet<EnquiryLog> EnquiryLogs { get; set; }
        public virtual DbSet<EnquiryMasterSampleType> EnquiryMasterSampleTypes { get; set; }
        public virtual DbSet<EnquiryParameterDetail> EnquiryParameterDetails { get; set; }
        public virtual DbSet<EnquirySampleDetail> EnquirySampleDetails { get; set; }
        public virtual DbSet<EnquiryStatu> EnquiryStatus { get; set; }
        public virtual DbSet<FDStack_ParameterData> FDStack_ParameterData { get; set; }
        public virtual DbSet<FDStackEmission> FDStackEmissions { get; set; }
        public virtual DbSet<FDStackEmission_Details> FDStackEmission_Details { get; set; }
        public virtual DbSet<FDStackEmission_GaseousData> FDStackEmission_GaseousData { get; set; }
        public virtual DbSet<FDStackEmission_IsoKinetic> FDStackEmission_IsoKinetic { get; set; }
        public virtual DbSet<FieldAmbientAirGasesSampling> FieldAmbientAirGasesSamplings { get; set; }
        public virtual DbSet<FieldAmbientAirMatterSize> FieldAmbientAirMatterSizes { get; set; }
        public virtual DbSet<FieldAmbientAirMonitoring> FieldAmbientAirMonitorings { get; set; }
        public virtual DbSet<FieldBuildingMaterial> FieldBuildingMaterials { get; set; }
        public virtual DbSet<FieldCoalCokeSolidFuel> FieldCoalCokeSolidFuels { get; set; }
        public virtual DbSet<FieldFoodAndAgriCulture> FieldFoodAndAgriCultures { get; set; }
        public virtual DbSet<FieldMicrobiologicalMonitoringOfAir> FieldMicrobiologicalMonitoringOfAirs { get; set; }
        public virtual DbSet<FieldNoiseLevelMonitoring> FieldNoiseLevelMonitorings { get; set; }
        public virtual DbSet<FieldNoiseLevelMonitoringParameter> FieldNoiseLevelMonitoringParameters { get; set; }
        public virtual DbSet<FieldNoiseSourceParameter> FieldNoiseSourceParameters { get; set; }
        public virtual DbSet<FieldSolidHazardousWasteSoilOil> FieldSolidHazardousWasteSoilOils { get; set; }
        public virtual DbSet<FieldWasteWater> FieldWasteWaters { get; set; }
        public virtual DbSet<FieldWorkplaceEnvironmentAndFugitiveEmission> FieldWorkplaceEnvironmentAndFugitiveEmissions { get; set; }
        public virtual DbSet<FieldWorkplaceGasSampling> FieldWorkplaceGasSamplings { get; set; }
        public virtual DbSet<LabDisciplineMapping> LabDisciplineMappings { get; set; }
        public virtual DbSet<LocationSampleCollection> LocationSampleCollections { get; set; }
        public virtual DbSet<MenuRoleBranchMapping> MenuRoleBranchMappings { get; set; }
        public virtual DbSet<MonthTotalDays1> MonthTotalDays1 { get; set; }
        public virtual DbSet<NotificationDetail> NotificationDetails { get; set; }
        public virtual DbSet<ParameterFormula> ParameterFormulas { get; set; }
        public virtual DbSet<ParameterGroupMaster> ParameterGroupMasters { get; set; }
        public virtual DbSet<ParameterMapping> ParameterMappings { get; set; }
        public virtual DbSet<PlannerByDiscipline> PlannerByDisciplines { get; set; }
        public virtual DbSet<PONumberCount> PONumberCounts { get; set; }
        public virtual DbSet<PurchaseTNC> PurchaseTNCs { get; set; }
        public virtual DbSet<QuantityPreservative> QuantityPreservatives { get; set; }
        public virtual DbSet<Quotation> Quotations { get; set; }
        public virtual DbSet<QuotationLog> QuotationLogs { get; set; }
        public virtual DbSet<QuotationNumber> QuotationNumbers { get; set; }
        public virtual DbSet<QuotationTNC> QuotationTNCs { get; set; }
        public virtual DbSet<ReportNumber> ReportNumbers { get; set; }
        public virtual DbSet<SampleCollection> SampleCollections { get; set; }
        public virtual DbSet<SampleCollectionDevice> SampleCollectionDevices { get; set; }
        public virtual DbSet<SampleCollectionProcedure> SampleCollectionProcedures { get; set; }
        public virtual DbSet<SampleLocation> SampleLocations { get; set; }
        public virtual DbSet<SampleNumber> SampleNumbers { get; set; }
        public virtual DbSet<SampleNumber_ReceiptIncharge> SampleNumber_ReceiptIncharge { get; set; }
        public virtual DbSet<SampleParameterFile> SampleParameterFiles { get; set; }
        public virtual DbSet<SampleParameterFormulaValue> SampleParameterFormulaValues { get; set; }
        public virtual DbSet<SampleParameterFormulaValuesTemp> SampleParameterFormulaValuesTemps { get; set; }
        public virtual DbSet<SampleParameterPlanning> SampleParameterPlannings { get; set; }
        public virtual DbSet<SolutionPreparationData> SolutionPreparationDatas { get; set; }
        public virtual DbSet<ULRNumber> ULRNumbers { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UserLab> UserLabs { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<WOMasterSampleCollectionDate> WOMasterSampleCollectionDates { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderSampleCollectionDate> WorkOrderSampleCollectionDates { get; set; }
        public virtual DbSet<BranchCategoryMaster> BranchCategoryMasters { get; set; }
        public virtual DbSet<CatagoryMaster> CatagoryMasters { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<CompanyRegistrationMaster> CompanyRegistrationMasters { get; set; }
        public virtual DbSet<CompanyTypeMaster> CompanyTypeMasters { get; set; }
        public virtual DbSet<CountryMaster> CountryMasters { get; set; }
        public virtual DbSet<CustomerGroupMaster> CustomerGroupMasters { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<CustomerTypeMaster> CustomerTypeMasters { get; set; }
        public virtual DbSet<DisciplineMaster> DisciplineMasters { get; set; }
        public virtual DbSet<EnquiryMaster> EnquiryMasters { get; set; }
        public virtual DbSet<EnvironmentalCondition> EnvironmentalConditions { get; set; }
        public virtual DbSet<FrequencyMaster> FrequencyMasters { get; set; }
        public virtual DbSet<ItemMaster> ItemMasters { get; set; }
        public virtual DbSet<LabFieldAndDiscipline> LabFieldAndDisciplines { get; set; }
        public virtual DbSet<LabMaster> LabMasters { get; set; }
        public virtual DbSet<LabTypeMaster> LabTypeMasters { get; set; }
        public virtual DbSet<MatrixMaster> MatrixMasters { get; set; }
        public virtual DbSet<MenuMaster> MenuMasters { get; set; }
        public virtual DbSet<ModeOfCommunication> ModeOfCommunications { get; set; }
        public virtual DbSet<ParameterMaster> ParameterMasters { get; set; }
        public virtual DbSet<ProcedureMaster> ProcedureMasters { get; set; }
        public virtual DbSet<ProductGroupMaster> ProductGroupMasters { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<SampleDescriptionMaster> SampleDescriptionMasters { get; set; }
        public virtual DbSet<SampleDeviceMaster> SampleDeviceMasters { get; set; }
        public virtual DbSet<SampleQtyMaster> SampleQtyMasters { get; set; }
        public virtual DbSet<SampleTypeMaster> SampleTypeMasters { get; set; }
        public virtual DbSet<SampleTypeProductMaster> SampleTypeProductMasters { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<StatusMaster> StatusMasters { get; set; }
        public virtual DbSet<SubGroupMaster> SubGroupMasters { get; set; }
        public virtual DbSet<TermsAndCondition> TermsAndConditions { get; set; }
        public virtual DbSet<TermsAndConditionsPurchase> TermsAndConditionsPurchases { get; set; }
        public virtual DbSet<TestMethod> TestMethods { get; set; }
        public virtual DbSet<UnitMaster> UnitMasters { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<InventoryPurchaseFileUpload> InventoryPurchaseFileUploads { get; set; }
    
        public virtual ObjectResult<Procedure_GetWOMasterData_Result> Procedure_GetWOMasterData(Nullable<int> parameterGroupId, Nullable<int> parameterMasterId, Nullable<long> analysisProcessScheduleDetailId)
        {
            var parameterGroupIdParameter = parameterGroupId.HasValue ?
                new ObjectParameter("ParameterGroupId", parameterGroupId) :
                new ObjectParameter("ParameterGroupId", typeof(int));
    
            var parameterMasterIdParameter = parameterMasterId.HasValue ?
                new ObjectParameter("ParameterMasterId", parameterMasterId) :
                new ObjectParameter("ParameterMasterId", typeof(int));
    
            var analysisProcessScheduleDetailIdParameter = analysisProcessScheduleDetailId.HasValue ?
                new ObjectParameter("analysisProcessScheduleDetailId", analysisProcessScheduleDetailId) :
                new ObjectParameter("analysisProcessScheduleDetailId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procedure_GetWOMasterData_Result>("Procedure_GetWOMasterData", parameterGroupIdParameter, parameterMasterIdParameter, analysisProcessScheduleDetailIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_CategoryMaster_Insert(string sCategoryName, Nullable<long> iInventoryTypeId, ObjectParameter iErrorCode, Nullable<bool> bIsActive, Nullable<long> iInsertedBy)
        {
            var sCategoryNameParameter = sCategoryName != null ?
                new ObjectParameter("sCategoryName", sCategoryName) :
                new ObjectParameter("sCategoryName", typeof(string));
    
            var iInventoryTypeIdParameter = iInventoryTypeId.HasValue ?
                new ObjectParameter("iInventoryTypeId", iInventoryTypeId) :
                new ObjectParameter("iInventoryTypeId", typeof(long));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_CategoryMaster_Insert", sCategoryNameParameter, iInventoryTypeIdParameter, iErrorCode, bIsActiveParameter, iInsertedByParameter);
        }
    
        public virtual ObjectResult<USP_CategoryMaster_Select_Result> USP_CategoryMaster_Select(Nullable<int> iCategoryId, Nullable<int> iInventoryTypeId, string sCategoryName, ObjectParameter iErrorCode, string sSortBy, Nullable<int> iStartRow, Nullable<int> iEndRow, string sMode)
        {
            var iCategoryIdParameter = iCategoryId.HasValue ?
                new ObjectParameter("iCategoryId", iCategoryId) :
                new ObjectParameter("iCategoryId", typeof(int));
    
            var iInventoryTypeIdParameter = iInventoryTypeId.HasValue ?
                new ObjectParameter("iInventoryTypeId", iInventoryTypeId) :
                new ObjectParameter("iInventoryTypeId", typeof(int));
    
            var sCategoryNameParameter = sCategoryName != null ?
                new ObjectParameter("sCategoryName", sCategoryName) :
                new ObjectParameter("sCategoryName", typeof(string));
    
            var sSortByParameter = sSortBy != null ?
                new ObjectParameter("sSortBy", sSortBy) :
                new ObjectParameter("sSortBy", typeof(string));
    
            var iStartRowParameter = iStartRow.HasValue ?
                new ObjectParameter("iStartRow", iStartRow) :
                new ObjectParameter("iStartRow", typeof(int));
    
            var iEndRowParameter = iEndRow.HasValue ?
                new ObjectParameter("iEndRow", iEndRow) :
                new ObjectParameter("iEndRow", typeof(int));
    
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CategoryMaster_Select_Result>("USP_CategoryMaster_Select", iCategoryIdParameter, iInventoryTypeIdParameter, sCategoryNameParameter, iErrorCode, sSortByParameter, iStartRowParameter, iEndRowParameter, sModeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_CategoryMaster_Update(string sCategoryName, Nullable<long> iInventoryTypeId, ObjectParameter iErrorCode, Nullable<int> iCategoryId, Nullable<bool> bIsActive, Nullable<long> iUpdatedBy)
        {
            var sCategoryNameParameter = sCategoryName != null ?
                new ObjectParameter("sCategoryName", sCategoryName) :
                new ObjectParameter("sCategoryName", typeof(string));
    
            var iInventoryTypeIdParameter = iInventoryTypeId.HasValue ?
                new ObjectParameter("iInventoryTypeId", iInventoryTypeId) :
                new ObjectParameter("iInventoryTypeId", typeof(long));
    
            var iCategoryIdParameter = iCategoryId.HasValue ?
                new ObjectParameter("iCategoryId", iCategoryId) :
                new ObjectParameter("iCategoryId", typeof(int));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_CategoryMaster_Update", sCategoryNameParameter, iInventoryTypeIdParameter, iErrorCode, iCategoryIdParameter, bIsActiveParameter, iUpdatedByParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_BDM_Result> USP_DashBoard_BDM(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_BDM_Result>("USP_DashBoard_BDM", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_Planner_Result> USP_DashBoard_Planner(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_Planner_Result>("USP_DashBoard_Planner", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_Sample_Result> USP_DashBoard_Sample(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_Sample_Result>("USP_DashBoard_Sample", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_SampleApprovedMonthWise_Result> USP_DashBoard_SampleApprovedMonthWise(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_SampleApprovedMonthWise_Result>("USP_DashBoard_SampleApprovedMonthWise", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_Sampler_Result> USP_DashBoard_Sampler(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_Sampler_Result>("USP_DashBoard_Sampler", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_SampleTestedMonthWise_Result> USP_DashBoard_SampleTestedMonthWise(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_SampleTestedMonthWise_Result>("USP_DashBoard_SampleTestedMonthWise", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_Select_Result> USP_DashBoard_Select(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_Select_Result>("USP_DashBoard_Select", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_STL_Result> USP_DashBoard_STL(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_STL_Result>("USP_DashBoard_STL", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_TotalPOAmountMonthWise_Result> USP_DashBoard_TotalPOAmountMonthWise(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_TotalPOAmountMonthWise_Result>("USP_DashBoard_TotalPOAmountMonthWise", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_TotalQuotationSentMonthWise_Result> USP_DashBoard_TotalQuotationSentMonthWise(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_TotalQuotationSentMonthWise_Result>("USP_DashBoard_TotalQuotationSentMonthWise", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_TotalSampleMonthWise_Result> USP_DashBoard_TotalSampleMonthWise(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_TotalSampleMonthWise_Result>("USP_DashBoard_TotalSampleMonthWise", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_TotalWO_Result> USP_DashBoard_TotalWO(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_TotalWO_Result>("USP_DashBoard_TotalWO", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<USP_DashBoard_WOExe_Result> USP_DashBoard_WOExe(string sMode, ObjectParameter iErrorCode, Nullable<System.DateTime> dtStartDate, Nullable<System.DateTime> dtEndDate)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var dtStartDateParameter = dtStartDate.HasValue ?
                new ObjectParameter("dtStartDate", dtStartDate) :
                new ObjectParameter("dtStartDate", typeof(System.DateTime));
    
            var dtEndDateParameter = dtEndDate.HasValue ?
                new ObjectParameter("dtEndDate", dtEndDate) :
                new ObjectParameter("dtEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DashBoard_WOExe_Result>("USP_DashBoard_WOExe", sModeParameter, iErrorCode, dtStartDateParameter, dtEndDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryAssignedSerialNumberDetails_Insert(ObjectParameter iID, ObjectParameter iErrorCode, Nullable<int> iInventoryAssignmentDetailsID, Nullable<int> iInventorySerialNumber, Nullable<int> iItemID)
        {
            var iInventoryAssignmentDetailsIDParameter = iInventoryAssignmentDetailsID.HasValue ?
                new ObjectParameter("iInventoryAssignmentDetailsID", iInventoryAssignmentDetailsID) :
                new ObjectParameter("iInventoryAssignmentDetailsID", typeof(int));
    
            var iInventorySerialNumberParameter = iInventorySerialNumber.HasValue ?
                new ObjectParameter("iInventorySerialNumber", iInventorySerialNumber) :
                new ObjectParameter("iInventorySerialNumber", typeof(int));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryAssignedSerialNumberDetails_Insert", iID, iErrorCode, iInventoryAssignmentDetailsIDParameter, iInventorySerialNumberParameter, iItemIDParameter);
        }
    
        public virtual ObjectResult<USP_InventoryAssignedSerialNumberDetails_Select_Result> USP_InventoryAssignedSerialNumberDetails_Select(string sMode, ObjectParameter iErrorCode, Nullable<int> iInventoryAssignmentDetailsID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var iInventoryAssignmentDetailsIDParameter = iInventoryAssignmentDetailsID.HasValue ?
                new ObjectParameter("iInventoryAssignmentDetailsID", iInventoryAssignmentDetailsID) :
                new ObjectParameter("iInventoryAssignmentDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryAssignedSerialNumberDetails_Select_Result>("USP_InventoryAssignedSerialNumberDetails_Select", sModeParameter, iErrorCode, iInventoryAssignmentDetailsIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryAssignedSerialNumberDetails_Update(Nullable<int> iID, Nullable<int> iItemID, Nullable<int> iInventorySerialNumber, Nullable<int> iInventoryAssignmentDetailsID, ObjectParameter iErrorCode)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(int));
    
            var iInventorySerialNumberParameter = iInventorySerialNumber.HasValue ?
                new ObjectParameter("iInventorySerialNumber", iInventorySerialNumber) :
                new ObjectParameter("iInventorySerialNumber", typeof(int));
    
            var iInventoryAssignmentDetailsIDParameter = iInventoryAssignmentDetailsID.HasValue ?
                new ObjectParameter("iInventoryAssignmentDetailsID", iInventoryAssignmentDetailsID) :
                new ObjectParameter("iInventoryAssignmentDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryAssignedSerialNumberDetails_Update", iIDParameter, iItemIDParameter, iInventorySerialNumberParameter, iInventoryAssignmentDetailsIDParameter, iErrorCode);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryAssignmentDetails_Insert(ObjectParameter iID, Nullable<int> iInventoryAssignmentMasterID, Nullable<int> iInventoryTypeID, Nullable<int> iInventoryItemID, Nullable<int> iInventorySerialNumber, Nullable<decimal> dRequestQuantity, Nullable<bool> bIsActive, Nullable<int> iInsertedBy, ObjectParameter iErrorCode)
        {
            var iInventoryAssignmentMasterIDParameter = iInventoryAssignmentMasterID.HasValue ?
                new ObjectParameter("iInventoryAssignmentMasterID", iInventoryAssignmentMasterID) :
                new ObjectParameter("iInventoryAssignmentMasterID", typeof(int));
    
            var iInventoryTypeIDParameter = iInventoryTypeID.HasValue ?
                new ObjectParameter("iInventoryTypeID", iInventoryTypeID) :
                new ObjectParameter("iInventoryTypeID", typeof(int));
    
            var iInventoryItemIDParameter = iInventoryItemID.HasValue ?
                new ObjectParameter("iInventoryItemID", iInventoryItemID) :
                new ObjectParameter("iInventoryItemID", typeof(int));
    
            var iInventorySerialNumberParameter = iInventorySerialNumber.HasValue ?
                new ObjectParameter("iInventorySerialNumber", iInventorySerialNumber) :
                new ObjectParameter("iInventorySerialNumber", typeof(int));
    
            var dRequestQuantityParameter = dRequestQuantity.HasValue ?
                new ObjectParameter("dRequestQuantity", dRequestQuantity) :
                new ObjectParameter("dRequestQuantity", typeof(decimal));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryAssignmentDetails_Insert", iID, iInventoryAssignmentMasterIDParameter, iInventoryTypeIDParameter, iInventoryItemIDParameter, iInventorySerialNumberParameter, dRequestQuantityParameter, bIsActiveParameter, iInsertedByParameter, iErrorCode);
        }
    
        public virtual ObjectResult<USP_InventoryAssignmentDetails_Select_Result> USP_InventoryAssignmentDetails_Select(string sMode, ObjectParameter iErrorCode, string sSortBy, string sSearch, string sSortOrder, Nullable<int> iStartRow, Nullable<int> iEndRow, Nullable<int> iID, Nullable<int> iInventoryAssignmentMasterID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var sSortByParameter = sSortBy != null ?
                new ObjectParameter("sSortBy", sSortBy) :
                new ObjectParameter("sSortBy", typeof(string));
    
            var sSearchParameter = sSearch != null ?
                new ObjectParameter("sSearch", sSearch) :
                new ObjectParameter("sSearch", typeof(string));
    
            var sSortOrderParameter = sSortOrder != null ?
                new ObjectParameter("sSortOrder", sSortOrder) :
                new ObjectParameter("sSortOrder", typeof(string));
    
            var iStartRowParameter = iStartRow.HasValue ?
                new ObjectParameter("iStartRow", iStartRow) :
                new ObjectParameter("iStartRow", typeof(int));
    
            var iEndRowParameter = iEndRow.HasValue ?
                new ObjectParameter("iEndRow", iEndRow) :
                new ObjectParameter("iEndRow", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iInventoryAssignmentMasterIDParameter = iInventoryAssignmentMasterID.HasValue ?
                new ObjectParameter("iInventoryAssignmentMasterID", iInventoryAssignmentMasterID) :
                new ObjectParameter("iInventoryAssignmentMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryAssignmentDetails_Select_Result>("USP_InventoryAssignmentDetails_Select", sModeParameter, iErrorCode, sSortByParameter, sSearchParameter, sSortOrderParameter, iStartRowParameter, iEndRowParameter, iIDParameter, iInventoryAssignmentMasterIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryAssignmentDetails_Update(Nullable<int> iID, Nullable<decimal> iAssignedQuantity, Nullable<decimal> iReturnQuantity, Nullable<int> iInventoryItemID, Nullable<int> iModifiedBy, ObjectParameter iErrorCode, string sMode)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iAssignedQuantityParameter = iAssignedQuantity.HasValue ?
                new ObjectParameter("iAssignedQuantity", iAssignedQuantity) :
                new ObjectParameter("iAssignedQuantity", typeof(decimal));
    
            var iReturnQuantityParameter = iReturnQuantity.HasValue ?
                new ObjectParameter("iReturnQuantity", iReturnQuantity) :
                new ObjectParameter("iReturnQuantity", typeof(decimal));
    
            var iInventoryItemIDParameter = iInventoryItemID.HasValue ?
                new ObjectParameter("iInventoryItemID", iInventoryItemID) :
                new ObjectParameter("iInventoryItemID", typeof(int));
    
            var iModifiedByParameter = iModifiedBy.HasValue ?
                new ObjectParameter("iModifiedBy", iModifiedBy) :
                new ObjectParameter("iModifiedBy", typeof(int));
    
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryAssignmentDetails_Update", iIDParameter, iAssignedQuantityParameter, iReturnQuantityParameter, iInventoryItemIDParameter, iModifiedByParameter, iErrorCode, sModeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryAssignmentMaster_Insert(ObjectParameter iID, Nullable<int> iAssigneeID, Nullable<int> iDepartmentID, Nullable<bool> bIsActive, Nullable<int> iInsertedBy, ObjectParameter iErrorCode)
        {
            var iAssigneeIDParameter = iAssigneeID.HasValue ?
                new ObjectParameter("iAssigneeID", iAssigneeID) :
                new ObjectParameter("iAssigneeID", typeof(int));
    
            var iDepartmentIDParameter = iDepartmentID.HasValue ?
                new ObjectParameter("iDepartmentID", iDepartmentID) :
                new ObjectParameter("iDepartmentID", typeof(int));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryAssignmentMaster_Insert", iID, iAssigneeIDParameter, iDepartmentIDParameter, bIsActiveParameter, iInsertedByParameter, iErrorCode);
        }
    
        public virtual ObjectResult<USP_InventoryAssignmentMaster_Select_Result> USP_InventoryAssignmentMaster_Select(string sMode, ObjectParameter iErrorCode, string sSortBy, string sSearch, string sSortOrder, Nullable<int> iStartRow, Nullable<int> iEndRow)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var sSortByParameter = sSortBy != null ?
                new ObjectParameter("sSortBy", sSortBy) :
                new ObjectParameter("sSortBy", typeof(string));
    
            var sSearchParameter = sSearch != null ?
                new ObjectParameter("sSearch", sSearch) :
                new ObjectParameter("sSearch", typeof(string));
    
            var sSortOrderParameter = sSortOrder != null ?
                new ObjectParameter("sSortOrder", sSortOrder) :
                new ObjectParameter("sSortOrder", typeof(string));
    
            var iStartRowParameter = iStartRow.HasValue ?
                new ObjectParameter("iStartRow", iStartRow) :
                new ObjectParameter("iStartRow", typeof(int));
    
            var iEndRowParameter = iEndRow.HasValue ?
                new ObjectParameter("iEndRow", iEndRow) :
                new ObjectParameter("iEndRow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryAssignmentMaster_Select_Result>("USP_InventoryAssignmentMaster_Select", sModeParameter, iErrorCode, sSortByParameter, sSearchParameter, sSortOrderParameter, iStartRowParameter, iEndRowParameter);
        }
    
        public virtual int USP_InventoryBasicDetails_Insert(ObjectParameter iID, Nullable<int> iItemID, Nullable<int> iTypeID, Nullable<int> iCategoryID, Nullable<int> iUnitID, string sQuantityType, Nullable<decimal> iQuantity, Nullable<int> iWarranty, Nullable<int> iInsertedBy, Nullable<int> iTotalQuantity, string sInventoryBasicDetailsNumber, string sManufacturer, Nullable<System.DateTime> dDOM, Nullable<System.DateTime> dDOE, string sGradeReceived, string sDeliveryTime, string sConditionOfPackaging, string sIntegrityOfPackaging, string sRemark, string sStorageLoccation, string sCertifiedConcentration, string sPraceability, string sBrandReceived, Nullable<int> iPurchaseRequestID)
        {
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(int));
    
            var iTypeIDParameter = iTypeID.HasValue ?
                new ObjectParameter("iTypeID", iTypeID) :
                new ObjectParameter("iTypeID", typeof(int));
    
            var iCategoryIDParameter = iCategoryID.HasValue ?
                new ObjectParameter("iCategoryID", iCategoryID) :
                new ObjectParameter("iCategoryID", typeof(int));
    
            var iUnitIDParameter = iUnitID.HasValue ?
                new ObjectParameter("iUnitID", iUnitID) :
                new ObjectParameter("iUnitID", typeof(int));
    
            var sQuantityTypeParameter = sQuantityType != null ?
                new ObjectParameter("sQuantityType", sQuantityType) :
                new ObjectParameter("sQuantityType", typeof(string));
    
            var iQuantityParameter = iQuantity.HasValue ?
                new ObjectParameter("iQuantity", iQuantity) :
                new ObjectParameter("iQuantity", typeof(decimal));
    
            var iWarrantyParameter = iWarranty.HasValue ?
                new ObjectParameter("iWarranty", iWarranty) :
                new ObjectParameter("iWarranty", typeof(int));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(int));
    
            var iTotalQuantityParameter = iTotalQuantity.HasValue ?
                new ObjectParameter("iTotalQuantity", iTotalQuantity) :
                new ObjectParameter("iTotalQuantity", typeof(int));
    
            var sInventoryBasicDetailsNumberParameter = sInventoryBasicDetailsNumber != null ?
                new ObjectParameter("sInventoryBasicDetailsNumber", sInventoryBasicDetailsNumber) :
                new ObjectParameter("sInventoryBasicDetailsNumber", typeof(string));
    
            var sManufacturerParameter = sManufacturer != null ?
                new ObjectParameter("sManufacturer", sManufacturer) :
                new ObjectParameter("sManufacturer", typeof(string));
    
            var dDOMParameter = dDOM.HasValue ?
                new ObjectParameter("dDOM", dDOM) :
                new ObjectParameter("dDOM", typeof(System.DateTime));
    
            var dDOEParameter = dDOE.HasValue ?
                new ObjectParameter("dDOE", dDOE) :
                new ObjectParameter("dDOE", typeof(System.DateTime));
    
            var sGradeReceivedParameter = sGradeReceived != null ?
                new ObjectParameter("sGradeReceived", sGradeReceived) :
                new ObjectParameter("sGradeReceived", typeof(string));
    
            var sDeliveryTimeParameter = sDeliveryTime != null ?
                new ObjectParameter("sDeliveryTime", sDeliveryTime) :
                new ObjectParameter("sDeliveryTime", typeof(string));
    
            var sConditionOfPackagingParameter = sConditionOfPackaging != null ?
                new ObjectParameter("sConditionOfPackaging", sConditionOfPackaging) :
                new ObjectParameter("sConditionOfPackaging", typeof(string));
    
            var sIntegrityOfPackagingParameter = sIntegrityOfPackaging != null ?
                new ObjectParameter("sIntegrityOfPackaging", sIntegrityOfPackaging) :
                new ObjectParameter("sIntegrityOfPackaging", typeof(string));
    
            var sRemarkParameter = sRemark != null ?
                new ObjectParameter("sRemark", sRemark) :
                new ObjectParameter("sRemark", typeof(string));
    
            var sStorageLoccationParameter = sStorageLoccation != null ?
                new ObjectParameter("sStorageLoccation", sStorageLoccation) :
                new ObjectParameter("sStorageLoccation", typeof(string));
    
            var sCertifiedConcentrationParameter = sCertifiedConcentration != null ?
                new ObjectParameter("sCertifiedConcentration", sCertifiedConcentration) :
                new ObjectParameter("sCertifiedConcentration", typeof(string));
    
            var sPraceabilityParameter = sPraceability != null ?
                new ObjectParameter("sPraceability", sPraceability) :
                new ObjectParameter("sPraceability", typeof(string));
    
            var sBrandReceivedParameter = sBrandReceived != null ?
                new ObjectParameter("sBrandReceived", sBrandReceived) :
                new ObjectParameter("sBrandReceived", typeof(string));
    
            var iPurchaseRequestIDParameter = iPurchaseRequestID.HasValue ?
                new ObjectParameter("iPurchaseRequestID", iPurchaseRequestID) :
                new ObjectParameter("iPurchaseRequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InventoryBasicDetails_Insert", iID, iItemIDParameter, iTypeIDParameter, iCategoryIDParameter, iUnitIDParameter, sQuantityTypeParameter, iQuantityParameter, iWarrantyParameter, iInsertedByParameter, iTotalQuantityParameter, sInventoryBasicDetailsNumberParameter, sManufacturerParameter, dDOMParameter, dDOEParameter, sGradeReceivedParameter, sDeliveryTimeParameter, sConditionOfPackagingParameter, sIntegrityOfPackagingParameter, sRemarkParameter, sStorageLoccationParameter, sCertifiedConcentrationParameter, sPraceabilityParameter, sBrandReceivedParameter, iPurchaseRequestIDParameter);
        }
    
        public virtual ObjectResult<USP_InventoryBasicDetails_Select_Result> USP_InventoryBasicDetails_Select(string sMode, ObjectParameter iRowCounter, string sSortBy, string sSearch, string sSortOrder, Nullable<int> iStartRow, Nullable<int> iEndRow, Nullable<int> iID, Nullable<int> iTypeID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var sSortByParameter = sSortBy != null ?
                new ObjectParameter("sSortBy", sSortBy) :
                new ObjectParameter("sSortBy", typeof(string));
    
            var sSearchParameter = sSearch != null ?
                new ObjectParameter("sSearch", sSearch) :
                new ObjectParameter("sSearch", typeof(string));
    
            var sSortOrderParameter = sSortOrder != null ?
                new ObjectParameter("sSortOrder", sSortOrder) :
                new ObjectParameter("sSortOrder", typeof(string));
    
            var iStartRowParameter = iStartRow.HasValue ?
                new ObjectParameter("iStartRow", iStartRow) :
                new ObjectParameter("iStartRow", typeof(int));
    
            var iEndRowParameter = iEndRow.HasValue ?
                new ObjectParameter("iEndRow", iEndRow) :
                new ObjectParameter("iEndRow", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iTypeIDParameter = iTypeID.HasValue ?
                new ObjectParameter("iTypeID", iTypeID) :
                new ObjectParameter("iTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryBasicDetails_Select_Result>("USP_InventoryBasicDetails_Select", sModeParameter, iRowCounter, sSortByParameter, sSearchParameter, sSortOrderParameter, iStartRowParameter, iEndRowParameter, iIDParameter, iTypeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryBasicDetails_Update(Nullable<int> iID, Nullable<int> iItemID, Nullable<int> iTypeID, Nullable<int> iCategoryID, Nullable<int> iUnitID, string sQuantityType, Nullable<decimal> iQuantity, Nullable<int> iWarranty, ObjectParameter iErrorCode, Nullable<int> iUpdatedBy, Nullable<int> iTotalQuantity, string sManufacturer, Nullable<System.DateTime> dDOM, Nullable<System.DateTime> dDOE, string sGradeReceived, string sDeliveryTime, string sConditionOfPackaging, string sIntegrityOfPackaging, string sCertifiedConcentration, string sPraceability, string sRemark, string sBrandReceived, string sStorageLocation)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(int));
    
            var iTypeIDParameter = iTypeID.HasValue ?
                new ObjectParameter("iTypeID", iTypeID) :
                new ObjectParameter("iTypeID", typeof(int));
    
            var iCategoryIDParameter = iCategoryID.HasValue ?
                new ObjectParameter("iCategoryID", iCategoryID) :
                new ObjectParameter("iCategoryID", typeof(int));
    
            var iUnitIDParameter = iUnitID.HasValue ?
                new ObjectParameter("iUnitID", iUnitID) :
                new ObjectParameter("iUnitID", typeof(int));
    
            var sQuantityTypeParameter = sQuantityType != null ?
                new ObjectParameter("sQuantityType", sQuantityType) :
                new ObjectParameter("sQuantityType", typeof(string));
    
            var iQuantityParameter = iQuantity.HasValue ?
                new ObjectParameter("iQuantity", iQuantity) :
                new ObjectParameter("iQuantity", typeof(decimal));
    
            var iWarrantyParameter = iWarranty.HasValue ?
                new ObjectParameter("iWarranty", iWarranty) :
                new ObjectParameter("iWarranty", typeof(int));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(int));
    
            var iTotalQuantityParameter = iTotalQuantity.HasValue ?
                new ObjectParameter("iTotalQuantity", iTotalQuantity) :
                new ObjectParameter("iTotalQuantity", typeof(int));
    
            var sManufacturerParameter = sManufacturer != null ?
                new ObjectParameter("sManufacturer", sManufacturer) :
                new ObjectParameter("sManufacturer", typeof(string));
    
            var dDOMParameter = dDOM.HasValue ?
                new ObjectParameter("dDOM", dDOM) :
                new ObjectParameter("dDOM", typeof(System.DateTime));
    
            var dDOEParameter = dDOE.HasValue ?
                new ObjectParameter("dDOE", dDOE) :
                new ObjectParameter("dDOE", typeof(System.DateTime));
    
            var sGradeReceivedParameter = sGradeReceived != null ?
                new ObjectParameter("sGradeReceived", sGradeReceived) :
                new ObjectParameter("sGradeReceived", typeof(string));
    
            var sDeliveryTimeParameter = sDeliveryTime != null ?
                new ObjectParameter("sDeliveryTime", sDeliveryTime) :
                new ObjectParameter("sDeliveryTime", typeof(string));
    
            var sConditionOfPackagingParameter = sConditionOfPackaging != null ?
                new ObjectParameter("sConditionOfPackaging", sConditionOfPackaging) :
                new ObjectParameter("sConditionOfPackaging", typeof(string));
    
            var sIntegrityOfPackagingParameter = sIntegrityOfPackaging != null ?
                new ObjectParameter("sIntegrityOfPackaging", sIntegrityOfPackaging) :
                new ObjectParameter("sIntegrityOfPackaging", typeof(string));
    
            var sCertifiedConcentrationParameter = sCertifiedConcentration != null ?
                new ObjectParameter("sCertifiedConcentration", sCertifiedConcentration) :
                new ObjectParameter("sCertifiedConcentration", typeof(string));
    
            var sPraceabilityParameter = sPraceability != null ?
                new ObjectParameter("sPraceability", sPraceability) :
                new ObjectParameter("sPraceability", typeof(string));
    
            var sRemarkParameter = sRemark != null ?
                new ObjectParameter("sRemark", sRemark) :
                new ObjectParameter("sRemark", typeof(string));
    
            var sBrandReceivedParameter = sBrandReceived != null ?
                new ObjectParameter("sBrandReceived", sBrandReceived) :
                new ObjectParameter("sBrandReceived", typeof(string));
    
            var sStorageLocationParameter = sStorageLocation != null ?
                new ObjectParameter("sStorageLocation", sStorageLocation) :
                new ObjectParameter("sStorageLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryBasicDetails_Update", iIDParameter, iItemIDParameter, iTypeIDParameter, iCategoryIDParameter, iUnitIDParameter, sQuantityTypeParameter, iQuantityParameter, iWarrantyParameter, iErrorCode, iUpdatedByParameter, iTotalQuantityParameter, sManufacturerParameter, dDOMParameter, dDOEParameter, sGradeReceivedParameter, sDeliveryTimeParameter, sConditionOfPackagingParameter, sIntegrityOfPackagingParameter, sCertifiedConcentrationParameter, sPraceabilityParameter, sRemarkParameter, sBrandReceivedParameter, sStorageLocationParameter);
        }
    
        public virtual int USP_InventoryBasicItemDetails_Delete(Nullable<int> iID, Nullable<int> iInventoryBasicDetailsID, ObjectParameter iErrorCode, Nullable<int> iUpdatedBy, ObjectParameter iErrorMessage)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(int));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InventoryBasicItemDetails_Delete", iIDParameter, iInventoryBasicDetailsIDParameter, iErrorCode, iUpdatedByParameter, iErrorMessage);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryBasicItemDetails_Insert(ObjectParameter iID, Nullable<int> iInventoryBasicDetailsID, string sBatchNumber, string sModelNumber, string sBarcodeNumber, Nullable<decimal> iQuantity, string sDescription, string sInventoryBasicItemDetailsNumber, ObjectParameter iErrorCode, Nullable<int> iInsertedBy, string sManufacturer, Nullable<System.DateTime> dDOM, Nullable<System.DateTime> dDOE, string sLOTNo, string sSRNO, Nullable<int> iPurchaseRequestID)
        {
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(int));
    
            var sBatchNumberParameter = sBatchNumber != null ?
                new ObjectParameter("sBatchNumber", sBatchNumber) :
                new ObjectParameter("sBatchNumber", typeof(string));
    
            var sModelNumberParameter = sModelNumber != null ?
                new ObjectParameter("sModelNumber", sModelNumber) :
                new ObjectParameter("sModelNumber", typeof(string));
    
            var sBarcodeNumberParameter = sBarcodeNumber != null ?
                new ObjectParameter("sBarcodeNumber", sBarcodeNumber) :
                new ObjectParameter("sBarcodeNumber", typeof(string));
    
            var iQuantityParameter = iQuantity.HasValue ?
                new ObjectParameter("iQuantity", iQuantity) :
                new ObjectParameter("iQuantity", typeof(decimal));
    
            var sDescriptionParameter = sDescription != null ?
                new ObjectParameter("sDescription", sDescription) :
                new ObjectParameter("sDescription", typeof(string));
    
            var sInventoryBasicItemDetailsNumberParameter = sInventoryBasicItemDetailsNumber != null ?
                new ObjectParameter("sInventoryBasicItemDetailsNumber", sInventoryBasicItemDetailsNumber) :
                new ObjectParameter("sInventoryBasicItemDetailsNumber", typeof(string));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(int));
    
            var sManufacturerParameter = sManufacturer != null ?
                new ObjectParameter("sManufacturer", sManufacturer) :
                new ObjectParameter("sManufacturer", typeof(string));
    
            var dDOMParameter = dDOM.HasValue ?
                new ObjectParameter("dDOM", dDOM) :
                new ObjectParameter("dDOM", typeof(System.DateTime));
    
            var dDOEParameter = dDOE.HasValue ?
                new ObjectParameter("dDOE", dDOE) :
                new ObjectParameter("dDOE", typeof(System.DateTime));
    
            var sLOTNoParameter = sLOTNo != null ?
                new ObjectParameter("sLOTNo", sLOTNo) :
                new ObjectParameter("sLOTNo", typeof(string));
    
            var sSRNOParameter = sSRNO != null ?
                new ObjectParameter("sSRNO", sSRNO) :
                new ObjectParameter("sSRNO", typeof(string));
    
            var iPurchaseRequestIDParameter = iPurchaseRequestID.HasValue ?
                new ObjectParameter("iPurchaseRequestID", iPurchaseRequestID) :
                new ObjectParameter("iPurchaseRequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryBasicItemDetails_Insert", iID, iInventoryBasicDetailsIDParameter, sBatchNumberParameter, sModelNumberParameter, sBarcodeNumberParameter, iQuantityParameter, sDescriptionParameter, sInventoryBasicItemDetailsNumberParameter, iErrorCode, iInsertedByParameter, sManufacturerParameter, dDOMParameter, dDOEParameter, sLOTNoParameter, sSRNOParameter, iPurchaseRequestIDParameter);
        }
    
        public virtual ObjectResult<USP_InventoryBasicItemDetails_Select_Result> USP_InventoryBasicItemDetails_Select(string sMode, ObjectParameter iErrorCode, Nullable<bool> bInventoryBasicDetailsIsActive, Nullable<bool> bInventoryBasicItemDetailsIsActive, Nullable<int> iInventoryBasicDetailsID, Nullable<int> iItemID, Nullable<int> iTypeID, Nullable<int> iCategoryID, Nullable<int> iID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var bInventoryBasicDetailsIsActiveParameter = bInventoryBasicDetailsIsActive.HasValue ?
                new ObjectParameter("bInventoryBasicDetailsIsActive", bInventoryBasicDetailsIsActive) :
                new ObjectParameter("bInventoryBasicDetailsIsActive", typeof(bool));
    
            var bInventoryBasicItemDetailsIsActiveParameter = bInventoryBasicItemDetailsIsActive.HasValue ?
                new ObjectParameter("bInventoryBasicItemDetailsIsActive", bInventoryBasicItemDetailsIsActive) :
                new ObjectParameter("bInventoryBasicItemDetailsIsActive", typeof(bool));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(int));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(int));
    
            var iTypeIDParameter = iTypeID.HasValue ?
                new ObjectParameter("iTypeID", iTypeID) :
                new ObjectParameter("iTypeID", typeof(int));
    
            var iCategoryIDParameter = iCategoryID.HasValue ?
                new ObjectParameter("iCategoryID", iCategoryID) :
                new ObjectParameter("iCategoryID", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryBasicItemDetails_Select_Result>("USP_InventoryBasicItemDetails_Select", sModeParameter, iErrorCode, bInventoryBasicDetailsIsActiveParameter, bInventoryBasicItemDetailsIsActiveParameter, iInventoryBasicDetailsIDParameter, iItemIDParameter, iTypeIDParameter, iCategoryIDParameter, iIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryBasicItemDetails_Update(Nullable<int> iID, Nullable<int> iInventoryBasicDetailsID, string sBatchNumber, string sModelNumber, string sBarcodeNumber, Nullable<decimal> iQuantity, string sDescription, string sInventoryBasicItemDetailsNumber, ObjectParameter iErrorCode, Nullable<int> iUpdatedBy, string sManufacturer, Nullable<System.DateTime> dDOM, string sLOTNo, string sSRNO, Nullable<System.DateTime> dDOE)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(int));
    
            var sBatchNumberParameter = sBatchNumber != null ?
                new ObjectParameter("sBatchNumber", sBatchNumber) :
                new ObjectParameter("sBatchNumber", typeof(string));
    
            var sModelNumberParameter = sModelNumber != null ?
                new ObjectParameter("sModelNumber", sModelNumber) :
                new ObjectParameter("sModelNumber", typeof(string));
    
            var sBarcodeNumberParameter = sBarcodeNumber != null ?
                new ObjectParameter("sBarcodeNumber", sBarcodeNumber) :
                new ObjectParameter("sBarcodeNumber", typeof(string));
    
            var iQuantityParameter = iQuantity.HasValue ?
                new ObjectParameter("iQuantity", iQuantity) :
                new ObjectParameter("iQuantity", typeof(decimal));
    
            var sDescriptionParameter = sDescription != null ?
                new ObjectParameter("sDescription", sDescription) :
                new ObjectParameter("sDescription", typeof(string));
    
            var sInventoryBasicItemDetailsNumberParameter = sInventoryBasicItemDetailsNumber != null ?
                new ObjectParameter("sInventoryBasicItemDetailsNumber", sInventoryBasicItemDetailsNumber) :
                new ObjectParameter("sInventoryBasicItemDetailsNumber", typeof(string));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(int));
    
            var sManufacturerParameter = sManufacturer != null ?
                new ObjectParameter("sManufacturer", sManufacturer) :
                new ObjectParameter("sManufacturer", typeof(string));
    
            var dDOMParameter = dDOM.HasValue ?
                new ObjectParameter("dDOM", dDOM) :
                new ObjectParameter("dDOM", typeof(System.DateTime));
    
            var sLOTNoParameter = sLOTNo != null ?
                new ObjectParameter("sLOTNo", sLOTNo) :
                new ObjectParameter("sLOTNo", typeof(string));
    
            var sSRNOParameter = sSRNO != null ?
                new ObjectParameter("sSRNO", sSRNO) :
                new ObjectParameter("sSRNO", typeof(string));
    
            var dDOEParameter = dDOE.HasValue ?
                new ObjectParameter("dDOE", dDOE) :
                new ObjectParameter("dDOE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryBasicItemDetails_Update", iIDParameter, iInventoryBasicDetailsIDParameter, sBatchNumberParameter, sModelNumberParameter, sBarcodeNumberParameter, iQuantityParameter, sDescriptionParameter, sInventoryBasicItemDetailsNumberParameter, iErrorCode, iUpdatedByParameter, sManufacturerParameter, dDOMParameter, sLOTNoParameter, sSRNOParameter, dDOEParameter);
        }
    
        public virtual ObjectResult<USP_InventoryCalibrationAndMaintenance_ByItemDetailsID_Result> USP_InventoryCalibrationAndMaintenance_ByItemDetailsID(string sMode, string sActionType, string sInventoryBasicItemDetailsNumber, Nullable<long> iItemID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var sActionTypeParameter = sActionType != null ?
                new ObjectParameter("sActionType", sActionType) :
                new ObjectParameter("sActionType", typeof(string));
    
            var sInventoryBasicItemDetailsNumberParameter = sInventoryBasicItemDetailsNumber != null ?
                new ObjectParameter("sInventoryBasicItemDetailsNumber", sInventoryBasicItemDetailsNumber) :
                new ObjectParameter("sInventoryBasicItemDetailsNumber", typeof(string));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryCalibrationAndMaintenance_ByItemDetailsID_Result>("USP_InventoryCalibrationAndMaintenance_ByItemDetailsID", sModeParameter, sActionTypeParameter, sInventoryBasicItemDetailsNumberParameter, iItemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryCapacityMaster_Active(Nullable<int> iInventoryCapacityMasterId, Nullable<bool> bIsActive, ObjectParameter iErrorCode, ObjectParameter iErrorMessage, Nullable<int> iUpdatedBy)
        {
            var iInventoryCapacityMasterIdParameter = iInventoryCapacityMasterId.HasValue ?
                new ObjectParameter("iInventoryCapacityMasterId", iInventoryCapacityMasterId) :
                new ObjectParameter("iInventoryCapacityMasterId", typeof(int));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryCapacityMaster_Active", iInventoryCapacityMasterIdParameter, bIsActiveParameter, iErrorCode, iErrorMessage, iUpdatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryCapacityMaster_Insert(ObjectParameter iInventoryCapacityMasterId, string sCapacity, ObjectParameter iErrorCode, string sDescription, Nullable<bool> bIsActive, Nullable<long> iInsertedBy)
        {
            var sCapacityParameter = sCapacity != null ?
                new ObjectParameter("sCapacity", sCapacity) :
                new ObjectParameter("sCapacity", typeof(string));
    
            var sDescriptionParameter = sDescription != null ?
                new ObjectParameter("sDescription", sDescription) :
                new ObjectParameter("sDescription", typeof(string));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryCapacityMaster_Insert", iInventoryCapacityMasterId, sCapacityParameter, iErrorCode, sDescriptionParameter, bIsActiveParameter, iInsertedByParameter);
        }
    
        public virtual ObjectResult<USP_InventoryCapacityMaster_Select_Result> USP_InventoryCapacityMaster_Select(Nullable<long> iInventoryCapacityMasterId, string sCapacity, string sDescription, ObjectParameter iErrorCode, string sSortBy, Nullable<int> iStartRow, Nullable<int> iEndRow, string sMode)
        {
            var iInventoryCapacityMasterIdParameter = iInventoryCapacityMasterId.HasValue ?
                new ObjectParameter("iInventoryCapacityMasterId", iInventoryCapacityMasterId) :
                new ObjectParameter("iInventoryCapacityMasterId", typeof(long));
    
            var sCapacityParameter = sCapacity != null ?
                new ObjectParameter("sCapacity", sCapacity) :
                new ObjectParameter("sCapacity", typeof(string));
    
            var sDescriptionParameter = sDescription != null ?
                new ObjectParameter("sDescription", sDescription) :
                new ObjectParameter("sDescription", typeof(string));
    
            var sSortByParameter = sSortBy != null ?
                new ObjectParameter("sSortBy", sSortBy) :
                new ObjectParameter("sSortBy", typeof(string));
    
            var iStartRowParameter = iStartRow.HasValue ?
                new ObjectParameter("iStartRow", iStartRow) :
                new ObjectParameter("iStartRow", typeof(int));
    
            var iEndRowParameter = iEndRow.HasValue ?
                new ObjectParameter("iEndRow", iEndRow) :
                new ObjectParameter("iEndRow", typeof(int));
    
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryCapacityMaster_Select_Result>("USP_InventoryCapacityMaster_Select", iInventoryCapacityMasterIdParameter, sCapacityParameter, sDescriptionParameter, iErrorCode, sSortByParameter, iStartRowParameter, iEndRowParameter, sModeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryCapacityMaster_Update(string sCapacity, string sDescription, ObjectParameter iErrorCode, Nullable<int> iInventoryCapacityMasterId, Nullable<bool> bIsActive, Nullable<long> iModifiedBy)
        {
            var sCapacityParameter = sCapacity != null ?
                new ObjectParameter("sCapacity", sCapacity) :
                new ObjectParameter("sCapacity", typeof(string));
    
            var sDescriptionParameter = sDescription != null ?
                new ObjectParameter("sDescription", sDescription) :
                new ObjectParameter("sDescription", typeof(string));
    
            var iInventoryCapacityMasterIdParameter = iInventoryCapacityMasterId.HasValue ?
                new ObjectParameter("iInventoryCapacityMasterId", iInventoryCapacityMasterId) :
                new ObjectParameter("iInventoryCapacityMasterId", typeof(int));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iModifiedByParameter = iModifiedBy.HasValue ?
                new ObjectParameter("iModifiedBy", iModifiedBy) :
                new ObjectParameter("iModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryCapacityMaster_Update", sCapacityParameter, sDescriptionParameter, iErrorCode, iInventoryCapacityMasterIdParameter, bIsActiveParameter, iModifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryCommercialDetails_Insert(string sVendorName, string bPurchaseOrderNumber, Nullable<decimal> bPurchaseOrderValue, Nullable<System.DateTime> bPurchaseDate, string bInvoiceNumber, ObjectParameter iErrorCode, ObjectParameter iID, Nullable<int> iInventoryBasicDetailsID, Nullable<int> iInsertedBy, string sDeliveryChallanNo, Nullable<System.DateTime> dtDeliveryChallanDate, Nullable<System.DateTime> dtBillDate, string sDeliveryTime)
        {
            var sVendorNameParameter = sVendorName != null ?
                new ObjectParameter("sVendorName", sVendorName) :
                new ObjectParameter("sVendorName", typeof(string));
    
            var bPurchaseOrderNumberParameter = bPurchaseOrderNumber != null ?
                new ObjectParameter("bPurchaseOrderNumber", bPurchaseOrderNumber) :
                new ObjectParameter("bPurchaseOrderNumber", typeof(string));
    
            var bPurchaseOrderValueParameter = bPurchaseOrderValue.HasValue ?
                new ObjectParameter("bPurchaseOrderValue", bPurchaseOrderValue) :
                new ObjectParameter("bPurchaseOrderValue", typeof(decimal));
    
            var bPurchaseDateParameter = bPurchaseDate.HasValue ?
                new ObjectParameter("bPurchaseDate", bPurchaseDate) :
                new ObjectParameter("bPurchaseDate", typeof(System.DateTime));
    
            var bInvoiceNumberParameter = bInvoiceNumber != null ?
                new ObjectParameter("bInvoiceNumber", bInvoiceNumber) :
                new ObjectParameter("bInvoiceNumber", typeof(string));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(int));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(int));
    
            var sDeliveryChallanNoParameter = sDeliveryChallanNo != null ?
                new ObjectParameter("sDeliveryChallanNo", sDeliveryChallanNo) :
                new ObjectParameter("sDeliveryChallanNo", typeof(string));
    
            var dtDeliveryChallanDateParameter = dtDeliveryChallanDate.HasValue ?
                new ObjectParameter("dtDeliveryChallanDate", dtDeliveryChallanDate) :
                new ObjectParameter("dtDeliveryChallanDate", typeof(System.DateTime));
    
            var dtBillDateParameter = dtBillDate.HasValue ?
                new ObjectParameter("dtBillDate", dtBillDate) :
                new ObjectParameter("dtBillDate", typeof(System.DateTime));
    
            var sDeliveryTimeParameter = sDeliveryTime != null ?
                new ObjectParameter("sDeliveryTime", sDeliveryTime) :
                new ObjectParameter("sDeliveryTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryCommercialDetails_Insert", sVendorNameParameter, bPurchaseOrderNumberParameter, bPurchaseOrderValueParameter, bPurchaseDateParameter, bInvoiceNumberParameter, iErrorCode, iID, iInventoryBasicDetailsIDParameter, iInsertedByParameter, sDeliveryChallanNoParameter, dtDeliveryChallanDateParameter, dtBillDateParameter, sDeliveryTimeParameter);
        }
    
        public virtual ObjectResult<USP_InventoryCommercialDetails_Select_Result> USP_InventoryCommercialDetails_Select(string sMode, ObjectParameter iErrorCode, Nullable<int> iInventoryBasicDetailsID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryCommercialDetails_Select_Result>("USP_InventoryCommercialDetails_Select", sModeParameter, iErrorCode, iInventoryBasicDetailsIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryCommercialDetails_Update(string sVendorName, string bPurchaseOrderNumber, Nullable<decimal> bPurchaseOrderValue, Nullable<System.DateTime> bPurchaseDate, string bInvoiceNumber, ObjectParameter iErrorCode, Nullable<int> iID, Nullable<int> iUpdatedBy, string sDeliveryChallanNo, Nullable<System.DateTime> dtDeliveryChallanDate, Nullable<System.DateTime> dtBillDate, string sDeliveryTime)
        {
            var sVendorNameParameter = sVendorName != null ?
                new ObjectParameter("sVendorName", sVendorName) :
                new ObjectParameter("sVendorName", typeof(string));
    
            var bPurchaseOrderNumberParameter = bPurchaseOrderNumber != null ?
                new ObjectParameter("bPurchaseOrderNumber", bPurchaseOrderNumber) :
                new ObjectParameter("bPurchaseOrderNumber", typeof(string));
    
            var bPurchaseOrderValueParameter = bPurchaseOrderValue.HasValue ?
                new ObjectParameter("bPurchaseOrderValue", bPurchaseOrderValue) :
                new ObjectParameter("bPurchaseOrderValue", typeof(decimal));
    
            var bPurchaseDateParameter = bPurchaseDate.HasValue ?
                new ObjectParameter("bPurchaseDate", bPurchaseDate) :
                new ObjectParameter("bPurchaseDate", typeof(System.DateTime));
    
            var bInvoiceNumberParameter = bInvoiceNumber != null ?
                new ObjectParameter("bInvoiceNumber", bInvoiceNumber) :
                new ObjectParameter("bInvoiceNumber", typeof(string));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(int));
    
            var sDeliveryChallanNoParameter = sDeliveryChallanNo != null ?
                new ObjectParameter("sDeliveryChallanNo", sDeliveryChallanNo) :
                new ObjectParameter("sDeliveryChallanNo", typeof(string));
    
            var dtDeliveryChallanDateParameter = dtDeliveryChallanDate.HasValue ?
                new ObjectParameter("dtDeliveryChallanDate", dtDeliveryChallanDate) :
                new ObjectParameter("dtDeliveryChallanDate", typeof(System.DateTime));
    
            var dtBillDateParameter = dtBillDate.HasValue ?
                new ObjectParameter("dtBillDate", dtBillDate) :
                new ObjectParameter("dtBillDate", typeof(System.DateTime));
    
            var sDeliveryTimeParameter = sDeliveryTime != null ?
                new ObjectParameter("sDeliveryTime", sDeliveryTime) :
                new ObjectParameter("sDeliveryTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryCommercialDetails_Update", sVendorNameParameter, bPurchaseOrderNumberParameter, bPurchaseOrderValueParameter, bPurchaseDateParameter, bInvoiceNumberParameter, iErrorCode, iIDParameter, iUpdatedByParameter, sDeliveryChallanNoParameter, dtDeliveryChallanDateParameter, dtBillDateParameter, sDeliveryTimeParameter);
        }
    
        public virtual ObjectResult<USP_InventoryCommercialFileDetail_Select_Result> USP_InventoryCommercialFileDetail_Select(string sMode, ObjectParameter iErrorCode, Nullable<long> iInventoryBasicDetailsID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryCommercialFileDetail_Select_Result>("USP_InventoryCommercialFileDetail_Select", sModeParameter, iErrorCode, iInventoryBasicDetailsIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryCommercialFileDetails_Insert(string sFileName, ObjectParameter iErrorCode, Nullable<int> iID, Nullable<int> iInventoryBasicDetailID)
        {
            var sFileNameParameter = sFileName != null ?
                new ObjectParameter("sFileName", sFileName) :
                new ObjectParameter("sFileName", typeof(string));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iInventoryBasicDetailIDParameter = iInventoryBasicDetailID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailID", iInventoryBasicDetailID) :
                new ObjectParameter("iInventoryBasicDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryCommercialFileDetails_Insert", sFileNameParameter, iErrorCode, iIDParameter, iInventoryBasicDetailIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryItemMaster_Active(Nullable<int> iID, Nullable<bool> bIsActive, ObjectParameter iErrorCode, ObjectParameter iErrorMessage, Nullable<int> iUpdatedBy)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryItemMaster_Active", iIDParameter, bIsActiveParameter, iErrorCode, iErrorMessage, iUpdatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryItemMaster_Insert(string sName, string sCode, Nullable<short> iCategoryID, Nullable<short> iInventoryTypeID, Nullable<short> iUnitID, Nullable<decimal> iMinimumStock, Nullable<bool> bIsActive, Nullable<short> iInsertedBy, ObjectParameter iID, ObjectParameter iErrorCode, ObjectParameter iErrorMessage, Nullable<long> iInventoryCapacityMasterId)
        {
            var sNameParameter = sName != null ?
                new ObjectParameter("sName", sName) :
                new ObjectParameter("sName", typeof(string));
    
            var sCodeParameter = sCode != null ?
                new ObjectParameter("sCode", sCode) :
                new ObjectParameter("sCode", typeof(string));
    
            var iCategoryIDParameter = iCategoryID.HasValue ?
                new ObjectParameter("iCategoryID", iCategoryID) :
                new ObjectParameter("iCategoryID", typeof(short));
    
            var iInventoryTypeIDParameter = iInventoryTypeID.HasValue ?
                new ObjectParameter("iInventoryTypeID", iInventoryTypeID) :
                new ObjectParameter("iInventoryTypeID", typeof(short));
    
            var iUnitIDParameter = iUnitID.HasValue ?
                new ObjectParameter("iUnitID", iUnitID) :
                new ObjectParameter("iUnitID", typeof(short));
    
            var iMinimumStockParameter = iMinimumStock.HasValue ?
                new ObjectParameter("iMinimumStock", iMinimumStock) :
                new ObjectParameter("iMinimumStock", typeof(decimal));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(short));
    
            var iInventoryCapacityMasterIdParameter = iInventoryCapacityMasterId.HasValue ?
                new ObjectParameter("iInventoryCapacityMasterId", iInventoryCapacityMasterId) :
                new ObjectParameter("iInventoryCapacityMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryItemMaster_Insert", sNameParameter, sCodeParameter, iCategoryIDParameter, iInventoryTypeIDParameter, iUnitIDParameter, iMinimumStockParameter, bIsActiveParameter, iInsertedByParameter, iID, iErrorCode, iErrorMessage, iInventoryCapacityMasterIdParameter);
        }
    
        public virtual ObjectResult<USP_InventoryItemMaster_Select_Result> USP_InventoryItemMaster_Select(Nullable<int> iID, Nullable<short> iInventoryCategoryMasterID, Nullable<short> iInventoryTypeMasterID, Nullable<bool> bInventoryItemMasterIsActive, Nullable<bool> bInventoryItemMasterIsDeleted, Nullable<bool> bInventoryCategoryMasterIsActive, Nullable<bool> bInventoryCategoryMasterIsDeleted, Nullable<bool> bInventoryTypeMasterIsActive, Nullable<bool> bInventoryTypeMasterIsDeleted, ObjectParameter iErrorCode, string sMode)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iInventoryCategoryMasterIDParameter = iInventoryCategoryMasterID.HasValue ?
                new ObjectParameter("iInventoryCategoryMasterID", iInventoryCategoryMasterID) :
                new ObjectParameter("iInventoryCategoryMasterID", typeof(short));
    
            var iInventoryTypeMasterIDParameter = iInventoryTypeMasterID.HasValue ?
                new ObjectParameter("iInventoryTypeMasterID", iInventoryTypeMasterID) :
                new ObjectParameter("iInventoryTypeMasterID", typeof(short));
    
            var bInventoryItemMasterIsActiveParameter = bInventoryItemMasterIsActive.HasValue ?
                new ObjectParameter("bInventoryItemMasterIsActive", bInventoryItemMasterIsActive) :
                new ObjectParameter("bInventoryItemMasterIsActive", typeof(bool));
    
            var bInventoryItemMasterIsDeletedParameter = bInventoryItemMasterIsDeleted.HasValue ?
                new ObjectParameter("bInventoryItemMasterIsDeleted", bInventoryItemMasterIsDeleted) :
                new ObjectParameter("bInventoryItemMasterIsDeleted", typeof(bool));
    
            var bInventoryCategoryMasterIsActiveParameter = bInventoryCategoryMasterIsActive.HasValue ?
                new ObjectParameter("bInventoryCategoryMasterIsActive", bInventoryCategoryMasterIsActive) :
                new ObjectParameter("bInventoryCategoryMasterIsActive", typeof(bool));
    
            var bInventoryCategoryMasterIsDeletedParameter = bInventoryCategoryMasterIsDeleted.HasValue ?
                new ObjectParameter("bInventoryCategoryMasterIsDeleted", bInventoryCategoryMasterIsDeleted) :
                new ObjectParameter("bInventoryCategoryMasterIsDeleted", typeof(bool));
    
            var bInventoryTypeMasterIsActiveParameter = bInventoryTypeMasterIsActive.HasValue ?
                new ObjectParameter("bInventoryTypeMasterIsActive", bInventoryTypeMasterIsActive) :
                new ObjectParameter("bInventoryTypeMasterIsActive", typeof(bool));
    
            var bInventoryTypeMasterIsDeletedParameter = bInventoryTypeMasterIsDeleted.HasValue ?
                new ObjectParameter("bInventoryTypeMasterIsDeleted", bInventoryTypeMasterIsDeleted) :
                new ObjectParameter("bInventoryTypeMasterIsDeleted", typeof(bool));
    
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryItemMaster_Select_Result>("USP_InventoryItemMaster_Select", iIDParameter, iInventoryCategoryMasterIDParameter, iInventoryTypeMasterIDParameter, bInventoryItemMasterIsActiveParameter, bInventoryItemMasterIsDeletedParameter, bInventoryCategoryMasterIsActiveParameter, bInventoryCategoryMasterIsDeletedParameter, bInventoryTypeMasterIsActiveParameter, bInventoryTypeMasterIsDeletedParameter, iErrorCode, sModeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryItemMaster_Update(string sName, string sCode, Nullable<short> iCategoryID, Nullable<short> iInventoryTypeID, Nullable<short> iUnitID, Nullable<decimal> iMinimumStock, Nullable<decimal> iAvailableStock, Nullable<short> iModifiedBy, Nullable<int> iID, Nullable<bool> bIsActive, ObjectParameter iErrorCode, ObjectParameter iErrorMessage, Nullable<long> iInventoryCapacityMasterId)
        {
            var sNameParameter = sName != null ?
                new ObjectParameter("sName", sName) :
                new ObjectParameter("sName", typeof(string));
    
            var sCodeParameter = sCode != null ?
                new ObjectParameter("sCode", sCode) :
                new ObjectParameter("sCode", typeof(string));
    
            var iCategoryIDParameter = iCategoryID.HasValue ?
                new ObjectParameter("iCategoryID", iCategoryID) :
                new ObjectParameter("iCategoryID", typeof(short));
    
            var iInventoryTypeIDParameter = iInventoryTypeID.HasValue ?
                new ObjectParameter("iInventoryTypeID", iInventoryTypeID) :
                new ObjectParameter("iInventoryTypeID", typeof(short));
    
            var iUnitIDParameter = iUnitID.HasValue ?
                new ObjectParameter("iUnitID", iUnitID) :
                new ObjectParameter("iUnitID", typeof(short));
    
            var iMinimumStockParameter = iMinimumStock.HasValue ?
                new ObjectParameter("iMinimumStock", iMinimumStock) :
                new ObjectParameter("iMinimumStock", typeof(decimal));
    
            var iAvailableStockParameter = iAvailableStock.HasValue ?
                new ObjectParameter("iAvailableStock", iAvailableStock) :
                new ObjectParameter("iAvailableStock", typeof(decimal));
    
            var iModifiedByParameter = iModifiedBy.HasValue ?
                new ObjectParameter("iModifiedBy", iModifiedBy) :
                new ObjectParameter("iModifiedBy", typeof(short));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInventoryCapacityMasterIdParameter = iInventoryCapacityMasterId.HasValue ?
                new ObjectParameter("iInventoryCapacityMasterId", iInventoryCapacityMasterId) :
                new ObjectParameter("iInventoryCapacityMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryItemMaster_Update", sNameParameter, sCodeParameter, iCategoryIDParameter, iInventoryTypeIDParameter, iUnitIDParameter, iMinimumStockParameter, iAvailableStockParameter, iModifiedByParameter, iIDParameter, bIsActiveParameter, iErrorCode, iErrorMessage, iInventoryCapacityMasterIdParameter);
        }
    
        public virtual int USP_InventoryMaintainanceAndCalibration_Insert(string sType, string sAuditor, string sCompletionStatus, Nullable<long> iInventoryBasicDetailsID, Nullable<long> iInventoryBasicItemDetailsID, Nullable<System.DateTime> daAuditDate, string sAuditObservations, string sActionTaken, Nullable<int> iItemID, Nullable<int> iInventoryMaintainanceAndCalibrationScheduleDatesID, ObjectParameter iID, Nullable<long> iInsertedBy, string sCalibratorName, Nullable<System.DateTime> daNextDate, Nullable<System.DateTime> daStartDate, Nullable<System.DateTime> daEndDate)
        {
            var sTypeParameter = sType != null ?
                new ObjectParameter("sType", sType) :
                new ObjectParameter("sType", typeof(string));
    
            var sAuditorParameter = sAuditor != null ?
                new ObjectParameter("sAuditor", sAuditor) :
                new ObjectParameter("sAuditor", typeof(string));
    
            var sCompletionStatusParameter = sCompletionStatus != null ?
                new ObjectParameter("sCompletionStatus", sCompletionStatus) :
                new ObjectParameter("sCompletionStatus", typeof(string));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(long));
    
            var iInventoryBasicItemDetailsIDParameter = iInventoryBasicItemDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicItemDetailsID", iInventoryBasicItemDetailsID) :
                new ObjectParameter("iInventoryBasicItemDetailsID", typeof(long));
    
            var daAuditDateParameter = daAuditDate.HasValue ?
                new ObjectParameter("daAuditDate", daAuditDate) :
                new ObjectParameter("daAuditDate", typeof(System.DateTime));
    
            var sAuditObservationsParameter = sAuditObservations != null ?
                new ObjectParameter("sAuditObservations", sAuditObservations) :
                new ObjectParameter("sAuditObservations", typeof(string));
    
            var sActionTakenParameter = sActionTaken != null ?
                new ObjectParameter("sActionTaken", sActionTaken) :
                new ObjectParameter("sActionTaken", typeof(string));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(int));
    
            var iInventoryMaintainanceAndCalibrationScheduleDatesIDParameter = iInventoryMaintainanceAndCalibrationScheduleDatesID.HasValue ?
                new ObjectParameter("iInventoryMaintainanceAndCalibrationScheduleDatesID", iInventoryMaintainanceAndCalibrationScheduleDatesID) :
                new ObjectParameter("iInventoryMaintainanceAndCalibrationScheduleDatesID", typeof(int));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(long));
    
            var sCalibratorNameParameter = sCalibratorName != null ?
                new ObjectParameter("sCalibratorName", sCalibratorName) :
                new ObjectParameter("sCalibratorName", typeof(string));
    
            var daNextDateParameter = daNextDate.HasValue ?
                new ObjectParameter("daNextDate", daNextDate) :
                new ObjectParameter("daNextDate", typeof(System.DateTime));
    
            var daStartDateParameter = daStartDate.HasValue ?
                new ObjectParameter("daStartDate", daStartDate) :
                new ObjectParameter("daStartDate", typeof(System.DateTime));
    
            var daEndDateParameter = daEndDate.HasValue ?
                new ObjectParameter("daEndDate", daEndDate) :
                new ObjectParameter("daEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InventoryMaintainanceAndCalibration_Insert", sTypeParameter, sAuditorParameter, sCompletionStatusParameter, iInventoryBasicDetailsIDParameter, iInventoryBasicItemDetailsIDParameter, daAuditDateParameter, sAuditObservationsParameter, sActionTakenParameter, iItemIDParameter, iInventoryMaintainanceAndCalibrationScheduleDatesIDParameter, iID, iInsertedByParameter, sCalibratorNameParameter, daNextDateParameter, daStartDateParameter, daEndDateParameter);
        }
    
        public virtual ObjectResult<USP_InventoryMaintainanceAndCalibration_Select_Result> USP_InventoryMaintainanceAndCalibration_Select(string sMode, ObjectParameter iErrorCode, string sType, Nullable<int> iItemID, Nullable<int> iID, Nullable<long> iInventoryBasicDetailsID, Nullable<long> iInventoryBasicItemDetailsID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("sType", sType) :
                new ObjectParameter("sType", typeof(string));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(long));
    
            var iInventoryBasicItemDetailsIDParameter = iInventoryBasicItemDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicItemDetailsID", iInventoryBasicItemDetailsID) :
                new ObjectParameter("iInventoryBasicItemDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryMaintainanceAndCalibration_Select_Result>("USP_InventoryMaintainanceAndCalibration_Select", sModeParameter, iErrorCode, sTypeParameter, iItemIDParameter, iIDParameter, iInventoryBasicDetailsIDParameter, iInventoryBasicItemDetailsIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryMaintainanceAndCalibration_Update(string sType, string sAuditor, string sCompletionStatus, Nullable<long> iInventoryBasicDetailsID, Nullable<long> iInventoryBasicItemDetailsID, Nullable<System.DateTime> daAuditDate, string sAuditObservations, string sActionTaken, Nullable<int> iItemID, Nullable<int> iInventoryMaintainanceAndCalibrationScheduleDatesID, Nullable<int> iID, Nullable<long> iUpdatedBy, string sCalibratorName, Nullable<System.DateTime> daNextDate, Nullable<System.DateTime> daStartDate, Nullable<System.DateTime> daEndDate, ObjectParameter iErrorCode)
        {
            var sTypeParameter = sType != null ?
                new ObjectParameter("sType", sType) :
                new ObjectParameter("sType", typeof(string));
    
            var sAuditorParameter = sAuditor != null ?
                new ObjectParameter("sAuditor", sAuditor) :
                new ObjectParameter("sAuditor", typeof(string));
    
            var sCompletionStatusParameter = sCompletionStatus != null ?
                new ObjectParameter("sCompletionStatus", sCompletionStatus) :
                new ObjectParameter("sCompletionStatus", typeof(string));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(long));
    
            var iInventoryBasicItemDetailsIDParameter = iInventoryBasicItemDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicItemDetailsID", iInventoryBasicItemDetailsID) :
                new ObjectParameter("iInventoryBasicItemDetailsID", typeof(long));
    
            var daAuditDateParameter = daAuditDate.HasValue ?
                new ObjectParameter("daAuditDate", daAuditDate) :
                new ObjectParameter("daAuditDate", typeof(System.DateTime));
    
            var sAuditObservationsParameter = sAuditObservations != null ?
                new ObjectParameter("sAuditObservations", sAuditObservations) :
                new ObjectParameter("sAuditObservations", typeof(string));
    
            var sActionTakenParameter = sActionTaken != null ?
                new ObjectParameter("sActionTaken", sActionTaken) :
                new ObjectParameter("sActionTaken", typeof(string));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(int));
    
            var iInventoryMaintainanceAndCalibrationScheduleDatesIDParameter = iInventoryMaintainanceAndCalibrationScheduleDatesID.HasValue ?
                new ObjectParameter("iInventoryMaintainanceAndCalibrationScheduleDatesID", iInventoryMaintainanceAndCalibrationScheduleDatesID) :
                new ObjectParameter("iInventoryMaintainanceAndCalibrationScheduleDatesID", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(long));
    
            var sCalibratorNameParameter = sCalibratorName != null ?
                new ObjectParameter("sCalibratorName", sCalibratorName) :
                new ObjectParameter("sCalibratorName", typeof(string));
    
            var daNextDateParameter = daNextDate.HasValue ?
                new ObjectParameter("daNextDate", daNextDate) :
                new ObjectParameter("daNextDate", typeof(System.DateTime));
    
            var daStartDateParameter = daStartDate.HasValue ?
                new ObjectParameter("daStartDate", daStartDate) :
                new ObjectParameter("daStartDate", typeof(System.DateTime));
    
            var daEndDateParameter = daEndDate.HasValue ?
                new ObjectParameter("daEndDate", daEndDate) :
                new ObjectParameter("daEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryMaintainanceAndCalibration_Update", sTypeParameter, sAuditorParameter, sCompletionStatusParameter, iInventoryBasicDetailsIDParameter, iInventoryBasicItemDetailsIDParameter, daAuditDateParameter, sAuditObservationsParameter, sActionTakenParameter, iItemIDParameter, iInventoryMaintainanceAndCalibrationScheduleDatesIDParameter, iIDParameter, iUpdatedByParameter, sCalibratorNameParameter, daNextDateParameter, daStartDateParameter, daEndDateParameter, iErrorCode);
        }
    
        public virtual int USP_InventoryMaintainanceAndCalibrationSchedule_Insert(Nullable<int> iInventoryBasicItemDetailsID, string sAMCVendorName, string sAMCNumber, Nullable<System.DateTime> daAMCDate, Nullable<System.DateTime> dtAMCStartDate, Nullable<decimal> iAMCValue, Nullable<short> iAMCPeriod, Nullable<short> iFrequency, string sType, ObjectParameter iID, Nullable<long> iInsertedBy)
        {
            var iInventoryBasicItemDetailsIDParameter = iInventoryBasicItemDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicItemDetailsID", iInventoryBasicItemDetailsID) :
                new ObjectParameter("iInventoryBasicItemDetailsID", typeof(int));
    
            var sAMCVendorNameParameter = sAMCVendorName != null ?
                new ObjectParameter("sAMCVendorName", sAMCVendorName) :
                new ObjectParameter("sAMCVendorName", typeof(string));
    
            var sAMCNumberParameter = sAMCNumber != null ?
                new ObjectParameter("sAMCNumber", sAMCNumber) :
                new ObjectParameter("sAMCNumber", typeof(string));
    
            var daAMCDateParameter = daAMCDate.HasValue ?
                new ObjectParameter("daAMCDate", daAMCDate) :
                new ObjectParameter("daAMCDate", typeof(System.DateTime));
    
            var dtAMCStartDateParameter = dtAMCStartDate.HasValue ?
                new ObjectParameter("dtAMCStartDate", dtAMCStartDate) :
                new ObjectParameter("dtAMCStartDate", typeof(System.DateTime));
    
            var iAMCValueParameter = iAMCValue.HasValue ?
                new ObjectParameter("iAMCValue", iAMCValue) :
                new ObjectParameter("iAMCValue", typeof(decimal));
    
            var iAMCPeriodParameter = iAMCPeriod.HasValue ?
                new ObjectParameter("iAMCPeriod", iAMCPeriod) :
                new ObjectParameter("iAMCPeriod", typeof(short));
    
            var iFrequencyParameter = iFrequency.HasValue ?
                new ObjectParameter("iFrequency", iFrequency) :
                new ObjectParameter("iFrequency", typeof(short));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("sType", sType) :
                new ObjectParameter("sType", typeof(string));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_InventoryMaintainanceAndCalibrationSchedule_Insert", iInventoryBasicItemDetailsIDParameter, sAMCVendorNameParameter, sAMCNumberParameter, daAMCDateParameter, dtAMCStartDateParameter, iAMCValueParameter, iAMCPeriodParameter, iFrequencyParameter, sTypeParameter, iID, iInsertedByParameter);
        }
    
        public virtual ObjectResult<USP_InventoryMaintainanceAndCalibrationSchedule_Select_Result> USP_InventoryMaintainanceAndCalibrationSchedule_Select(string sMode, ObjectParameter iErrorCode, string sType, Nullable<int> iInventoryBasicItemDetailsID)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("sType", sType) :
                new ObjectParameter("sType", typeof(string));
    
            var iInventoryBasicItemDetailsIDParameter = iInventoryBasicItemDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicItemDetailsID", iInventoryBasicItemDetailsID) :
                new ObjectParameter("iInventoryBasicItemDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryMaintainanceAndCalibrationSchedule_Select_Result>("USP_InventoryMaintainanceAndCalibrationSchedule_Select", sModeParameter, iErrorCode, sTypeParameter, iInventoryBasicItemDetailsIDParameter);
        }
    
        public virtual ObjectResult<USP_InventoryMaintainanceAndCalibrationScheduleDates_Select_Result> USP_InventoryMaintainanceAndCalibrationScheduleDates_Select(string sMode, ObjectParameter iErrorCode, Nullable<int> iInventoryMaintainanceAndCalibrationScheduleID, Nullable<int> iInventoryBasicItemDetailsID, string sAMCNumber, string sType, Nullable<int> iID, Nullable<bool> bInventoryMaintainanceAndCalibrationScheduleIsActive, Nullable<bool> bIsActive)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var iInventoryMaintainanceAndCalibrationScheduleIDParameter = iInventoryMaintainanceAndCalibrationScheduleID.HasValue ?
                new ObjectParameter("iInventoryMaintainanceAndCalibrationScheduleID", iInventoryMaintainanceAndCalibrationScheduleID) :
                new ObjectParameter("iInventoryMaintainanceAndCalibrationScheduleID", typeof(int));
    
            var iInventoryBasicItemDetailsIDParameter = iInventoryBasicItemDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicItemDetailsID", iInventoryBasicItemDetailsID) :
                new ObjectParameter("iInventoryBasicItemDetailsID", typeof(int));
    
            var sAMCNumberParameter = sAMCNumber != null ?
                new ObjectParameter("sAMCNumber", sAMCNumber) :
                new ObjectParameter("sAMCNumber", typeof(string));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("sType", sType) :
                new ObjectParameter("sType", typeof(string));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var bInventoryMaintainanceAndCalibrationScheduleIsActiveParameter = bInventoryMaintainanceAndCalibrationScheduleIsActive.HasValue ?
                new ObjectParameter("bInventoryMaintainanceAndCalibrationScheduleIsActive", bInventoryMaintainanceAndCalibrationScheduleIsActive) :
                new ObjectParameter("bInventoryMaintainanceAndCalibrationScheduleIsActive", typeof(bool));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryMaintainanceAndCalibrationScheduleDates_Select_Result>("USP_InventoryMaintainanceAndCalibrationScheduleDates_Select", sModeParameter, iErrorCode, iInventoryMaintainanceAndCalibrationScheduleIDParameter, iInventoryBasicItemDetailsIDParameter, sAMCNumberParameter, sTypeParameter, iIDParameter, bInventoryMaintainanceAndCalibrationScheduleIsActiveParameter, bIsActiveParameter);
        }
    
        public virtual ObjectResult<USP_InventoryMaintainanceAndCalibrationScheduleDates_Selection_Result> USP_InventoryMaintainanceAndCalibrationScheduleDates_Selection(string sMode, ObjectParameter iErrorCode, string sType, Nullable<int> iInventoryBasicDetailsID, string sCompletionStatus)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("sType", sType) :
                new ObjectParameter("sType", typeof(string));
    
            var iInventoryBasicDetailsIDParameter = iInventoryBasicDetailsID.HasValue ?
                new ObjectParameter("iInventoryBasicDetailsID", iInventoryBasicDetailsID) :
                new ObjectParameter("iInventoryBasicDetailsID", typeof(int));
    
            var sCompletionStatusParameter = sCompletionStatus != null ?
                new ObjectParameter("sCompletionStatus", sCompletionStatus) :
                new ObjectParameter("sCompletionStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryMaintainanceAndCalibrationScheduleDates_Selection_Result>("USP_InventoryMaintainanceAndCalibrationScheduleDates_Selection", sModeParameter, iErrorCode, sTypeParameter, iInventoryBasicDetailsIDParameter, sCompletionStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryMaintainanceAndCalibrationScheduleFiles_Insert(string sFileName, string sType, ObjectParameter iErrorCode, ObjectParameter iID, Nullable<int> iInventoryMaintainanceAndCalibrationScheduleID)
        {
            var sFileNameParameter = sFileName != null ?
                new ObjectParameter("sFileName", sFileName) :
                new ObjectParameter("sFileName", typeof(string));
    
            var sTypeParameter = sType != null ?
                new ObjectParameter("sType", sType) :
                new ObjectParameter("sType", typeof(string));
    
            var iInventoryMaintainanceAndCalibrationScheduleIDParameter = iInventoryMaintainanceAndCalibrationScheduleID.HasValue ?
                new ObjectParameter("iInventoryMaintainanceAndCalibrationScheduleID", iInventoryMaintainanceAndCalibrationScheduleID) :
                new ObjectParameter("iInventoryMaintainanceAndCalibrationScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryMaintainanceAndCalibrationScheduleFiles_Insert", sFileNameParameter, sTypeParameter, iErrorCode, iID, iInventoryMaintainanceAndCalibrationScheduleIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryPurchase_Insert(ObjectParameter iID, Nullable<int> iVendorID, string sPurchaseOrderNumber, Nullable<System.DateTime> sPurchaseOrderDate, Nullable<decimal> sPurchaseOrderAmount, Nullable<System.DateTime> sDateOfPurchase, string sInvoiceNumber, Nullable<short> iInsertedBy, ObjectParameter iErrorCode)
        {
            var iVendorIDParameter = iVendorID.HasValue ?
                new ObjectParameter("iVendorID", iVendorID) :
                new ObjectParameter("iVendorID", typeof(int));
    
            var sPurchaseOrderNumberParameter = sPurchaseOrderNumber != null ?
                new ObjectParameter("sPurchaseOrderNumber", sPurchaseOrderNumber) :
                new ObjectParameter("sPurchaseOrderNumber", typeof(string));
    
            var sPurchaseOrderDateParameter = sPurchaseOrderDate.HasValue ?
                new ObjectParameter("sPurchaseOrderDate", sPurchaseOrderDate) :
                new ObjectParameter("sPurchaseOrderDate", typeof(System.DateTime));
    
            var sPurchaseOrderAmountParameter = sPurchaseOrderAmount.HasValue ?
                new ObjectParameter("sPurchaseOrderAmount", sPurchaseOrderAmount) :
                new ObjectParameter("sPurchaseOrderAmount", typeof(decimal));
    
            var sDateOfPurchaseParameter = sDateOfPurchase.HasValue ?
                new ObjectParameter("sDateOfPurchase", sDateOfPurchase) :
                new ObjectParameter("sDateOfPurchase", typeof(System.DateTime));
    
            var sInvoiceNumberParameter = sInvoiceNumber != null ?
                new ObjectParameter("sInvoiceNumber", sInvoiceNumber) :
                new ObjectParameter("sInvoiceNumber", typeof(string));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryPurchase_Insert", iID, iVendorIDParameter, sPurchaseOrderNumberParameter, sPurchaseOrderDateParameter, sPurchaseOrderAmountParameter, sDateOfPurchaseParameter, sInvoiceNumberParameter, iInsertedByParameter, iErrorCode);
        }
    
        public virtual ObjectResult<USP_InventoryPurchase_Select_Result> USP_InventoryPurchase_Select(ObjectParameter iErrorCode, string sMode, Nullable<System.DateTime> daPurchaseOrderFromDate, Nullable<System.DateTime> daPurchaseOrderToDate, Nullable<System.DateTime> daPurchaseFromDate, Nullable<System.DateTime> daPurchaseToDate, Nullable<int> iID, Nullable<int> iVendorID, Nullable<bool> bInventoryPurchaseIsActive, Nullable<bool> bInventoryPurchaseIsDeleted, Nullable<bool> bInventoryVendorMasterIsActive, Nullable<bool> bInventoryVendorMasterIsDeleted)
        {
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            var daPurchaseOrderFromDateParameter = daPurchaseOrderFromDate.HasValue ?
                new ObjectParameter("daPurchaseOrderFromDate", daPurchaseOrderFromDate) :
                new ObjectParameter("daPurchaseOrderFromDate", typeof(System.DateTime));
    
            var daPurchaseOrderToDateParameter = daPurchaseOrderToDate.HasValue ?
                new ObjectParameter("daPurchaseOrderToDate", daPurchaseOrderToDate) :
                new ObjectParameter("daPurchaseOrderToDate", typeof(System.DateTime));
    
            var daPurchaseFromDateParameter = daPurchaseFromDate.HasValue ?
                new ObjectParameter("daPurchaseFromDate", daPurchaseFromDate) :
                new ObjectParameter("daPurchaseFromDate", typeof(System.DateTime));
    
            var daPurchaseToDateParameter = daPurchaseToDate.HasValue ?
                new ObjectParameter("daPurchaseToDate", daPurchaseToDate) :
                new ObjectParameter("daPurchaseToDate", typeof(System.DateTime));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var iVendorIDParameter = iVendorID.HasValue ?
                new ObjectParameter("iVendorID", iVendorID) :
                new ObjectParameter("iVendorID", typeof(int));
    
            var bInventoryPurchaseIsActiveParameter = bInventoryPurchaseIsActive.HasValue ?
                new ObjectParameter("bInventoryPurchaseIsActive", bInventoryPurchaseIsActive) :
                new ObjectParameter("bInventoryPurchaseIsActive", typeof(bool));
    
            var bInventoryPurchaseIsDeletedParameter = bInventoryPurchaseIsDeleted.HasValue ?
                new ObjectParameter("bInventoryPurchaseIsDeleted", bInventoryPurchaseIsDeleted) :
                new ObjectParameter("bInventoryPurchaseIsDeleted", typeof(bool));
    
            var bInventoryVendorMasterIsActiveParameter = bInventoryVendorMasterIsActive.HasValue ?
                new ObjectParameter("bInventoryVendorMasterIsActive", bInventoryVendorMasterIsActive) :
                new ObjectParameter("bInventoryVendorMasterIsActive", typeof(bool));
    
            var bInventoryVendorMasterIsDeletedParameter = bInventoryVendorMasterIsDeleted.HasValue ?
                new ObjectParameter("bInventoryVendorMasterIsDeleted", bInventoryVendorMasterIsDeleted) :
                new ObjectParameter("bInventoryVendorMasterIsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryPurchase_Select_Result>("USP_InventoryPurchase_Select", iErrorCode, sModeParameter, daPurchaseOrderFromDateParameter, daPurchaseOrderToDateParameter, daPurchaseFromDateParameter, daPurchaseToDateParameter, iIDParameter, iVendorIDParameter, bInventoryPurchaseIsActiveParameter, bInventoryPurchaseIsDeletedParameter, bInventoryVendorMasterIsActiveParameter, bInventoryVendorMasterIsDeletedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryTypeMaster_Insert(string sInventoryTypeName, ObjectParameter iErrorCode, string sDescription, Nullable<bool> bIsActive, Nullable<long> iInsertedBy)
        {
            var sInventoryTypeNameParameter = sInventoryTypeName != null ?
                new ObjectParameter("sInventoryTypeName", sInventoryTypeName) :
                new ObjectParameter("sInventoryTypeName", typeof(string));
    
            var sDescriptionParameter = sDescription != null ?
                new ObjectParameter("sDescription", sDescription) :
                new ObjectParameter("sDescription", typeof(string));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryTypeMaster_Insert", sInventoryTypeNameParameter, iErrorCode, sDescriptionParameter, bIsActiveParameter, iInsertedByParameter);
        }
    
        public virtual ObjectResult<USP_InventoryTypeMaster_Select_Result> USP_InventoryTypeMaster_Select(string sInventoryTypeName, Nullable<int> iInventoryTypeId, string sDescription, ObjectParameter iErrorCode, string sSortBy, Nullable<int> iStartRow, Nullable<int> iEndRow, string sMode)
        {
            var sInventoryTypeNameParameter = sInventoryTypeName != null ?
                new ObjectParameter("sInventoryTypeName", sInventoryTypeName) :
                new ObjectParameter("sInventoryTypeName", typeof(string));
    
            var iInventoryTypeIdParameter = iInventoryTypeId.HasValue ?
                new ObjectParameter("iInventoryTypeId", iInventoryTypeId) :
                new ObjectParameter("iInventoryTypeId", typeof(int));
    
            var sDescriptionParameter = sDescription != null ?
                new ObjectParameter("sDescription", sDescription) :
                new ObjectParameter("sDescription", typeof(string));
    
            var sSortByParameter = sSortBy != null ?
                new ObjectParameter("sSortBy", sSortBy) :
                new ObjectParameter("sSortBy", typeof(string));
    
            var iStartRowParameter = iStartRow.HasValue ?
                new ObjectParameter("iStartRow", iStartRow) :
                new ObjectParameter("iStartRow", typeof(int));
    
            var iEndRowParameter = iEndRow.HasValue ?
                new ObjectParameter("iEndRow", iEndRow) :
                new ObjectParameter("iEndRow", typeof(int));
    
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryTypeMaster_Select_Result>("USP_InventoryTypeMaster_Select", sInventoryTypeNameParameter, iInventoryTypeIdParameter, sDescriptionParameter, iErrorCode, sSortByParameter, iStartRowParameter, iEndRowParameter, sModeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryTypeMaster_Update(string sInventoryTypeName, string sDescription, ObjectParameter iErrorCode, Nullable<int> iInventoryTypeId, Nullable<bool> bIsActive, Nullable<long> iUpdatedBy)
        {
            var sInventoryTypeNameParameter = sInventoryTypeName != null ?
                new ObjectParameter("sInventoryTypeName", sInventoryTypeName) :
                new ObjectParameter("sInventoryTypeName", typeof(string));
    
            var sDescriptionParameter = sDescription != null ?
                new ObjectParameter("sDescription", sDescription) :
                new ObjectParameter("sDescription", typeof(string));
    
            var iInventoryTypeIdParameter = iInventoryTypeId.HasValue ?
                new ObjectParameter("iInventoryTypeId", iInventoryTypeId) :
                new ObjectParameter("iInventoryTypeId", typeof(int));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryTypeMaster_Update", sInventoryTypeNameParameter, sDescriptionParameter, iErrorCode, iInventoryTypeIdParameter, bIsActiveParameter, iUpdatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryVendorMaster_Insert(ObjectParameter iID, string sName, string sAddress, string sMobileNumber, string sPhoneNumber, string sEmailAddress, Nullable<bool> bIsActive, Nullable<short> iInsertedBy, ObjectParameter iErrorCode)
        {
            var sNameParameter = sName != null ?
                new ObjectParameter("sName", sName) :
                new ObjectParameter("sName", typeof(string));
    
            var sAddressParameter = sAddress != null ?
                new ObjectParameter("sAddress", sAddress) :
                new ObjectParameter("sAddress", typeof(string));
    
            var sMobileNumberParameter = sMobileNumber != null ?
                new ObjectParameter("sMobileNumber", sMobileNumber) :
                new ObjectParameter("sMobileNumber", typeof(string));
    
            var sPhoneNumberParameter = sPhoneNumber != null ?
                new ObjectParameter("sPhoneNumber", sPhoneNumber) :
                new ObjectParameter("sPhoneNumber", typeof(string));
    
            var sEmailAddressParameter = sEmailAddress != null ?
                new ObjectParameter("sEmailAddress", sEmailAddress) :
                new ObjectParameter("sEmailAddress", typeof(string));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryVendorMaster_Insert", iID, sNameParameter, sAddressParameter, sMobileNumberParameter, sPhoneNumberParameter, sEmailAddressParameter, bIsActiveParameter, iInsertedByParameter, iErrorCode);
        }
    
        public virtual ObjectResult<USP_InventoryVendorMaster_Select_Result> USP_InventoryVendorMaster_Select(Nullable<int> iID, Nullable<bool> bIsActive, Nullable<bool> bIsDeleted, ObjectParameter iErrorCode, string sMode)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var bIsDeletedParameter = bIsDeleted.HasValue ?
                new ObjectParameter("bIsDeleted", bIsDeleted) :
                new ObjectParameter("bIsDeleted", typeof(bool));
    
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_InventoryVendorMaster_Select_Result>("USP_InventoryVendorMaster_Select", iIDParameter, bIsActiveParameter, bIsDeletedParameter, iErrorCode, sModeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_InventoryVendorMaster_Update(Nullable<int> iID, string sName, string sAddress, string sMobileNumber, string sPhoneNumber, string sEmailAddress, Nullable<short> iModifiedBy, ObjectParameter iErrorCode)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            var sNameParameter = sName != null ?
                new ObjectParameter("sName", sName) :
                new ObjectParameter("sName", typeof(string));
    
            var sAddressParameter = sAddress != null ?
                new ObjectParameter("sAddress", sAddress) :
                new ObjectParameter("sAddress", typeof(string));
    
            var sMobileNumberParameter = sMobileNumber != null ?
                new ObjectParameter("sMobileNumber", sMobileNumber) :
                new ObjectParameter("sMobileNumber", typeof(string));
    
            var sPhoneNumberParameter = sPhoneNumber != null ?
                new ObjectParameter("sPhoneNumber", sPhoneNumber) :
                new ObjectParameter("sPhoneNumber", typeof(string));
    
            var sEmailAddressParameter = sEmailAddress != null ?
                new ObjectParameter("sEmailAddress", sEmailAddress) :
                new ObjectParameter("sEmailAddress", typeof(string));
    
            var iModifiedByParameter = iModifiedBy.HasValue ?
                new ObjectParameter("iModifiedBy", iModifiedBy) :
                new ObjectParameter("iModifiedBy", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_InventoryVendorMaster_Update", iIDParameter, sNameParameter, sAddressParameter, sMobileNumberParameter, sPhoneNumberParameter, sEmailAddressParameter, iModifiedByParameter, iErrorCode);
        }
    
        public virtual int USP_StockLogData_Insert(Nullable<long> iIssueToNameID, Nullable<System.DateTime> dtIssueDate, Nullable<int> iIssueQty, Nullable<long> iItemID, Nullable<bool> bIsActive, Nullable<long> iInsertedBy, Nullable<System.DateTime> dtInsertedTime, Nullable<long> iAvailableStock, ObjectParameter iErrorMessage)
        {
            var iIssueToNameIDParameter = iIssueToNameID.HasValue ?
                new ObjectParameter("iIssueToNameID", iIssueToNameID) :
                new ObjectParameter("iIssueToNameID", typeof(long));
    
            var dtIssueDateParameter = dtIssueDate.HasValue ?
                new ObjectParameter("dtIssueDate", dtIssueDate) :
                new ObjectParameter("dtIssueDate", typeof(System.DateTime));
    
            var iIssueQtyParameter = iIssueQty.HasValue ?
                new ObjectParameter("iIssueQty", iIssueQty) :
                new ObjectParameter("iIssueQty", typeof(int));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(long));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(long));
    
            var dtInsertedTimeParameter = dtInsertedTime.HasValue ?
                new ObjectParameter("dtInsertedTime", dtInsertedTime) :
                new ObjectParameter("dtInsertedTime", typeof(System.DateTime));
    
            var iAvailableStockParameter = iAvailableStock.HasValue ?
                new ObjectParameter("iAvailableStock", iAvailableStock) :
                new ObjectParameter("iAvailableStock", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_StockLogData_Insert", iIssueToNameIDParameter, dtIssueDateParameter, iIssueQtyParameter, iItemIDParameter, bIsActiveParameter, iInsertedByParameter, dtInsertedTimeParameter, iAvailableStockParameter, iErrorMessage);
        }
    
        public virtual ObjectResult<USP_StockLogData_Select_Result> USP_StockLogData_Select(ObjectParameter iID, Nullable<long> iIssueToNameID, Nullable<System.DateTime> dtIssueDate, Nullable<int> iIssueQty, Nullable<long> iItemID, Nullable<bool> bIsActive, Nullable<long> iInsertedBy, Nullable<long> iUpdatedBy, Nullable<System.DateTime> dtInsertedTime, ObjectParameter iErrorCode, string sSortBy, Nullable<int> iStartRow, Nullable<int> iEndRow, string sMode)
        {
            var iIssueToNameIDParameter = iIssueToNameID.HasValue ?
                new ObjectParameter("iIssueToNameID", iIssueToNameID) :
                new ObjectParameter("iIssueToNameID", typeof(long));
    
            var dtIssueDateParameter = dtIssueDate.HasValue ?
                new ObjectParameter("dtIssueDate", dtIssueDate) :
                new ObjectParameter("dtIssueDate", typeof(System.DateTime));
    
            var iIssueQtyParameter = iIssueQty.HasValue ?
                new ObjectParameter("iIssueQty", iIssueQty) :
                new ObjectParameter("iIssueQty", typeof(int));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(long));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(long));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(long));
    
            var dtInsertedTimeParameter = dtInsertedTime.HasValue ?
                new ObjectParameter("dtInsertedTime", dtInsertedTime) :
                new ObjectParameter("dtInsertedTime", typeof(System.DateTime));
    
            var sSortByParameter = sSortBy != null ?
                new ObjectParameter("sSortBy", sSortBy) :
                new ObjectParameter("sSortBy", typeof(string));
    
            var iStartRowParameter = iStartRow.HasValue ?
                new ObjectParameter("iStartRow", iStartRow) :
                new ObjectParameter("iStartRow", typeof(int));
    
            var iEndRowParameter = iEndRow.HasValue ?
                new ObjectParameter("iEndRow", iEndRow) :
                new ObjectParameter("iEndRow", typeof(int));
    
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_StockLogData_Select_Result>("USP_StockLogData_Select", iID, iIssueToNameIDParameter, dtIssueDateParameter, iIssueQtyParameter, iItemIDParameter, bIsActiveParameter, iInsertedByParameter, iUpdatedByParameter, dtInsertedTimeParameter, iErrorCode, sSortByParameter, iStartRowParameter, iEndRowParameter, sModeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_StockLogData_Update(ObjectParameter iID, Nullable<long> iIssueToNameID, Nullable<System.DateTime> dtIssueDate, Nullable<int> iIssueQty, Nullable<long> iItemID, Nullable<bool> bIsActive, Nullable<long> iInsertedBy, Nullable<long> iUpdatedBy, Nullable<System.DateTime> dtInsertedTime, ObjectParameter iErrorCode, ObjectParameter iErrorMessage)
        {
            var iIssueToNameIDParameter = iIssueToNameID.HasValue ?
                new ObjectParameter("iIssueToNameID", iIssueToNameID) :
                new ObjectParameter("iIssueToNameID", typeof(long));
    
            var dtIssueDateParameter = dtIssueDate.HasValue ?
                new ObjectParameter("dtIssueDate", dtIssueDate) :
                new ObjectParameter("dtIssueDate", typeof(System.DateTime));
    
            var iIssueQtyParameter = iIssueQty.HasValue ?
                new ObjectParameter("iIssueQty", iIssueQty) :
                new ObjectParameter("iIssueQty", typeof(int));
    
            var iItemIDParameter = iItemID.HasValue ?
                new ObjectParameter("iItemID", iItemID) :
                new ObjectParameter("iItemID", typeof(long));
    
            var bIsActiveParameter = bIsActive.HasValue ?
                new ObjectParameter("bIsActive", bIsActive) :
                new ObjectParameter("bIsActive", typeof(bool));
    
            var iInsertedByParameter = iInsertedBy.HasValue ?
                new ObjectParameter("iInsertedBy", iInsertedBy) :
                new ObjectParameter("iInsertedBy", typeof(long));
    
            var iUpdatedByParameter = iUpdatedBy.HasValue ?
                new ObjectParameter("iUpdatedBy", iUpdatedBy) :
                new ObjectParameter("iUpdatedBy", typeof(long));
    
            var dtInsertedTimeParameter = dtInsertedTime.HasValue ?
                new ObjectParameter("dtInsertedTime", dtInsertedTime) :
                new ObjectParameter("dtInsertedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_StockLogData_Update", iID, iIssueToNameIDParameter, dtIssueDateParameter, iIssueQtyParameter, iItemIDParameter, bIsActiveParameter, iInsertedByParameter, iUpdatedByParameter, dtInsertedTimeParameter, iErrorCode, iErrorMessage);
        }
    
        public virtual ObjectResult<USP_UnitMaster_Select_Result> USP_UnitMaster_Select(string sUnit, Nullable<int> iUnitId, ObjectParameter iErrorCode, string sSortBy, Nullable<int> iStartRow, Nullable<int> iEndRow, string sMode)
        {
            var sUnitParameter = sUnit != null ?
                new ObjectParameter("sUnit", sUnit) :
                new ObjectParameter("sUnit", typeof(string));
    
            var iUnitIdParameter = iUnitId.HasValue ?
                new ObjectParameter("iUnitId", iUnitId) :
                new ObjectParameter("iUnitId", typeof(int));
    
            var sSortByParameter = sSortBy != null ?
                new ObjectParameter("sSortBy", sSortBy) :
                new ObjectParameter("sSortBy", typeof(string));
    
            var iStartRowParameter = iStartRow.HasValue ?
                new ObjectParameter("iStartRow", iStartRow) :
                new ObjectParameter("iStartRow", typeof(int));
    
            var iEndRowParameter = iEndRow.HasValue ?
                new ObjectParameter("iEndRow", iEndRow) :
                new ObjectParameter("iEndRow", typeof(int));
    
            var sModeParameter = sMode != null ?
                new ObjectParameter("sMode", sMode) :
                new ObjectParameter("sMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_UnitMaster_Select_Result>("USP_UnitMaster_Select", sUnitParameter, iUnitIdParameter, iErrorCode, sSortByParameter, iStartRowParameter, iEndRowParameter, sModeParameter);
        }
    }
}
